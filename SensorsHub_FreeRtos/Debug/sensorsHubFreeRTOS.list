
sensorsHubFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800a128  0800a128  0001a128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a644  0800a644  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af0  200001e0  0800a82c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd0  0800a82c  00024cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017575  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344b  00000000  00000000  00037785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0003abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a855  00000000  00000000  0003d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015872  00000000  00000000  00057a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3586  00000000  00000000  0006d2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006564  00000000  00000000  001108d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a110 	.word	0x0800a110

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a110 	.word	0x0800a110

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <send_4_bits_to_lcd>:
}

/*--------------- Write To LCD ---------------*/

void send_4_bits_to_lcd (uint8_t data, uint8_t rs_val)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs_val);
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9c:	4820      	ldr	r0, [pc, #128]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8000f9e:	f001 fbf1 	bl	8002784 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data>>3)&0x01);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	481a      	ldr	r0, [pc, #104]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8000fb6:	f001 fbe5 	bl	8002784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data>>2)&0x01);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8000fce:	f001 fbd9 	bl	8002784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data>>1)&0x01);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	085b      	lsrs	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8000fe6:	f001 fbcd 	bl	8002784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data>>0)&0x01);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8000ffa:	f001 fbc3 	bl	8002784 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8001006:	f001 fbbd 	bl	8002784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <send_4_bits_to_lcd+0x9c>)
 8001012:	f001 fbb7 	bl	8002784 <HAL_GPIO_WritePin>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020400 	.word	0x40020400

08001024 <send_8_bits_to_lcd>:

void send_8_bits_to_lcd (uint8_t data, uint8_t rs_val)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	send_4_bits_to_lcd((data>>4) & 0x0F, rs_val);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	b2db      	uxtb	r3, r3
 800103a:	79ba      	ldrb	r2, [r7, #6]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ffa0 	bl	8000f84 <send_4_bits_to_lcd>

	send_4_bits_to_lcd(data & 0x0F, rs_val);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	b2db      	uxtb	r3, r3
 800104c:	79ba      	ldrb	r2, [r7, #6]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff97 	bl	8000f84 <send_4_bits_to_lcd>


}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <lcd_puts>:
    }
    send_8_bits_to_lcd (col,0);
}

void lcd_puts(int8_t *string , int n)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
	//Set Cursor Position
	for (int i=0; i<n ;i++)
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e00d      	b.n	800108a <lcd_puts+0x2c>
	{
		//lcd_write(1,*string);
		send_8_bits_to_lcd(*string, 1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f993 3000 	ldrsb.w	r3, [r3]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2101      	movs	r1, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffd3 	bl	8001024 <send_8_bits_to_lcd>
		string++;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
	for (int i=0; i<n ;i++)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	dbed      	blt.n	800106e <lcd_puts+0x10>
	}
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <lcd_clear>:
void lcd_clear(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	send_8_bits_to_lcd(0x01, 0);
 80010a0:	2100      	movs	r1, #0
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff ffbe 	bl	8001024 <send_8_bits_to_lcd>

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f000 fcee 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f840 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 f8f2 	bl	80012a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010bc:	f000 f89c 	bl	80011f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010c0:	f002 facc 	bl	800365c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureValues */
  temperatureValuesHandle = osMessageQueueNew (10, sizeof(float), &temperatureValues_attributes);
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <main+0x60>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	200a      	movs	r0, #10
 80010ca:	f002 fc8d 	bl	80039e8 <osMessageQueueNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <main+0x64>)
 80010d2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <main+0x68>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	480f      	ldr	r0, [pc, #60]	; (8001118 <main+0x6c>)
 80010da:	f002 fb09 	bl	80036f0 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <main+0x70>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of lcdDispTask */
  lcdDispTaskHandle = osThreadNew(lcdDisplayTask, NULL, &lcdDispTask_attributes);
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <main+0x74>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <main+0x78>)
 80010ea:	f002 fb01 	bl	80036f0 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <main+0x7c>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* creation of AdcReadingTa */
  AdcReadingTaHandle = osThreadNew(AdcReadingTask, NULL, &AdcReadingTa_attributes);
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <main+0x80>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <main+0x84>)
 80010fa:	f002 faf9 	bl	80036f0 <osThreadNew>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <main+0x88>)
 8001102:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001104:	f002 face 	bl	80036a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001108:	e7fe      	b.n	8001108 <main+0x5c>
 800110a:	bf00      	nop
 800110c:	0800a230 	.word	0x0800a230
 8001110:	20000250 	.word	0x20000250
 8001114:	0800a1c4 	.word	0x0800a1c4
 8001118:	08001359 	.word	0x08001359
 800111c:	20000244 	.word	0x20000244
 8001120:	0800a1e8 	.word	0x0800a1e8
 8001124:	08001369 	.word	0x08001369
 8001128:	20000248 	.word	0x20000248
 800112c:	0800a20c 	.word	0x0800a20c
 8001130:	08001469 	.word	0x08001469
 8001134:	2000024c 	.word	0x2000024c

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f005 ff8d 	bl	8007066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <SystemClock_Config+0xb8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <SystemClock_Config+0xb8>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <SystemClock_Config+0xb8>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <SystemClock_Config+0xbc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <SystemClock_Config+0xbc>)
 8001186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <SystemClock_Config+0xbc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fb1b 	bl	80027e8 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011b8:	f000 fa52 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fd7e 	bl	8002cd8 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011e2:	f000 fa3d 	bl	8001660 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fe:	463b      	mov	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_ADC1_Init+0x9c>)
 800120c:	4a22      	ldr	r2, [pc, #136]	; (8001298 <MX_ADC1_Init+0xa0>)
 800120e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_ADC1_Init+0x9c>)
 800121e:	2201      	movs	r2, #1
 8001220:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001224:	2200      	movs	r2, #0
 8001226:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_ADC1_Init+0x9c>)
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001232:	2201      	movs	r2, #1
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_ADC1_Init+0x9c>)
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <MX_ADC1_Init+0xa4>)
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_ADC1_Init+0x9c>)
 800124a:	2201      	movs	r2, #1
 800124c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_ADC1_Init+0x9c>)
 8001258:	2201      	movs	r2, #1
 800125a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_ADC1_Init+0x9c>)
 800125e:	f000 fc7d 	bl	8001b5c <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001268:	f000 f9fa 	bl	8001660 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800126c:	2303      	movs	r3, #3
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_ADC1_Init+0x9c>)
 800127e:	f000 fdfd 	bl	8001e7c <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001288:	f000 f9ea 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001fc 	.word	0x200001fc
 8001298:	40012000 	.word	0x40012000
 800129c:	0f000001 	.word	0x0f000001

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_GPIO_Init+0x70>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <MX_GPIO_Init+0x70>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_GPIO_Init+0x70>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012d0:	2306      	movs	r3, #6
 80012d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012da:	2302      	movs	r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0x74>)
 80012e4:	f001 f8ca 	bl	800247c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	2007      	movs	r0, #7
 80012ee:	f001 f89b 	bl	8002428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012f2:	2007      	movs	r0, #7
 80012f4:	f001 f8b4 	bl	8002460 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2105      	movs	r1, #5
 80012fc:	2008      	movs	r0, #8
 80012fe:	f001 f893 	bl	8002428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001302:	2008      	movs	r0, #8
 8001304:	f001 f8ac 	bl	8002460 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d002      	beq.n	800132e <HAL_GPIO_EXTI_Callback+0x16>
 8001328:	2b04      	cmp	r3, #4
 800132a:	d007      	beq.n	800133c <HAL_GPIO_EXTI_Callback+0x24>
	case MOTION_SENSOR:
		osThreadFlagsSet (lcdDispTaskHandle, 0x001F);
		break;

	}
}
 800132c:	e00d      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x32>
		osThreadFlagsSet (lcdDispTaskHandle, 0x000F);
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	210f      	movs	r1, #15
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fa6d 	bl	8003814 <osThreadFlagsSet>
		break;
 800133a:	e006      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x32>
		osThreadFlagsSet (lcdDispTaskHandle, 0x001F);
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_GPIO_EXTI_Callback+0x3c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	211f      	movs	r1, #31
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fa66 	bl	8003814 <osThreadFlagsSet>
		break;
 8001348:	bf00      	nop
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000248 	.word	0x20000248

08001358 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f002 fb26 	bl	80039b2 <osDelay>
 8001366:	e7fb      	b.n	8001360 <StartDefaultTask+0x8>

08001368 <lcdDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_lcdDisplayTask */
void lcdDisplayTask(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lcdDisplayTask */

	float tempValue = 0;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[30];
	/* Infinite loop */
	for(;;)
	{

		uint32_t notifValue = osThreadFlagsWait (0x000F, osFlagsWaitAll, osWaitForever);
 8001376:	f04f 32ff 	mov.w	r2, #4294967295
 800137a:	2101      	movs	r1, #1
 800137c:	200f      	movs	r0, #15
 800137e:	f002 fa97 	bl	80038b0 <osThreadFlagsWait>
 8001382:	62f8      	str	r0, [r7, #44]	; 0x2c
		switch (notifValue)
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	2b3f      	cmp	r3, #63	; 0x3f
 8001388:	d039      	beq.n	80013fe <lcdDisplayTask+0x96>
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	2b3f      	cmp	r3, #63	; 0x3f
 800138e:	d857      	bhi.n	8001440 <lcdDisplayTask+0xd8>
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	2b2f      	cmp	r3, #47	; 0x2f
 8001394:	d012      	beq.n	80013bc <lcdDisplayTask+0x54>
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	2b2f      	cmp	r3, #47	; 0x2f
 800139a:	d851      	bhi.n	8001440 <lcdDisplayTask+0xd8>
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	d003      	beq.n	80013aa <lcdDisplayTask+0x42>
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	2b1f      	cmp	r3, #31
 80013a6:	d005      	beq.n	80013b4 <lcdDisplayTask+0x4c>
 80013a8:	e04a      	b.n	8001440 <lcdDisplayTask+0xd8>
		{
		case 0x000F:
			lcd_puts((uint8_t*)" vibration detected" , strlen (" vibration detected"));
 80013aa:	2113      	movs	r1, #19
 80013ac:	4829      	ldr	r0, [pc, #164]	; (8001454 <lcdDisplayTask+0xec>)
 80013ae:	f7ff fe56 	bl	800105e <lcd_puts>

			break;
 80013b2:	e045      	b.n	8001440 <lcdDisplayTask+0xd8>
		case 0x001F:
			lcd_puts((uint8_t*)" motion detected" , strlen (" motion detected"));
 80013b4:	2110      	movs	r1, #16
 80013b6:	4828      	ldr	r0, [pc, #160]	; (8001458 <lcdDisplayTask+0xf0>)
 80013b8:	f7ff fe51 	bl	800105e <lcd_puts>

		case 0x002F:

			osMessageQueueGet (temperatureValuesHandle, &tempValue, 0, osWaitForever);
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <lcdDisplayTask+0xf4>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	2200      	movs	r2, #0
 80013ca:	f002 fbe1 	bl	8003b90 <osMessageQueueGet>
			sprintf(msg, " LM35: %.2f C\r\n",tempValue);
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8c1 	bl	8000558 <__aeabi_f2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	f107 0008 	add.w	r0, r7, #8
 80013de:	4920      	ldr	r1, [pc, #128]	; (8001460 <lcdDisplayTask+0xf8>)
 80013e0:	f006 fbc2 	bl	8007b68 <siprintf>
			lcd_puts((uint8_t*)msg, strlen (msg));
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe fef9 	bl	80001e0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fe30 	bl	800105e <lcd_puts>
		case 0x003F:

			osMessageQueueGet (temperatureValuesHandle, &tempValue, 0, osWaitForever);
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <lcdDisplayTask+0xf4>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2200      	movs	r2, #0
 800140c:	f002 fbc0 	bl	8003b90 <osMessageQueueGet>
			sprintf(msg, " NTC: %.2f *C\r\n", tempValue);  // Format the temperature value for UART output
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8a0 	bl	8000558 <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	f107 0008 	add.w	r0, r7, #8
 8001420:	4910      	ldr	r1, [pc, #64]	; (8001464 <lcdDisplayTask+0xfc>)
 8001422:	f006 fba1 	bl	8007b68 <siprintf>
			lcd_puts((uint8_t*)msg, strlen (msg));
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fed8 	bl	80001e0 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe0f 	bl	800105e <lcd_puts>


		}
		HAL_Delay(500);
 8001440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001444:	f000 fb66 	bl	8001b14 <HAL_Delay>
		lcd_clear();
 8001448:	f7ff fe28 	bl	800109c <lcd_clear>


		osDelay(100);
 800144c:	2064      	movs	r0, #100	; 0x64
 800144e:	f002 fab0 	bl	80039b2 <osDelay>
	{
 8001452:	e790      	b.n	8001376 <lcdDisplayTask+0xe>
 8001454:	0800a164 	.word	0x0800a164
 8001458:	0800a178 	.word	0x0800a178
 800145c:	20000250 	.word	0x20000250
 8001460:	0800a18c 	.word	0x0800a18c
 8001464:	0800a19c 	.word	0x0800a19c

08001468 <AdcReadingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdcReadingTask */
void AdcReadingTask(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AdcReadingTask */

	float temp = 0;
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
	float steinhart=0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{

		for(int i=0; i<2; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e0bf      	b.n	8001602 <AdcReadingTask+0x19a>
		{

			HAL_ADC_Start(&hadc1); // Start ADC Conversion
 8001482:	4867      	ldr	r0, [pc, #412]	; (8001620 <AdcReadingTask+0x1b8>)
 8001484:	f000 fbae 	bl	8001be4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1); // Poll ADC1 Peripheral & TimeOut = 1mSec
 8001488:	2101      	movs	r1, #1
 800148a:	4865      	ldr	r0, [pc, #404]	; (8001620 <AdcReadingTask+0x1b8>)
 800148c:	f000 fc5e 	bl	8001d4c <HAL_ADC_PollForConversion>
			uint16_t AD_RES = HAL_ADC_GetValue(&hadc1); // Read ADC Conversion Result
 8001490:	4863      	ldr	r0, [pc, #396]	; (8001620 <AdcReadingTask+0x1b8>)
 8001492:	f000 fce6 	bl	8001e62 <HAL_ADC_GetValue>
 8001496:	4603      	mov	r3, r0
 8001498:	827b      	strh	r3, [r7, #18]
			switch(i)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <AdcReadingTask+0x40>
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d027      	beq.n	80014f6 <AdcReadingTask+0x8e>
 80014a6:	e0a5      	b.n	80015f4 <AdcReadingTask+0x18c>
			{
			case 0:

				temp = ((AD_RES * 5000 /4096) + 5)/10;
 80014a8:	8a7b      	ldrh	r3, [r7, #18]
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da01      	bge.n	80014ba <AdcReadingTask+0x52>
 80014b6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ba:	131b      	asrs	r3, r3, #12
 80014bc:	3305      	adds	r3, #5
 80014be:	4a59      	ldr	r2, [pc, #356]	; (8001624 <AdcReadingTask+0x1bc>)
 80014c0:	fb82 1203 	smull	r1, r2, r2, r3
 80014c4:	1092      	asrs	r2, r2, #2
 80014c6:	17db      	asrs	r3, r3, #31
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	edc7 7a03 	vstr	s15, [r7, #12]


				osMessageQueuePut (temperatureValuesHandle, &temp, 0, osWaitForever);
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <AdcReadingTask+0x1c0>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	f107 010c 	add.w	r1, r7, #12
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	2200      	movs	r2, #0
 80014e4:	f002 faf4 	bl	8003ad0 <osMessageQueuePut>
				osThreadFlagsSet (lcdDispTaskHandle, 0x002F);
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <AdcReadingTask+0x1c4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	212f      	movs	r1, #47	; 0x2f
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f990 	bl	8003814 <osThreadFlagsSet>

				break;
 80014f4:	e07e      	b.n	80015f4 <AdcReadingTask+0x18c>
			case 1:
				temp = AD_RES;
 80014f6:	8a7b      	ldrh	r3, [r7, #18]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001500:	edc7 7a03 	vstr	s15, [r7, #12]
				if (temp > 0) {  // Ensure the average is not zero to avoid division errors
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	dc00      	bgt.n	8001514 <AdcReadingTask+0xac>
					osMessageQueuePut (temperatureValuesHandle, &steinhart, 0, osWaitForever);
					osThreadFlagsSet (lcdDispTaskHandle, 0x003F);


				}
				break;
 8001512:	e06e      	b.n	80015f2 <AdcReadingTask+0x18a>
					temp = 4094 / temp - 1;  // Convert ADC reading to resistance using 12-bit ADC resolution
 8001514:	ed97 7a03 	vldr	s14, [r7, #12]
 8001518:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001630 <AdcReadingTask+0x1c8>
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001528:	edc7 7a03 	vstr	s15, [r7, #12]
					temp = SERIESRESISTOR / temp;  // Calculate the thermistor resistance
 800152c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001530:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001634 <AdcReadingTask+0x1cc>
 8001534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
					steinhart = temp / THERMISTORNOMINAL;  //Compute the ratio of thermistor resistance to nominal resistance
 800153c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001540:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001634 <AdcReadingTask+0x1cc>
 8001544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001548:	edc7 7a02 	vstr	s15, [r7, #8]
					steinhart = log(steinhart);  //Compute the natural logarithm of the resistance ratio
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f802 	bl	8000558 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	ec43 2b10 	vmov	d0, r2, r3
 800155c:	f008 fbd4 	bl	8009d08 <log>
 8001560:	ec53 2b10 	vmov	r2, r3, d0
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb26 	bl	8000bb8 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	60bb      	str	r3, [r7, #8]
					steinhart /= BCOEFFICIENT;  //Divide by the thermistor's Beta coefficient
 8001570:	ed97 7a02 	vldr	s14, [r7, #8]
 8001574:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001638 <AdcReadingTask+0x1d0>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	edc7 7a02 	vstr	s15, [r7, #8]
					steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15);  //Add the reciprocal of the nominal temperature in Kelvin
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffe8 	bl	8000558 <__aeabi_f2d>
 8001588:	a321      	add	r3, pc, #132	; (adr r3, 8001610 <AdcReadingTask+0x1a8>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe fe85 	bl	800029c <__adddf3>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fb0d 	bl	8000bb8 <__aeabi_d2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	60bb      	str	r3, [r7, #8]
					steinhart = 1.0 / steinhart;  //Compute the reciprocal to get the temperature in Kelvin
 80015a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ae:	edc7 7a02 	vstr	s15, [r7, #8]
					steinhart -= 273.15;  //Convert the temperature from Kelvin to Celsius
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffcf 	bl	8000558 <__aeabi_f2d>
 80015ba:	a317      	add	r3, pc, #92	; (adr r3, 8001618 <AdcReadingTask+0x1b0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fe6a 	bl	8000298 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff faf4 	bl	8000bb8 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	60bb      	str	r3, [r7, #8]
					osMessageQueuePut (temperatureValuesHandle, &steinhart, 0, osWaitForever);
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <AdcReadingTask+0x1c0>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	f107 0108 	add.w	r1, r7, #8
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	2200      	movs	r2, #0
 80015e2:	f002 fa75 	bl	8003ad0 <osMessageQueuePut>
					osThreadFlagsSet (lcdDispTaskHandle, 0x003F);
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <AdcReadingTask+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	213f      	movs	r1, #63	; 0x3f
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 f911 	bl	8003814 <osThreadFlagsSet>
				break;
 80015f2:	bf00      	nop

			}
			osDelay(5000);
 80015f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80015f8:	f002 f9db 	bl	80039b2 <osDelay>
		for(int i=0; i<2; i++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b01      	cmp	r3, #1
 8001606:	f77f af3c 	ble.w	8001482 <AdcReadingTask+0x1a>
 800160a:	e737      	b.n	800147c <AdcReadingTask+0x14>
 800160c:	f3af 8000 	nop.w
 8001610:	dcb5db83 	.word	0xdcb5db83
 8001614:	3f6b79e1 	.word	0x3f6b79e1
 8001618:	66666666 	.word	0x66666666
 800161c:	40711266 	.word	0x40711266
 8001620:	200001fc 	.word	0x200001fc
 8001624:	66666667 	.word	0x66666667
 8001628:	20000250 	.word	0x20000250
 800162c:	20000248 	.word	0x20000248
 8001630:	457fe000 	.word	0x457fe000
 8001634:	461c4000 	.word	0x461c4000
 8001638:	4576e000 	.word	0x4576e000

0800163c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800164e:	f000 fa41 	bl	8001ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010000 	.word	0x40010000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_MspInit+0x54>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_MspInit+0x54>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x54>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_MspInit+0x54>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_MspInit+0x54>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_MspInit+0x54>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	f06f 0001 	mvn.w	r0, #1
 80016b2:	f000 feb9 	bl	8002428 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_ADC_MspInit+0x7c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d127      	bne.n	8001736 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_ADC_MspInit+0x80>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_ADC_MspInit+0x80>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_ADC_MspInit+0x80>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_ADC_MspInit+0x80>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_ADC_MspInit+0x80>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_ADC_MspInit+0x80>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800171e:	2318      	movs	r3, #24
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_ADC_MspInit+0x84>)
 8001732:	f000 fea3 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40012000 	.word	0x40012000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_InitTick+0xd0>)
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	4a2d      	ldr	r2, [pc, #180]	; (800181c <HAL_InitTick+0xd0>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6453      	str	r3, [r2, #68]	; 0x44
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_InitTick+0xd0>)
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fc74 	bl	8003070 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001788:	f001 fc5e 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 800178c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	4a23      	ldr	r2, [pc, #140]	; (8001820 <HAL_InitTick+0xd4>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	3b01      	subs	r3, #1
 800179a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_InitTick+0xd8>)
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_InitTick+0xdc>)
 80017a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_InitTick+0xd8>)
 80017a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <HAL_InitTick+0xd8>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_InitTick+0xd8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_InitTick+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_InitTick+0xd8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_InitTick+0xd8>)
 80017c4:	f001 fc86 	bl	80030d4 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d11b      	bne.n	800180e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017d6:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_InitTick+0xd8>)
 80017d8:	f001 fcd6 	bl	8003188 <HAL_TIM_Base_Start_IT>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d111      	bne.n	800180e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017ea:	2019      	movs	r0, #25
 80017ec:	f000 fe38 	bl	8002460 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d808      	bhi.n	8001808 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017f6:	2200      	movs	r2, #0
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	2019      	movs	r0, #25
 80017fc:	f000 fe14 	bl	8002428 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_InitTick+0xe0>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e002      	b.n	800180e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800180e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001812:	4618      	mov	r0, r3
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	431bde83 	.word	0x431bde83
 8001824:	20000254 	.word	0x20000254
 8001828:	40010000 	.word	0x40010000
 800182c:	20000004 	.word	0x20000004

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001860:	2002      	movs	r0, #2
 8001862:	f000 ffa9 	bl	80027b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800186e:	2004      	movs	r0, #4
 8001870:	f000 ffa2 	bl	80027b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800187e:	f001 fce5 	bl	800324c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000254 	.word	0x20000254

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a6:	f005 faad 	bl	8006e04 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
  return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ce:	e7fe      	b.n	80018ce <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
  }

  return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
  }
  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f005 fa12 	bl	8006e04 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20018000 	.word	0x20018000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	2000029c 	.word	0x2000029c
 8001a14:	20004cd0 	.word	0x20004cd0

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f005 fac7 	bl	8006ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff fb1d 	bl	80010ac <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a80:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 8001a84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a88:	20004cd0 	.word	0x20004cd0

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 fcaa 	bl	8002412 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f7ff fe44 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fdd2 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	200002a0 	.word	0x200002a0

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200002a0 	.word	0x200002a0

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e033      	b.n	8001bda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fda2 	bl	80016c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba2:	f023 0302 	bic.w	r3, r3, #2
 8001ba6:	f043 0202 	orr.w	r2, r3, #2
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fa86 	bl	80020c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bca:	e001      	b.n	8001bd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Start+0x1a>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e097      	b.n	8001d2e <HAL_ADC_Start+0x14a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d018      	beq.n	8001c46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c24:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <HAL_ADC_Start+0x158>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a45      	ldr	r2, [pc, #276]	; (8001d40 <HAL_ADC_Start+0x15c>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9a      	lsrs	r2, r3, #18
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c38:	e002      	b.n	8001c40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f9      	bne.n	8001c3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d15f      	bne.n	8001d14 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c92:	d106      	bne.n	8001ca2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f023 0206 	bic.w	r2, r3, #6
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_ADC_Start+0x160>)
 8001cb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cbc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d129      	bne.n	8001d2c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	e020      	b.n	8001d2c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_ADC_Start+0x164>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d11b      	bne.n	8001d2c <HAL_ADC_Start+0x148>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d114      	bne.n	8001d2c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	e00b      	b.n	8001d2c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f043 0210 	orr.w	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	40012300 	.word	0x40012300
 8001d48:	40012000 	.word	0x40012000

08001d4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d113      	bne.n	8001d92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d78:	d10b      	bne.n	8001d92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e063      	b.n	8001e5a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d92:	f7ff feb3 	bl	8001afc <HAL_GetTick>
 8001d96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d98:	e021      	b.n	8001dde <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d01d      	beq.n	8001dde <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_ADC_PollForConversion+0x6c>
 8001da8:	f7ff fea8 	bl	8001afc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d212      	bcs.n	8001dde <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d00b      	beq.n	8001dde <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0204 	orr.w	r2, r3, #4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e03d      	b.n	8001e5a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d1d6      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0212 	mvn.w	r2, #18
 8001df4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d123      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11f      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d111      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1c>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e105      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x228>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d925      	bls.n	8001ef4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4403      	add	r3, r0
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	e022      	b.n	8001f3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6919      	ldr	r1, [r3, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4403      	add	r3, r0
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d824      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b05      	subs	r3, #5
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b05      	subs	r3, #5
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8a:	e04c      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d824      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b23      	subs	r3, #35	; 0x23
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b23      	subs	r3, #35	; 0x23
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e023      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b41      	subs	r3, #65	; 0x41
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b41      	subs	r3, #65	; 0x41
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_ADC_ConfigChannel+0x234>)
 8002028:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_ADC_ConfigChannel+0x238>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d109      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1cc>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b12      	cmp	r3, #18
 800203a:	d105      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_ADC_ConfigChannel+0x238>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d123      	bne.n	800209a <HAL_ADC_ConfigChannel+0x21e>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b10      	cmp	r3, #16
 8002058:	d003      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x1e6>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b11      	cmp	r3, #17
 8002060:	d11b      	bne.n	800209a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b10      	cmp	r3, #16
 8002074:	d111      	bne.n	800209a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_ADC_ConfigChannel+0x23c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_ADC_ConfigChannel+0x240>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	0c9a      	lsrs	r2, r3, #18
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3b01      	subs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40012300 	.word	0x40012300
 80020b4:	40012000 	.word	0x40012000
 80020b8:	20000000 	.word	0x20000000
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c8:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <ADC_Init+0x1f0>)
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	021a      	lsls	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002118:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <ADC_Init+0x1f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002166:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6899      	ldr	r1, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e00f      	b.n	80021be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0202 	bic.w	r2, r2, #2
 80021cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e1b      	ldrb	r3, [r3, #24]
 80021d8:	005a      	lsls	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800220a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	3b01      	subs	r3, #1
 8002218:	035a      	lsls	r2, r3, #13
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e007      	b.n	8002234 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002232:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	3b01      	subs	r3, #1
 8002250:	051a      	lsls	r2, r3, #20
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002276:	025a      	lsls	r2, r3, #9
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	029a      	lsls	r2, r3, #10
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40012300 	.word	0x40012300
 80022b4:	0f000001 	.word	0x0f000001

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	; (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff4c 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243a:	f7ff ff61 	bl	8002300 <__NVIC_GetPriorityGrouping>
 800243e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff ffb1 	bl	80023ac <NVIC_EncodePriority>
 800244a:	4602      	mov	r2, r0
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff80 	bl	8002358 <__NVIC_SetPriority>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff54 	bl	800231c <__NVIC_EnableIRQ>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e159      	b.n	800274c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8148 	bne.w	8002746 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a2 	beq.w	8002746 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_GPIO_Init+0x2e8>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_GPIO_Init+0x2e8>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <HAL_GPIO_Init+0x2e8>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_GPIO_Init+0x2ec>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a49      	ldr	r2, [pc, #292]	; (800276c <HAL_GPIO_Init+0x2f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x202>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a48      	ldr	r2, [pc, #288]	; (8002770 <HAL_GPIO_Init+0x2f4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x1fe>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a47      	ldr	r2, [pc, #284]	; (8002774 <HAL_GPIO_Init+0x2f8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x1fa>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a46      	ldr	r2, [pc, #280]	; (8002778 <HAL_GPIO_Init+0x2fc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x1f6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a45      	ldr	r2, [pc, #276]	; (800277c <HAL_GPIO_Init+0x300>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x1f2>
 800266a:	2304      	movs	r3, #4
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x204>
 800266e:	2307      	movs	r3, #7
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x204>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x204>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x204>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x204>
 800267e:	2300      	movs	r3, #0
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002690:	4935      	ldr	r1, [pc, #212]	; (8002768 <HAL_GPIO_Init+0x2ec>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_GPIO_Init+0x304>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <HAL_GPIO_Init+0x304>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_GPIO_Init+0x304>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_GPIO_Init+0x304>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_GPIO_Init+0x304>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002716:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <HAL_GPIO_Init+0x304>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_GPIO_Init+0x304>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002740:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <HAL_GPIO_Init+0x304>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	f67f aea2 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40013800 	.word	0x40013800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021000 	.word	0x40021000
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fd9e 	bl	8001318 <HAL_GPIO_EXTI_Callback>
  }
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40013c00 	.word	0x40013c00

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e267      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d075      	beq.n	80028f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002806:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b04      	cmp	r3, #4
 8002810:	d00c      	beq.n	800282c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002812:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281a:	2b08      	cmp	r3, #8
 800281c:	d112      	bne.n	8002844 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4b82      	ldr	r3, [pc, #520]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282a:	d10b      	bne.n	8002844 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	4b7e      	ldr	r3, [pc, #504]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d05b      	beq.n	80028f0 <HAL_RCC_OscConfig+0x108>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d157      	bne.n	80028f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e242      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d106      	bne.n	800285c <HAL_RCC_OscConfig+0x74>
 800284e:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a75      	ldr	r2, [pc, #468]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e01d      	b.n	8002898 <HAL_RCC_OscConfig+0xb0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x98>
 8002866:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6f      	ldr	r2, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6c      	ldr	r2, [pc, #432]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0xb0>
 8002880:	4b69      	ldr	r3, [pc, #420]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a68      	ldr	r2, [pc, #416]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a65      	ldr	r2, [pc, #404]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff f92c 	bl	8001afc <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff f928 	bl	8001afc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e207      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0xc0>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7ff f918 	bl	8001afc <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff f914 	bl	8001afc <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1f3      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0xe8>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002912:	2b08      	cmp	r3, #8
 8002914:	d11c      	bne.n	8002950 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x152>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e1c7      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4937      	ldr	r1, [pc, #220]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	e03a      	b.n	80029c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002958:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <HAL_RCC_OscConfig+0x244>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7ff f8cd 	bl	8001afc <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002966:	f7ff f8c9 	bl	8001afc <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1a8      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4925      	ldr	r1, [pc, #148]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
 8002998:	e015      	b.n	80029c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x244>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f8ac 	bl	8001afc <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a8:	f7ff f8a8 	bl	8001afc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e187      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d036      	beq.n	8002a40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_RCC_OscConfig+0x248>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7ff f88c 	bl	8001afc <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e8:	f7ff f888 	bl	8001afc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e167      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_OscConfig+0x240>)
 80029fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x200>
 8002a06:	e01b      	b.n	8002a40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_OscConfig+0x248>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7ff f875 	bl	8001afc <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a14:	e00e      	b.n	8002a34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a16:	f7ff f871 	bl	8001afc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d907      	bls.n	8002a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e150      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	42470000 	.word	0x42470000
 8002a30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ea      	bne.n	8002a16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8097 	beq.w	8002b7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b81      	ldr	r3, [pc, #516]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a7c      	ldr	r2, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <HAL_RCC_OscConfig+0x474>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b74      	ldr	r3, [pc, #464]	; (8002c5c <HAL_RCC_OscConfig+0x474>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a73      	ldr	r2, [pc, #460]	; (8002c5c <HAL_RCC_OscConfig+0x474>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7ff f831 	bl	8001afc <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7ff f82d 	bl	8001afc <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e10c      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x474>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x2ea>
 8002ac4:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a63      	ldr	r2, [pc, #396]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	e01c      	b.n	8002b0c <HAL_RCC_OscConfig+0x324>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x30c>
 8002ada:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a5e      	ldr	r2, [pc, #376]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a5b      	ldr	r2, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x324>
 8002af4:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe fff2 	bl	8001afc <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe ffee 	bl	8001afc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0cb      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	4b49      	ldr	r3, [pc, #292]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ee      	beq.n	8002b1c <HAL_RCC_OscConfig+0x334>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe ffdc 	bl	8001afc <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe ffd8 	bl	8001afc <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0b5      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a1 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d05c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d141      	bne.n	8002c1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_OscConfig+0x478>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe ffac 	bl	8001afc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe ffa8 	bl	8001afc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e087      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	3b01      	subs	r3, #1
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	491b      	ldr	r1, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x478>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7fe ff81 	bl	8001afc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe ff7d 	bl	8001afc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e05c      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x416>
 8002c1c:	e054      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x478>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe ff6a 	bl	8001afc <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe ff66 	bl	8001afc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e045      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x470>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x444>
 8002c4a:	e03d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e038      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x4ec>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d121      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d11a      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	3b01      	subs	r3, #1
 8002cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0cc      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d90c      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b65      	ldr	r3, [pc, #404]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b8      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d2c:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d44:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	494d      	ldr	r1, [pc, #308]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d044      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d119      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e07f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e06f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e067      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4934      	ldr	r1, [pc, #208]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fe98 	bl	8001afc <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fe fe94 	bl	8001afc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e04f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d20c      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e032      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4916      	ldr	r1, [pc, #88]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490e      	ldr	r1, [pc, #56]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5e:	f000 f821 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	490a      	ldr	r1, [pc, #40]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	5ccb      	ldrb	r3, [r1, r3]
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fc64 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023c00 	.word	0x40023c00
 8002e94:	40023800 	.word	0x40023800
 8002e98:	0800a248 	.word	0x0800a248
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea8:	b090      	sub	sp, #64	; 0x40
 8002eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	f200 80a1 	bhi.w	8003010 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed6:	e09b      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002edc:	e09b      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ee2:	e098      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	; (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eee:	4b4d      	ldr	r3, [pc, #308]	; (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d028      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	2200      	movs	r2, #0
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	627a      	str	r2, [r7, #36]	; 0x24
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f10:	fb03 f201 	mul.w	r2, r3, r1
 8002f14:	2300      	movs	r3, #0
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a43      	ldr	r2, [pc, #268]	; (800302c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f24:	460a      	mov	r2, r1
 8002f26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	2200      	movs	r2, #0
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	61fa      	str	r2, [r7, #28]
 8002f36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f3e:	f7fd fe8b 	bl	8000c58 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4613      	mov	r3, r2
 8002f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4a:	e053      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4c:	4b35      	ldr	r3, [pc, #212]	; (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	2200      	movs	r2, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	617a      	str	r2, [r7, #20]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f5e:	f04f 0b00 	mov.w	fp, #0
 8002f62:	4652      	mov	r2, sl
 8002f64:	465b      	mov	r3, fp
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	0159      	lsls	r1, r3, #5
 8002f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f74:	0150      	lsls	r0, r2, #5
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f96:	ebb2 0408 	subs.w	r4, r2, r8
 8002f9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	00eb      	lsls	r3, r5, #3
 8002fa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fac:	00e2      	lsls	r2, r4, #3
 8002fae:	4614      	mov	r4, r2
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	eb14 030a 	adds.w	r3, r4, sl
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	eb45 030b 	adc.w	r3, r5, fp
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	028b      	lsls	r3, r1, #10
 8002fce:	4621      	mov	r1, r4
 8002fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	028a      	lsls	r2, r1, #10
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe8:	f7fd fe36 	bl	8000c58 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetSysClockFreq+0x184>)
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003018:	4618      	mov	r0, r3
 800301a:	3740      	adds	r7, #64	; 0x40
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	017d7840 	.word	0x017d7840

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff fff0 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	0800a258 	.word	0x0800a258

08003070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220f      	movs	r2, #15
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_RCC_GetClockConfig+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0207 	and.w	r2, r3, #7
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f839 	bl	8003172 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 f9ca 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e044      	b.n	800322a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <HAL_TIM_Base_Start_IT+0xb0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d018      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x6c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d013      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x6c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_TIM_Base_Start_IT+0xb4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00e      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x6c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_TIM_Base_Start_IT+0xb8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x6c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a17      	ldr	r2, [pc, #92]	; (8003244 <HAL_TIM_Base_Start_IT+0xbc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x6c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a16      	ldr	r2, [pc, #88]	; (8003248 <HAL_TIM_Base_Start_IT+0xc0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b06      	cmp	r3, #6
 8003204:	d010      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003216:	e007      	b.n	8003228 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40014000 	.word	0x40014000

0800324c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0202 	mvn.w	r2, #2
 8003278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8ee 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8e0 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8f1 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0204 	mvn.w	r2, #4
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8c4 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8b6 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8c7 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b08      	cmp	r3, #8
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0208 	mvn.w	r2, #8
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2204      	movs	r2, #4
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f89a 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f88c 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f89d 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b10      	cmp	r3, #16
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0210 	mvn.w	r2, #16
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2208      	movs	r2, #8
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f870 	bl	8003470 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f862 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f873 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0201 	mvn.w	r2, #1
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe f936 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8e2 	bl	80035c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f838 	bl	8003498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b20      	cmp	r3, #32
 8003442:	d107      	bne.n	8003454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0220 	mvn.w	r2, #32
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8ac 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a34      	ldr	r2, [pc, #208]	; (8003590 <TIM_Base_SetConfig+0xe4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a31      	ldr	r2, [pc, #196]	; (8003594 <TIM_Base_SetConfig+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a30      	ldr	r2, [pc, #192]	; (8003598 <TIM_Base_SetConfig+0xec>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <TIM_Base_SetConfig+0xf0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a25      	ldr	r2, [pc, #148]	; (8003590 <TIM_Base_SetConfig+0xe4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01b      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d017      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a22      	ldr	r2, [pc, #136]	; (8003594 <TIM_Base_SetConfig+0xe8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <TIM_Base_SetConfig+0xec>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00f      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <TIM_Base_SetConfig+0xf0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00b      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <TIM_Base_SetConfig+0xf4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <TIM_Base_SetConfig+0xf8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <TIM_Base_SetConfig+0xfc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <TIM_Base_SetConfig+0xe4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d103      	bne.n	800357c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	615a      	str	r2, [r3, #20]
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <__NVIC_SetPriority>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Handler+0x1c>)
 800362e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003630:	f002 f89a 	bl	8005768 <xTaskGetSchedulerState>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800363a:	f003 f885 	bl	8006748 <xPortSysTickHandler>
  }
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800364c:	2100      	movs	r1, #0
 800364e:	f06f 0004 	mvn.w	r0, #4
 8003652:	f7ff ffbf 	bl	80035d4 <__NVIC_SetPriority>
#endif
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003662:	f3ef 8305 	mrs	r3, IPSR
 8003666:	603b      	str	r3, [r7, #0]
  return(result);
 8003668:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800366e:	f06f 0305 	mvn.w	r3, #5
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	e00c      	b.n	8003690 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <osKernelInitialize+0x44>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <osKernelInitialize+0x44>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003684:	2300      	movs	r3, #0
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	e002      	b.n	8003690 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003690:	687b      	ldr	r3, [r7, #4]
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200002a4 	.word	0x200002a4

080036a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036aa:	f3ef 8305 	mrs	r3, IPSR
 80036ae:	603b      	str	r3, [r7, #0]
  return(result);
 80036b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <osKernelStart+0x1a>
    stat = osErrorISR;
 80036b6:	f06f 0305 	mvn.w	r3, #5
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	e010      	b.n	80036e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <osKernelStart+0x48>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d109      	bne.n	80036da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036c6:	f7ff ffbf 	bl	8003648 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <osKernelStart+0x48>)
 80036cc:	2202      	movs	r2, #2
 80036ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036d0:	f001 fb36 	bl	8004d40 <vTaskStartScheduler>
      stat = osOK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	e002      	b.n	80036e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036e0:	687b      	ldr	r3, [r7, #4]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200002a4 	.word	0x200002a4

080036f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af04      	add	r7, sp, #16
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003700:	f3ef 8305 	mrs	r3, IPSR
 8003704:	617b      	str	r3, [r7, #20]
  return(result);
 8003706:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003708:	2b00      	cmp	r3, #0
 800370a:	d17e      	bne.n	800380a <osThreadNew+0x11a>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d07b      	beq.n	800380a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003716:	2318      	movs	r3, #24
 8003718:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d045      	beq.n	80037b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <osThreadNew+0x48>
        name = attr->name;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <osThreadNew+0x6e>
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b38      	cmp	r3, #56	; 0x38
 8003750:	d805      	bhi.n	800375e <osThreadNew+0x6e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <osThreadNew+0x72>
        return (NULL);
 800375e:	2300      	movs	r3, #0
 8003760:	e054      	b.n	800380c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00e      	beq.n	8003798 <osThreadNew+0xa8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2bbb      	cmp	r3, #187	; 0xbb
 8003780:	d90a      	bls.n	8003798 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <osThreadNew+0xa8>
        mem = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e010      	b.n	80037ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10c      	bne.n	80037ba <osThreadNew+0xca>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d108      	bne.n	80037ba <osThreadNew+0xca>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d104      	bne.n	80037ba <osThreadNew+0xca>
          mem = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e001      	b.n	80037ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d110      	bne.n	80037e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037c8:	9202      	str	r2, [sp, #8]
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f001 f8c6 	bl	8004968 <xTaskCreateStatic>
 80037dc:	4603      	mov	r3, r0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e013      	b.n	800380a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d110      	bne.n	800380a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 f911 	bl	8004a22 <xTaskCreate>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <osThreadNew+0x11a>
            hTask = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800380a:	693b      	ldr	r3, [r7, #16]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3728      	adds	r7, #40	; 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <osThreadFlagsSet+0x1a>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	da03      	bge.n	8003836 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800382e:	f06f 0303 	mvn.w	r3, #3
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e035      	b.n	80038a2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800383c:	f3ef 8305 	mrs	r3, IPSR
 8003840:	613b      	str	r3, [r7, #16]
  return(result);
 8003842:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01f      	beq.n	8003888 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	2201      	movs	r2, #1
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f002 f931 	bl	8005ac0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	2200      	movs	r2, #0
 8003864:	9200      	str	r2, [sp, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	2100      	movs	r1, #0
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f002 f928 	bl	8005ac0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <osThreadFlagsSet+0x8e>
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <osThreadFlagsSet+0x98>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	e00c      	b.n	80038a2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003888:	2300      	movs	r3, #0
 800388a:	2201      	movs	r2, #1
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	6978      	ldr	r0, [r7, #20]
 8003890:	f002 f856 	bl	8005940 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	2200      	movs	r2, #0
 800389a:	2100      	movs	r1, #0
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f002 f84f 	bl	8005940 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08c      	sub	sp, #48	; 0x30
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038bc:	f3ef 8305 	mrs	r3, IPSR
 80038c0:	617b      	str	r3, [r7, #20]
  return(result);
 80038c2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80038c8:	f06f 0305 	mvn.w	r3, #5
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ce:	e06b      	b.n	80039a8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da03      	bge.n	80038de <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80038d6:	f06f 0303 	mvn.w	r3, #3
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038dc:	e064      	b.n	80039a8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <osThreadFlagsWait+0x3e>
      clear = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ec:	e001      	b.n	80038f2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80038fa:	f001 fb75 	bl	8004fe8 <xTaskGetTickCount>
 80038fe:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003900:	f107 0210 	add.w	r2, r7, #16
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003908:	2000      	movs	r0, #0
 800390a:	f001 ffb9 	bl	8005880 <xTaskNotifyWait>
 800390e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d137      	bne.n	8003986 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8003916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003922:	4313      	orrs	r3, r2
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	4013      	ands	r3, r2
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	429a      	cmp	r2, r3
 800393a:	d032      	beq.n	80039a2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003942:	f06f 0302 	mvn.w	r3, #2
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003948:	e02e      	b.n	80039a8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d128      	bne.n	80039a6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800395a:	f06f 0302 	mvn.w	r3, #2
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003960:	e022      	b.n	80039a8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003962:	f001 fb41 	bl	8004fe8 <xTaskGetTickCount>
 8003966:	4602      	mov	r2, r0
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	429a      	cmp	r2, r3
 8003974:	d902      	bls.n	800397c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	e00e      	b.n	800399a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e009      	b.n	800399a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800398c:	f06f 0302 	mvn.w	r3, #2
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003992:	e002      	b.n	800399a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003994:	f06f 0301 	mvn.w	r3, #1
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1af      	bne.n	8003900 <osThreadFlagsWait+0x50>
 80039a0:	e002      	b.n	80039a8 <osThreadFlagsWait+0xf8>
            break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <osThreadFlagsWait+0xf8>
            break;
 80039a6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3730      	adds	r7, #48	; 0x30
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ba:	f3ef 8305 	mrs	r3, IPSR
 80039be:	60bb      	str	r3, [r7, #8]
  return(result);
 80039c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <osDelay+0x1c>
    stat = osErrorISR;
 80039c6:	f06f 0305 	mvn.w	r3, #5
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e007      	b.n	80039de <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <osDelay+0x2c>
      vTaskDelay(ticks);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f001 f97d 	bl	8004cd8 <vTaskDelay>
    }
  }

  return (stat);
 80039de:	68fb      	ldr	r3, [r7, #12]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f8:	f3ef 8305 	mrs	r3, IPSR
 80039fc:	613b      	str	r3, [r7, #16]
  return(result);
 80039fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d15f      	bne.n	8003ac4 <osMessageQueueNew+0xdc>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d05c      	beq.n	8003ac4 <osMessageQueueNew+0xdc>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d059      	beq.n	8003ac4 <osMessageQueueNew+0xdc>
    mem = -1;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d029      	beq.n	8003a70 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <osMessageQueueNew+0x62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b4f      	cmp	r3, #79	; 0x4f
 8003a2a:	d90e      	bls.n	8003a4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <osMessageQueueNew+0x62>
        mem = 1;
 8003a44:	2301      	movs	r3, #1
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e014      	b.n	8003a74 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d110      	bne.n	8003a74 <osMessageQueueNew+0x8c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10c      	bne.n	8003a74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <osMessageQueueNew+0x8c>
          mem = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e001      	b.n	8003a74 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10b      	bne.n	8003a92 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2100      	movs	r1, #0
 8003a84:	9100      	str	r1, [sp, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fa2f 	bl	8003eec <xQueueGenericCreateStatic>
 8003a8e:	61f8      	str	r0, [r7, #28]
 8003a90:	e008      	b.n	8003aa4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d105      	bne.n	8003aa4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fa9d 	bl	8003fdc <xQueueGenericCreate>
 8003aa2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e001      	b.n	8003abc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	69f8      	ldr	r0, [r7, #28]
 8003ac0:	f000 fef4 	bl	80048ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae8:	f3ef 8305 	mrs	r3, IPSR
 8003aec:	617b      	str	r3, [r7, #20]
  return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d028      	beq.n	8003b46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <osMessageQueuePut+0x36>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <osMessageQueuePut+0x36>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003b06:	f06f 0303 	mvn.w	r3, #3
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e038      	b.n	8003b80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b12:	f107 0210 	add.w	r2, r7, #16
 8003b16:	2300      	movs	r3, #0
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	69b8      	ldr	r0, [r7, #24]
 8003b1c:	f000 fbba 	bl	8004294 <xQueueGenericSendFromISR>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d003      	beq.n	8003b2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003b26:	f06f 0302 	mvn.w	r3, #2
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e028      	b.n	8003b80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d025      	beq.n	8003b80 <osMessageQueuePut+0xb0>
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <osMessageQueuePut+0xbc>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	e01c      	b.n	8003b80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <osMessageQueuePut+0x82>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003b52:	f06f 0303 	mvn.w	r3, #3
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	e012      	b.n	8003b80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	69b8      	ldr	r0, [r7, #24]
 8003b62:	f000 fa99 	bl	8004098 <xQueueGenericSend>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d009      	beq.n	8003b80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003b72:	f06f 0301 	mvn.w	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e002      	b.n	8003b80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003b7a:	f06f 0302 	mvn.w	r3, #2
 8003b7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003b80:	69fb      	ldr	r3, [r7, #28]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba6:	f3ef 8305 	mrs	r3, IPSR
 8003baa:	617b      	str	r3, [r7, #20]
  return(result);
 8003bac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d028      	beq.n	8003c04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <osMessageQueueGet+0x34>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <osMessageQueueGet+0x34>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003bc4:	f06f 0303 	mvn.w	r3, #3
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e037      	b.n	8003c3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003bd0:	f107 0310 	add.w	r3, r7, #16
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	69b8      	ldr	r0, [r7, #24]
 8003bda:	f000 fcd7 	bl	800458c <xQueueReceiveFromISR>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d003      	beq.n	8003bec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003be4:	f06f 0302 	mvn.w	r3, #2
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e027      	b.n	8003c3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d024      	beq.n	8003c3c <osMessageQueueGet+0xac>
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <osMessageQueueGet+0xb8>)
 8003bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	e01b      	b.n	8003c3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <osMessageQueueGet+0x80>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003c10:	f06f 0303 	mvn.w	r3, #3
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	e011      	b.n	8003c3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	69b8      	ldr	r0, [r7, #24]
 8003c1e:	f000 fbd5 	bl	80043cc <xQueueReceive>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d009      	beq.n	8003c3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003c2e:	f06f 0301 	mvn.w	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e002      	b.n	8003c3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003c36:	f06f 0302 	mvn.w	r3, #2
 8003c3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4a06      	ldr	r2, [pc, #24]	; (8003c7c <vApplicationGetIdleTaskMemory+0x30>)
 8003c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	200002a8 	.word	0x200002a8
 8003c7c:	20000364 	.word	0x20000364

08003c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <vApplicationGetTimerTaskMemory+0x2c>)
 8003c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4a06      	ldr	r2, [pc, #24]	; (8003cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8003c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	20000564 	.word	0x20000564
 8003cb0:	20000620 	.word	0x20000620

08003cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f103 0208 	add.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f103 0208 	add.w	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0208 	add.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d103      	bne.n	8003d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e00c      	b.n	8003d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e002      	b.n	8003d84 <vListInsert+0x2e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d2f6      	bcs.n	8003d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6892      	ldr	r2, [r2, #8]
 8003dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d103      	bne.n	8003dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e46:	f002 fbed 	bl	8006624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	3b01      	subs	r3, #1
 8003e78:	68f9      	ldr	r1, [r7, #12]
 8003e7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d114      	bne.n	8003ec6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01a      	beq.n	8003eda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fa43 	bl	8005334 <xTaskRemoveFromEventList>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <xQueueGenericReset+0xcc>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	e009      	b.n	8003eda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3310      	adds	r3, #16
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fef2 	bl	8003cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff feed 	bl	8003cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003eda:	f002 fbd3 	bl	8006684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ede:	2301      	movs	r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	; 0x38
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <xQueueGenericCreateStatic+0x52>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <xQueueGenericCreateStatic+0x56>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericCreateStatic+0x58>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <xQueueGenericCreateStatic+0x7e>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <xQueueGenericCreateStatic+0x82>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <xQueueGenericCreateStatic+0x84>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61fb      	str	r3, [r7, #28]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f8a:	2350      	movs	r3, #80	; 0x50
 8003f8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b50      	cmp	r3, #80	; 0x50
 8003f92:	d00a      	beq.n	8003faa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	61bb      	str	r3, [r7, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003faa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f83f 	bl	8004050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3730      	adds	r7, #48	; 0x30
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	613b      	str	r3, [r7, #16]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	3350      	adds	r3, #80	; 0x50
 8004014:	4618      	mov	r0, r3
 8004016:	f002 fd0b 	bl	8006a30 <pvPortMalloc>
 800401a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d011      	beq.n	8004046 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3350      	adds	r3, #80	; 0x50
 800402a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f805 	bl	8004050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004046:	69bb      	ldr	r3, [r7, #24]
	}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e002      	b.n	8004072 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800407e:	2101      	movs	r1, #1
 8004080:	69b8      	ldr	r0, [r7, #24]
 8004082:	f7ff fecb 	bl	8003e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040a6:	2300      	movs	r3, #0
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xQueueGenericSend+0x32>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <xQueueGenericSend+0x40>
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <xQueueGenericSend+0x44>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <xQueueGenericSend+0x46>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <xQueueGenericSend+0x60>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d103      	bne.n	8004106 <xQueueGenericSend+0x6e>
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <xQueueGenericSend+0x72>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <xQueueGenericSend+0x74>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xQueueGenericSend+0x8e>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	623b      	str	r3, [r7, #32]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004126:	f001 fb1f 	bl	8005768 <xTaskGetSchedulerState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <xQueueGenericSend+0x9e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueGenericSend+0xa2>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueGenericSend+0xa4>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <xQueueGenericSend+0xbe>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61fb      	str	r3, [r7, #28]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004156:	f002 fa65 	bl	8006624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	429a      	cmp	r2, r3
 8004164:	d302      	bcc.n	800416c <xQueueGenericSend+0xd4>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d129      	bne.n	80041c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004172:	f000 fa8b 	bl	800468c <prvCopyDataToQueue>
 8004176:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	4618      	mov	r0, r3
 8004186:	f001 f8d5 	bl	8005334 <xTaskRemoveFromEventList>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004190:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <xQueueGenericSend+0x1f8>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	e00a      	b.n	80041b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041a8:	4b39      	ldr	r3, [pc, #228]	; (8004290 <xQueueGenericSend+0x1f8>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041b8:	f002 fa64 	bl	8006684 <vPortExitCritical>
				return pdPASS;
 80041bc:	2301      	movs	r3, #1
 80041be:	e063      	b.n	8004288 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041c6:	f002 fa5d 	bl	8006684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e05c      	b.n	8004288 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f911 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041de:	2301      	movs	r3, #1
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041e2:	f002 fa4f 	bl	8006684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041e6:	f000 fe1b 	bl	8004e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ea:	f002 fa1b 	bl	8006624 <vPortEnterCritical>
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f4:	b25b      	sxtb	r3, r3
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d103      	bne.n	8004204 <xQueueGenericSend+0x16c>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800420a:	b25b      	sxtb	r3, r3
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <xQueueGenericSend+0x182>
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421a:	f002 fa33 	bl	8006684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800421e:	1d3a      	adds	r2, r7, #4
 8004220:	f107 0314 	add.w	r3, r7, #20
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f900 	bl	800542c <xTaskCheckForTimeOut>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d124      	bne.n	800427c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004234:	f000 fb22 	bl	800487c <prvIsQueueFull>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	3310      	adds	r3, #16
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f001 f824 	bl	8005294 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800424c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800424e:	f000 faad 	bl	80047ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004252:	f000 fe2b 	bl	8004eac <xTaskResumeAll>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f47f af7c 	bne.w	8004156 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <xQueueGenericSend+0x1f8>)
 8004260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	e772      	b.n	8004156 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004272:	f000 fa9b 	bl	80047ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004276:	f000 fe19 	bl	8004eac <xTaskResumeAll>
 800427a:	e76c      	b.n	8004156 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800427c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800427e:	f000 fa95 	bl	80047ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004282:	f000 fe13 	bl	8004eac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004286:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004288:	4618      	mov	r0, r3
 800428a:	3738      	adds	r7, #56	; 0x38
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b090      	sub	sp, #64	; 0x40
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <xQueueGenericSendFromISR+0x3c>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <xQueueGenericSendFromISR+0x40>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <xQueueGenericSendFromISR+0x42>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSendFromISR+0x6a>
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <xQueueGenericSendFromISR+0x6e>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericSendFromISR+0x70>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800431e:	f002 fb47 	bl	80069b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004322:	f3ef 8211 	mrs	r2, BASEPRI
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61fa      	str	r2, [r7, #28]
 8004338:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800433a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <xQueueGenericSendFromISR+0xbc>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d12f      	bne.n	80043b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004366:	f000 f991 	bl	800468c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800436a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d112      	bne.n	800439a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	d016      	beq.n	80043aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	4618      	mov	r0, r3
 8004382:	f000 ffd7 	bl	8005334 <xTaskRemoveFromEventList>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e007      	b.n	80043aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800439a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800439e:	3301      	adds	r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	b25a      	sxtb	r2, r3
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043aa:	2301      	movs	r3, #1
 80043ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80043ae:	e001      	b.n	80043b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3740      	adds	r7, #64	; 0x40
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043d8:	2300      	movs	r3, #0
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <xQueueReceive+0x30>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	623b      	str	r3, [r7, #32]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <xQueueReceive+0x3e>
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <xQueueReceive+0x42>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <xQueueReceive+0x44>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <xQueueReceive+0x5e>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61fb      	str	r3, [r7, #28]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800442a:	f001 f99d 	bl	8005768 <xTaskGetSchedulerState>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <xQueueReceive+0x6e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <xQueueReceive+0x72>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xQueueReceive+0x74>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xQueueReceive+0x8e>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	61bb      	str	r3, [r7, #24]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800445a:	f002 f8e3 	bl	8006624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01f      	beq.n	80044aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800446e:	f000 f977 	bl	8004760 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	1e5a      	subs	r2, r3, #1
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00f      	beq.n	80044a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	3310      	adds	r3, #16
 8004486:	4618      	mov	r0, r3
 8004488:	f000 ff54 	bl	8005334 <xTaskRemoveFromEventList>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <xQueueReceive+0x1bc>)
 8004494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044a2:	f002 f8ef 	bl	8006684 <vPortExitCritical>
				return pdPASS;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e069      	b.n	800457e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b0:	f002 f8e8 	bl	8006684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e062      	b.n	800457e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044be:	f107 0310 	add.w	r3, r7, #16
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 ff9c 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044cc:	f002 f8da 	bl	8006684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d0:	f000 fca6 	bl	8004e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d4:	f002 f8a6 	bl	8006624 <vPortEnterCritical>
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d103      	bne.n	80044ee <xQueueReceive+0x122>
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d103      	bne.n	8004504 <xQueueReceive+0x138>
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004504:	f002 f8be 	bl	8006684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004508:	1d3a      	adds	r2, r7, #4
 800450a:	f107 0310 	add.w	r3, r7, #16
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 ff8b 	bl	800542c <xTaskCheckForTimeOut>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d123      	bne.n	8004564 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800451c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451e:	f000 f997 	bl	8004850 <prvIsQueueEmpty>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d017      	beq.n	8004558 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 feaf 	bl	8005294 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004538:	f000 f938 	bl	80047ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800453c:	f000 fcb6 	bl	8004eac <xTaskResumeAll>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d189      	bne.n	800445a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <xQueueReceive+0x1bc>)
 8004548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	e780      	b.n	800445a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800455a:	f000 f927 	bl	80047ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800455e:	f000 fca5 	bl	8004eac <xTaskResumeAll>
 8004562:	e77a      	b.n	800445a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004566:	f000 f921 	bl	80047ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456a:	f000 fc9f 	bl	8004eac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800456e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004570:	f000 f96e 	bl	8004850 <prvIsQueueEmpty>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	f43f af6f 	beq.w	800445a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800457c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800457e:	4618      	mov	r0, r3
 8004580:	3730      	adds	r7, #48	; 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08e      	sub	sp, #56	; 0x38
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	623b      	str	r3, [r7, #32]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <xQueueReceiveFromISR+0x3a>
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xQueueReceiveFromISR+0x3e>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xQueueReceiveFromISR+0x40>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	61fb      	str	r3, [r7, #28]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045e6:	f002 f9e3 	bl	80069b0 <vPortValidateInterruptPriority>
	__asm volatile
 80045ea:	f3ef 8211 	mrs	r2, BASEPRI
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	61ba      	str	r2, [r7, #24]
 8004600:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004602:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02f      	beq.n	8004672 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004620:	f000 f89e 	bl	8004760 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	1e5a      	subs	r2, r3, #1
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800462c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d112      	bne.n	800465c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	3310      	adds	r3, #16
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fe76 	bl	8005334 <xTaskRemoveFromEventList>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e007      	b.n	800466c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800465c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004660:	3301      	adds	r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	b25a      	sxtb	r2, r3
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800466c:	2301      	movs	r3, #1
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	e001      	b.n	8004676 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004672:	2300      	movs	r3, #0
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	613b      	str	r3, [r7, #16]
	__asm volatile
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f383 8811 	msr	BASEPRI, r3
}
 8004680:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004684:	4618      	mov	r0, r3
 8004686:	3738      	adds	r7, #56	; 0x38
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d14d      	bne.n	800474e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f874 	bl	80057a4 <xTaskPriorityDisinherit>
 80046bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e043      	b.n	800474e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d119      	bne.n	8004700 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6858      	ldr	r0, [r3, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	461a      	mov	r2, r3
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	f002 fcb7 	bl	800704a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d32b      	bcc.n	800474e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	e026      	b.n	800474e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68d8      	ldr	r0, [r3, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	461a      	mov	r2, r3
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	f002 fc9d 	bl	800704a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	425b      	negs	r3, r3
 800471a:	441a      	add	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d207      	bcs.n	800473c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	425b      	negs	r3, r3
 8004736:	441a      	add	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d105      	bne.n	800474e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	3b01      	subs	r3, #1
 800474c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004756:	697b      	ldr	r3, [r7, #20]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d018      	beq.n	80047a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	441a      	add	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	d303      	bcc.n	8004794 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68d9      	ldr	r1, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	461a      	mov	r2, r3
 800479e:	6838      	ldr	r0, [r7, #0]
 80047a0:	f002 fc53 	bl	800704a <memcpy>
	}
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047b4:	f001 ff36 	bl	8006624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047c0:	e011      	b.n	80047e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d012      	beq.n	80047f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3324      	adds	r3, #36	; 0x24
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fdb0 	bl	8005334 <xTaskRemoveFromEventList>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047da:	f000 fe89 	bl	80054f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dce9      	bgt.n	80047c2 <prvUnlockQueue+0x16>
 80047ee:	e000      	b.n	80047f2 <prvUnlockQueue+0x46>
					break;
 80047f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	22ff      	movs	r2, #255	; 0xff
 80047f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047fa:	f001 ff43 	bl	8006684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047fe:	f001 ff11 	bl	8006624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800480a:	e011      	b.n	8004830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3310      	adds	r3, #16
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fd8b 	bl	8005334 <xTaskRemoveFromEventList>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004824:	f000 fe64 	bl	80054f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004828:	7bbb      	ldrb	r3, [r7, #14]
 800482a:	3b01      	subs	r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004834:	2b00      	cmp	r3, #0
 8004836:	dce9      	bgt.n	800480c <prvUnlockQueue+0x60>
 8004838:	e000      	b.n	800483c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800483a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	22ff      	movs	r2, #255	; 0xff
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004844:	f001 ff1e 	bl	8006684 <vPortExitCritical>
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004858:	f001 fee4 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e001      	b.n	800486e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800486e:	f001 ff09 	bl	8006684 <vPortExitCritical>

	return xReturn;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004884:	f001 fece 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	429a      	cmp	r2, r3
 8004892:	d102      	bne.n	800489a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e001      	b.n	800489e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800489e:	f001 fef1 	bl	8006684 <vPortExitCritical>

	return xReturn;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e014      	b.n	80048e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048bc:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <vQueueAddToRegistry+0x50>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048c8:	490c      	ldr	r1, [pc, #48]	; (80048fc <vQueueAddToRegistry+0x50>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <vQueueAddToRegistry+0x50>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048de:	e006      	b.n	80048ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b07      	cmp	r3, #7
 80048ea:	d9e7      	bls.n	80048bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000a20 	.word	0x20000a20

08004900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004910:	f001 fe88 	bl	8006624 <vPortEnterCritical>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800491a:	b25b      	sxtb	r3, r3
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d103      	bne.n	800492a <vQueueWaitForMessageRestricted+0x2a>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004930:	b25b      	sxtb	r3, r3
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d103      	bne.n	8004940 <vQueueWaitForMessageRestricted+0x40>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004940:	f001 fea0 	bl	8006684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fcc1 	bl	80052dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800495a:	6978      	ldr	r0, [r7, #20]
 800495c:	f7ff ff26 	bl	80047ac <prvUnlockQueue>
	}
 8004960:	bf00      	nop
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	; 0x38
 800496c:	af04      	add	r7, sp, #16
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <xTaskCreateStatic+0x2a>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	623b      	str	r3, [r7, #32]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xTaskCreateStatic+0x46>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	61fb      	str	r3, [r7, #28]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ae:	23bc      	movs	r3, #188	; 0xbc
 80049b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2bbc      	cmp	r3, #188	; 0xbc
 80049b6:	d00a      	beq.n	80049ce <xTaskCreateStatic+0x66>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	61bb      	str	r3, [r7, #24]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01e      	beq.n	8004a14 <xTaskCreateStatic+0xac>
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049ee:	2300      	movs	r3, #0
 80049f0:	9303      	str	r3, [sp, #12]
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f850 	bl	8004aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a0e:	f000 f8f3 	bl	8004bf8 <prvAddNewTaskToReadyList>
 8004a12:	e001      	b.n	8004a18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a18:	697b      	ldr	r3, [r7, #20]
	}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b08c      	sub	sp, #48	; 0x30
 8004a26:	af04      	add	r7, sp, #16
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 fffa 	bl	8006a30 <pvPortMalloc>
 8004a3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a44:	20bc      	movs	r0, #188	; 0xbc
 8004a46:	f001 fff3 	bl	8006a30 <pvPortMalloc>
 8004a4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
 8004a58:	e005      	b.n	8004a66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	f002 f8b4 	bl	8006bc8 <vPortFree>
 8004a60:	e001      	b.n	8004a66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d017      	beq.n	8004a9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a74:	88fa      	ldrh	r2, [r7, #6]
 8004a76:	2300      	movs	r3, #0
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	9302      	str	r3, [sp, #8]
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f80e 	bl	8004aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a90:	69f8      	ldr	r0, [r7, #28]
 8004a92:	f000 f8b1 	bl	8004bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a96:	2301      	movs	r3, #1
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e002      	b.n	8004aa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	21a5      	movs	r1, #165	; 0xa5
 8004ac6:	f002 face 	bl	8007066 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	617b      	str	r3, [r7, #20]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01f      	beq.n	8004b4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e012      	b.n	8004b36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	7819      	ldrb	r1, [r3, #0]
 8004b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3334      	adds	r3, #52	; 0x34
 8004b20:	460a      	mov	r2, r1
 8004b22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d006      	beq.n	8004b3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	3301      	adds	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d9e9      	bls.n	8004b10 <prvInitialiseNewTask+0x64>
 8004b3c:	e000      	b.n	8004b40 <prvInitialiseNewTask+0x94>
			{
				break;
 8004b3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b48:	e003      	b.n	8004b52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	2b37      	cmp	r3, #55	; 0x37
 8004b56:	d901      	bls.n	8004b5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b58:	2337      	movs	r3, #55	; 0x37
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f8be 	bl	8003cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff f8b9 	bl	8003cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	3354      	adds	r3, #84	; 0x54
 8004bac:	2260      	movs	r2, #96	; 0x60
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 fa58 	bl	8007066 <memset>
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <prvInitialiseNewTask+0x140>)
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <prvInitialiseNewTask+0x144>)
 8004bc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <prvInitialiseNewTask+0x148>)
 8004bc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	69b8      	ldr	r0, [r7, #24]
 8004bce:	f001 fbfd 	bl	80063cc <pxPortInitialiseStack>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be4:	bf00      	nop
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	0800a280 	.word	0x0800a280
 8004bf0:	0800a2a0 	.word	0x0800a2a0
 8004bf4:	0800a260 	.word	0x0800a260

08004bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c00:	f001 fd10 	bl	8006624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <prvAddNewTaskToReadyList+0xc4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	; (8004cbc <prvAddNewTaskToReadyList+0xc4>)
 8004c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c16:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c1c:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <prvAddNewTaskToReadyList+0xc4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d110      	bne.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c24:	f000 fcde 	bl	80055e4 <prvInitialiseTaskLists>
 8004c28:	e00d      	b.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c2a:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <prvAddNewTaskToReadyList+0xcc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c32:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d802      	bhi.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c46:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <prvAddNewTaskToReadyList+0xd0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <prvAddNewTaskToReadyList+0xd0>)
 8004c4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <prvAddNewTaskToReadyList+0xd0>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <prvAddNewTaskToReadyList+0xd4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <prvAddNewTaskToReadyList+0x74>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <prvAddNewTaskToReadyList+0xd4>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <prvAddNewTaskToReadyList+0xd8>)
 8004c7a:	441a      	add	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7ff f843 	bl	8003d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c88:	f001 fcfc 	bl	8006684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <prvAddNewTaskToReadyList+0xcc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d207      	bcs.n	8004cb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <prvAddNewTaskToReadyList+0xdc>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000f34 	.word	0x20000f34
 8004cc0:	20000a60 	.word	0x20000a60
 8004cc4:	20000f40 	.word	0x20000f40
 8004cc8:	20000f50 	.word	0x20000f50
 8004ccc:	20000f3c 	.word	0x20000f3c
 8004cd0:	20000a64 	.word	0x20000a64
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <vTaskDelay+0x60>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <vTaskDelay+0x30>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d08:	f000 f88a 	bl	8004e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ffba 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d14:	f000 f8ca 	bl	8004eac <xTaskResumeAll>
 8004d18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d107      	bne.n	8004d30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <vTaskDelay+0x64>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000f5c 	.word	0x20000f5c
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d4e:	463a      	mov	r2, r7
 8004d50:	1d39      	adds	r1, r7, #4
 8004d52:	f107 0308 	add.w	r3, r7, #8
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe ff78 	bl	8003c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	9202      	str	r2, [sp, #8]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	4924      	ldr	r1, [pc, #144]	; (8004e00 <vTaskStartScheduler+0xc0>)
 8004d70:	4824      	ldr	r0, [pc, #144]	; (8004e04 <vTaskStartScheduler+0xc4>)
 8004d72:	f7ff fdf9 	bl	8004968 <xTaskCreateStatic>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <vTaskStartScheduler+0xc8>)
 8004d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d7c:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <vTaskStartScheduler+0xc8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d84:	2301      	movs	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e001      	b.n	8004d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d102      	bne.n	8004d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d94:	f000 ffcc 	bl	8005d30 <xTimerCreateTimerTask>
 8004d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d11b      	bne.n	8004dd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
}
 8004db2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <vTaskStartScheduler+0xcc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3354      	adds	r3, #84	; 0x54
 8004dba:	4a15      	ldr	r2, [pc, #84]	; (8004e10 <vTaskStartScheduler+0xd0>)
 8004dbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <vTaskStartScheduler+0xd4>)
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <vTaskStartScheduler+0xd8>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <vTaskStartScheduler+0xdc>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dd2:	f001 fb85 	bl	80064e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dd6:	e00e      	b.n	8004df6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d10a      	bne.n	8004df6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <vTaskStartScheduler+0xb4>
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	0800a1ac 	.word	0x0800a1ac
 8004e04:	08005509 	.word	0x08005509
 8004e08:	20000f58 	.word	0x20000f58
 8004e0c:	20000a60 	.word	0x20000a60
 8004e10:	20000010 	.word	0x20000010
 8004e14:	20000f54 	.word	0x20000f54
 8004e18:	20000f40 	.word	0x20000f40
 8004e1c:	20000f38 	.word	0x20000f38

08004e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <vTaskSuspendAll+0x18>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <vTaskSuspendAll+0x18>)
 8004e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	20000f5c 	.word	0x20000f5c

08004e3c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <prvGetExpectedIdleTime+0x5c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <prvGetExpectedIdleTime+0x60>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	607b      	str	r3, [r7, #4]
 8004e60:	e012      	b.n	8004e88 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <prvGetExpectedIdleTime+0x64>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d902      	bls.n	8004e70 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	e00b      	b.n	8004e88 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e005      	b.n	8004e88 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <prvGetExpectedIdleTime+0x68>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <prvGetExpectedIdleTime+0x6c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8004e88:	687b      	ldr	r3, [r7, #4]
	}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000f3c 	.word	0x20000f3c
 8004e9c:	20000a60 	.word	0x20000a60
 8004ea0:	20000a64 	.word	0x20000a64
 8004ea4:	20000f54 	.word	0x20000f54
 8004ea8:	20000f38 	.word	0x20000f38

08004eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eba:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	603b      	str	r3, [r7, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ed8:	f001 fba4 	bl	8006624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004edc:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	4a38      	ldr	r2, [pc, #224]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ee4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee6:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d162      	bne.n	8004fb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <xTaskResumeAll+0x11c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d05e      	beq.n	8004fb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef6:	e02f      	b.n	8004f58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef8:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <xTaskResumeAll+0x120>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3318      	adds	r3, #24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ff5f 	bl	8003dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe ff5a 	bl	8003dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <xTaskResumeAll+0x124>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d903      	bls.n	8004f28 <xTaskResumeAll+0x7c>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <xTaskResumeAll+0x124>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <xTaskResumeAll+0x128>)
 8004f36:	441a      	add	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7fe fee5 	bl	8003d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <xTaskResumeAll+0x12c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f58:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <xTaskResumeAll+0x120>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1cb      	bne.n	8004ef8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f66:	f000 fbdf 	bl	8005728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <xTaskResumeAll+0x134>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f76:	f000 f86f 	bl	8005058 <xTaskIncrementTick>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f1      	bne.n	8004f76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <xTaskResumeAll+0x134>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <xTaskResumeAll+0x138>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb4:	f001 fb66 	bl	8006684 <vPortExitCritical>

	return xAlreadyYielded;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000f5c 	.word	0x20000f5c
 8004fc8:	20000f34 	.word	0x20000f34
 8004fcc:	20000ef4 	.word	0x20000ef4
 8004fd0:	20000f3c 	.word	0x20000f3c
 8004fd4:	20000a64 	.word	0x20000a64
 8004fd8:	20000a60 	.word	0x20000a60
 8004fdc:	20000f48 	.word	0x20000f48
 8004fe0:	20000f44 	.word	0x20000f44
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <xTaskGetTickCount+0x1c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ff4:	687b      	ldr	r3, [r7, #4]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000f38 	.word	0x20000f38

08005008 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <vTaskStepTick+0x48>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	441a      	add	r2, r3
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <vTaskStepTick+0x4c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d90a      	bls.n	8005036 <vTaskStepTick+0x2e>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <vTaskStepTick+0x48>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	4a04      	ldr	r2, [pc, #16]	; (8005050 <vTaskStepTick+0x48>)
 8005040:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000f38 	.word	0x20000f38
 8005054:	20000f54 	.word	0x20000f54

08005058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005062:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <xTaskIncrementTick+0x148>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f040 808f 	bne.w	800518a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800506c:	4b4d      	ldr	r3, [pc, #308]	; (80051a4 <xTaskIncrementTick+0x14c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005074:	4a4b      	ldr	r2, [pc, #300]	; (80051a4 <xTaskIncrementTick+0x14c>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d120      	bne.n	80050c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <xTaskIncrementTick+0x150>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	603b      	str	r3, [r7, #0]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <xTaskIncrementTick+0x46>
 80050a0:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <xTaskIncrementTick+0x154>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <xTaskIncrementTick+0x154>)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b3e      	ldr	r3, [pc, #248]	; (80051b0 <xTaskIncrementTick+0x158>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <xTaskIncrementTick+0x158>)
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	f000 fb33 	bl	8005728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050c2:	4b3c      	ldr	r3, [pc, #240]	; (80051b4 <xTaskIncrementTick+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d349      	bcc.n	8005160 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d6:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <xTaskIncrementTick+0x15c>)
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
 80050dc:	601a      	str	r2, [r3, #0]
					break;
 80050de:	e03f      	b.n	8005160 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d203      	bcs.n	8005100 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050f8:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <xTaskIncrementTick+0x15c>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050fe:	e02f      	b.n	8005160 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fe5f 	bl	8003dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3318      	adds	r3, #24
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fe56 	bl	8003dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4b25      	ldr	r3, [pc, #148]	; (80051b8 <xTaskIncrementTick+0x160>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d903      	bls.n	8005130 <xTaskIncrementTick+0xd8>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <xTaskIncrementTick+0x160>)
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <xTaskIncrementTick+0x164>)
 800513e:	441a      	add	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f7fe fde1 	bl	8003d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <xTaskIncrementTick+0x168>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	429a      	cmp	r2, r3
 8005158:	d3b8      	bcc.n	80050cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800515a:	2301      	movs	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800515e:	e7b5      	b.n	80050cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <xTaskIncrementTick+0x168>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4915      	ldr	r1, [pc, #84]	; (80051bc <xTaskIncrementTick+0x164>)
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d901      	bls.n	800517c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <xTaskIncrementTick+0x16c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e004      	b.n	8005194 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xTaskIncrementTick+0x170>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	4a0d      	ldr	r2, [pc, #52]	; (80051c8 <xTaskIncrementTick+0x170>)
 8005192:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005194:	697b      	ldr	r3, [r7, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000f5c 	.word	0x20000f5c
 80051a4:	20000f38 	.word	0x20000f38
 80051a8:	20000eec 	.word	0x20000eec
 80051ac:	20000ef0 	.word	0x20000ef0
 80051b0:	20000f4c 	.word	0x20000f4c
 80051b4:	20000f54 	.word	0x20000f54
 80051b8:	20000f3c 	.word	0x20000f3c
 80051bc:	20000a64 	.word	0x20000a64
 80051c0:	20000a60 	.word	0x20000a60
 80051c4:	20000f48 	.word	0x20000f48
 80051c8:	20000f44 	.word	0x20000f44

080051cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <vTaskSwitchContext+0xb0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051da:	4b29      	ldr	r3, [pc, #164]	; (8005280 <vTaskSwitchContext+0xb4>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051e0:	e046      	b.n	8005270 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051e2:	4b27      	ldr	r3, [pc, #156]	; (8005280 <vTaskSwitchContext+0xb4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e8:	4b26      	ldr	r3, [pc, #152]	; (8005284 <vTaskSwitchContext+0xb8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e010      	b.n	8005212 <vTaskSwitchContext+0x46>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <vTaskSwitchContext+0x40>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	607b      	str	r3, [r7, #4]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <vTaskSwitchContext+0x3e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b01      	subs	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	491d      	ldr	r1, [pc, #116]	; (8005288 <vTaskSwitchContext+0xbc>)
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0e4      	beq.n	80051f0 <vTaskSwitchContext+0x24>
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4a15      	ldr	r2, [pc, #84]	; (8005288 <vTaskSwitchContext+0xbc>)
 8005232:	4413      	add	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3308      	adds	r3, #8
 8005248:	429a      	cmp	r2, r3
 800524a:	d104      	bne.n	8005256 <vTaskSwitchContext+0x8a>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <vTaskSwitchContext+0xc0>)
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <vTaskSwitchContext+0xb8>)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <vTaskSwitchContext+0xc0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3354      	adds	r3, #84	; 0x54
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <vTaskSwitchContext+0xc4>)
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000f5c 	.word	0x20000f5c
 8005280:	20000f48 	.word	0x20000f48
 8005284:	20000f3c 	.word	0x20000f3c
 8005288:	20000a64 	.word	0x20000a64
 800528c:	20000a60 	.word	0x20000a60
 8005290:	20000010 	.word	0x20000010

08005294 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60fb      	str	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <vTaskPlaceOnEventList+0x44>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3318      	adds	r3, #24
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fe fd47 	bl	8003d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052c8:	2101      	movs	r1, #1
 80052ca:	6838      	ldr	r0, [r7, #0]
 80052cc:	f000 fcdc 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000a60 	.word	0x20000a60

080052dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	617b      	str	r3, [r7, #20]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <vTaskPlaceOnEventListRestricted+0x54>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3318      	adds	r3, #24
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7fe fcfe 	bl	8003d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	68b8      	ldr	r0, [r7, #8]
 8005322:	f000 fcb1 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
	}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000a60 	.word	0x20000a60

08005334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	60fb      	str	r3, [r7, #12]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3318      	adds	r3, #24
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fd2f 	bl	8003dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <xTaskRemoveFromEventList+0xb4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11f      	bne.n	80053b2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fd26 	bl	8003dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <xTaskRemoveFromEventList+0xb8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d903      	bls.n	8005390 <xTaskRemoveFromEventList+0x5c>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a17      	ldr	r2, [pc, #92]	; (80053ec <xTaskRemoveFromEventList+0xb8>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <xTaskRemoveFromEventList+0xbc>)
 800539e:	441a      	add	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fe fcb1 	bl	8003d0e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80053ac:	f000 f9bc 	bl	8005728 <prvResetNextTaskUnblockTime>
 80053b0:	e005      	b.n	80053be <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3318      	adds	r3, #24
 80053b6:	4619      	mov	r1, r3
 80053b8:	480e      	ldr	r0, [pc, #56]	; (80053f4 <xTaskRemoveFromEventList+0xc0>)
 80053ba:	f7fe fca8 	bl	8003d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <xTaskRemoveFromEventList+0xc4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d905      	bls.n	80053d8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <xTaskRemoveFromEventList+0xc8>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e001      	b.n	80053dc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000f5c 	.word	0x20000f5c
 80053ec:	20000f3c 	.word	0x20000f3c
 80053f0:	20000a64 	.word	0x20000a64
 80053f4:	20000ef4 	.word	0x20000ef4
 80053f8:	20000a60 	.word	0x20000a60
 80053fc:	20000f48 	.word	0x20000f48

08005400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <vTaskInternalSetTimeOutState+0x24>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <vTaskInternalSetTimeOutState+0x28>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	20000f4c 	.word	0x20000f4c
 8005428:	20000f38 	.word	0x20000f38

0800542c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	613b      	str	r3, [r7, #16]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	60fb      	str	r3, [r7, #12]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800546e:	f001 f8d9 	bl	8006624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <xTaskCheckForTimeOut+0xbc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d102      	bne.n	8005492 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e023      	b.n	80054da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <xTaskCheckForTimeOut+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d007      	beq.n	80054ae <xTaskCheckForTimeOut+0x82>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e015      	b.n	80054da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d20b      	bcs.n	80054d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff9b 	bl	8005400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e004      	b.n	80054da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054da:	f001 f8d3 	bl	8006684 <vPortExitCritical>

	return xReturn;
 80054de:	69fb      	ldr	r3, [r7, #28]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000f38 	.word	0x20000f38
 80054ec:	20000f4c 	.word	0x20000f4c

080054f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <vTaskMissedYield+0x14>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000f48 	.word	0x20000f48

08005508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005510:	f000 f8a8 	bl	8005664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005514:	4b18      	ldr	r3, [pc, #96]	; (8005578 <prvIdleTask+0x70>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d907      	bls.n	800552c <prvIdleTask+0x24>
			{
				taskYIELD();
 800551c:	4b17      	ldr	r3, [pc, #92]	; (800557c <prvIdleTask+0x74>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800552c:	f7ff fc86 	bl	8004e3c <prvGetExpectedIdleTime>
 8005530:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d9eb      	bls.n	8005510 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005538:	f7ff fc72 	bl	8004e20 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <prvIdleTask+0x78>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <prvIdleTask+0x7c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d20a      	bcs.n	800555e <prvIdleTask+0x56>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	60bb      	str	r3, [r7, #8]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800555e:	f7ff fc6d 	bl	8004e3c <prvGetExpectedIdleTime>
 8005562:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d902      	bls.n	8005570 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f001 f90e 	bl	800678c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8005570:	f7ff fc9c 	bl	8004eac <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8005574:	e7cc      	b.n	8005510 <prvIdleTask+0x8>
 8005576:	bf00      	nop
 8005578:	20000a64 	.word	0x20000a64
 800557c:	e000ed04 	.word	0xe000ed04
 8005580:	20000f54 	.word	0x20000f54
 8005584:	20000f38 	.word	0x20000f38

08005588 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8005592:	2301      	movs	r3, #1
 8005594:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <eTaskConfirmSleepModeStatus+0x4c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800559e:	2300      	movs	r3, #0
 80055a0:	71fb      	strb	r3, [r7, #7]
 80055a2:	e010      	b.n	80055c6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <eTaskConfirmSleepModeStatus+0x50>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80055ac:	2300      	movs	r3, #0
 80055ae:	71fb      	strb	r3, [r7, #7]
 80055b0:	e009      	b.n	80055c6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <eTaskConfirmSleepModeStatus+0x54>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <eTaskConfirmSleepModeStatus+0x58>)
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	429a      	cmp	r2, r3
 80055c0:	d101      	bne.n	80055c6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80055c2:	2302      	movs	r3, #2
 80055c4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80055c6:	79fb      	ldrb	r3, [r7, #7]
	}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20000ef4 	.word	0x20000ef4
 80055d8:	20000f48 	.word	0x20000f48
 80055dc:	20000f20 	.word	0x20000f20
 80055e0:	20000f34 	.word	0x20000f34

080055e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	e00c      	b.n	800560a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4a12      	ldr	r2, [pc, #72]	; (8005644 <prvInitialiseTaskLists+0x60>)
 80055fc:	4413      	add	r3, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fb58 	bl	8003cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3301      	adds	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b37      	cmp	r3, #55	; 0x37
 800560e:	d9ef      	bls.n	80055f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005610:	480d      	ldr	r0, [pc, #52]	; (8005648 <prvInitialiseTaskLists+0x64>)
 8005612:	f7fe fb4f 	bl	8003cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005616:	480d      	ldr	r0, [pc, #52]	; (800564c <prvInitialiseTaskLists+0x68>)
 8005618:	f7fe fb4c 	bl	8003cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800561c:	480c      	ldr	r0, [pc, #48]	; (8005650 <prvInitialiseTaskLists+0x6c>)
 800561e:	f7fe fb49 	bl	8003cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005622:	480c      	ldr	r0, [pc, #48]	; (8005654 <prvInitialiseTaskLists+0x70>)
 8005624:	f7fe fb46 	bl	8003cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005628:	480b      	ldr	r0, [pc, #44]	; (8005658 <prvInitialiseTaskLists+0x74>)
 800562a:	f7fe fb43 	bl	8003cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <prvInitialiseTaskLists+0x78>)
 8005630:	4a05      	ldr	r2, [pc, #20]	; (8005648 <prvInitialiseTaskLists+0x64>)
 8005632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <prvInitialiseTaskLists+0x7c>)
 8005636:	4a05      	ldr	r2, [pc, #20]	; (800564c <prvInitialiseTaskLists+0x68>)
 8005638:	601a      	str	r2, [r3, #0]
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000a64 	.word	0x20000a64
 8005648:	20000ec4 	.word	0x20000ec4
 800564c:	20000ed8 	.word	0x20000ed8
 8005650:	20000ef4 	.word	0x20000ef4
 8005654:	20000f08 	.word	0x20000f08
 8005658:	20000f20 	.word	0x20000f20
 800565c:	20000eec 	.word	0x20000eec
 8005660:	20000ef0 	.word	0x20000ef0

08005664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800566a:	e019      	b.n	80056a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800566c:	f000 ffda 	bl	8006624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005670:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <prvCheckTasksWaitingTermination+0x50>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fba3 	bl	8003dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <prvCheckTasksWaitingTermination+0x54>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3b01      	subs	r3, #1
 8005688:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <prvCheckTasksWaitingTermination+0x54>)
 800568a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <prvCheckTasksWaitingTermination+0x58>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3b01      	subs	r3, #1
 8005692:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <prvCheckTasksWaitingTermination+0x58>)
 8005694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005696:	f000 fff5 	bl	8006684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f810 	bl	80056c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <prvCheckTasksWaitingTermination+0x58>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e1      	bne.n	800566c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000f08 	.word	0x20000f08
 80056b8:	20000f34 	.word	0x20000f34
 80056bc:	20000f1c 	.word	0x20000f1c

080056c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3354      	adds	r3, #84	; 0x54
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 f9df 	bl	8007a90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d108      	bne.n	80056ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fa71 	bl	8006bc8 <vPortFree>
				vPortFree( pxTCB );
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f001 fa6e 	bl	8006bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056ec:	e018      	b.n	8005720 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d103      	bne.n	8005700 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fa65 	bl	8006bc8 <vPortFree>
	}
 80056fe:	e00f      	b.n	8005720 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005706:	2b02      	cmp	r3, #2
 8005708:	d00a      	beq.n	8005720 <prvDeleteTCB+0x60>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60fb      	str	r3, [r7, #12]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <prvDeleteTCB+0x5e>
	}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <prvResetNextTaskUnblockTime+0x38>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <prvResetNextTaskUnblockTime+0x3c>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005740:	e008      	b.n	8005754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <prvResetNextTaskUnblockTime+0x38>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <prvResetNextTaskUnblockTime+0x3c>)
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000eec 	.word	0x20000eec
 8005764:	20000f54 	.word	0x20000f54

08005768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <xTaskGetSchedulerState+0x34>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005776:	2301      	movs	r3, #1
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	e008      	b.n	800578e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577c:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <xTaskGetSchedulerState+0x38>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005784:	2302      	movs	r3, #2
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	e001      	b.n	800578e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800578e:	687b      	ldr	r3, [r7, #4]
	}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000f40 	.word	0x20000f40
 80057a0:	20000f5c 	.word	0x20000f5c

080057a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d056      	beq.n	8005868 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ba:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <xTaskPriorityDisinherit+0xd0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d00a      	beq.n	80057da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	60fb      	str	r3, [r7, #12]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60bb      	str	r3, [r7, #8]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580a:	429a      	cmp	r2, r3
 800580c:	d02c      	beq.n	8005868 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005812:	2b00      	cmp	r3, #0
 8005814:	d128      	bne.n	8005868 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fad4 	bl	8003dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <xTaskPriorityDisinherit+0xd4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d903      	bls.n	8005848 <xTaskPriorityDisinherit+0xa4>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <xTaskPriorityDisinherit+0xd4>)
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <xTaskPriorityDisinherit+0xd8>)
 8005856:	441a      	add	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	3304      	adds	r3, #4
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f7fe fa55 	bl	8003d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005868:	697b      	ldr	r3, [r7, #20]
	}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000a60 	.word	0x20000a60
 8005878:	20000f3c 	.word	0x20000f3c
 800587c:	20000a64 	.word	0x20000a64

08005880 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800588e:	f000 fec9 	bl	8006624 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005892:	4b29      	ldr	r3, [pc, #164]	; (8005938 <xTaskNotifyWait+0xb8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d01c      	beq.n	80058da <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <xTaskNotifyWait+0xb8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	43d2      	mvns	r2, r2
 80058ac:	400a      	ands	r2, r1
 80058ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80058b2:	4b21      	ldr	r3, [pc, #132]	; (8005938 <xTaskNotifyWait+0xb8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c2:	2101      	movs	r1, #1
 80058c4:	6838      	ldr	r0, [r7, #0]
 80058c6:	f000 f9df 	bl	8005c88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <xTaskNotifyWait+0xbc>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80058da:	f000 fed3 	bl	8006684 <vPortExitCritical>

		taskENTER_CRITICAL();
 80058de:	f000 fea1 	bl	8006624 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80058e8:	4b13      	ldr	r3, [pc, #76]	; (8005938 <xTaskNotifyWait+0xb8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80058f4:	4b10      	ldr	r3, [pc, #64]	; (8005938 <xTaskNotifyWait+0xb8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d002      	beq.n	8005908 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e00a      	b.n	800591e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <xTaskNotifyWait+0xb8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	43d2      	mvns	r2, r2
 8005914:	400a      	ands	r2, r1
 8005916:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800591a:	2301      	movs	r3, #1
 800591c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <xTaskNotifyWait+0xb8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8005928:	f000 feac 	bl	8006684 <vPortExitCritical>

		return xReturn;
 800592c:	697b      	ldr	r3, [r7, #20]
	}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000a60 	.word	0x20000a60
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <xTaskGenericNotify+0x30>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61bb      	str	r3, [r7, #24]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005974:	f000 fe56 	bl	8006624 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800598e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d82d      	bhi.n	80059fa <xTaskGenericNotify+0xba>
 800599e:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <xTaskGenericNotify+0x64>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	08005a1d 	.word	0x08005a1d
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059cb 	.word	0x080059cb
 80059b0:	080059db 	.word	0x080059db
 80059b4:	080059e5 	.word	0x080059e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80059c8:	e02b      	b.n	8005a22 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80059d8:	e023      	b.n	8005a22 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80059e2:	e01e      	b.n	8005a22 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059e4:	7ffb      	ldrb	r3, [r7, #31]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d004      	beq.n	80059f4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80059f2:	e016      	b.n	8005a22 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80059f8:	e013      	b.n	8005a22 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d00c      	beq.n	8005a20 <xTaskGenericNotify+0xe0>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	617b      	str	r3, [r7, #20]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xTaskGenericNotify+0xda>
					break;
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <xTaskGenericNotify+0xe2>

					break;
 8005a20:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a22:	7ffb      	ldrb	r3, [r7, #31]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d13c      	bne.n	8005aa2 <xTaskGenericNotify+0x162>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe f9cb 	bl	8003dc8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <xTaskGenericNotify+0x170>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d903      	bls.n	8005a46 <xTaskGenericNotify+0x106>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <xTaskGenericNotify+0x170>)
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <xTaskGenericNotify+0x174>)
 8005a54:	441a      	add	r2, r3
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7fe f956 	bl	8003d0e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <xTaskGenericNotify+0x140>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	613b      	str	r3, [r7, #16]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <xTaskGenericNotify+0x13e>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8005a80:	f7ff fe52 	bl	8005728 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <xTaskGenericNotify+0x178>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d907      	bls.n	8005aa2 <xTaskGenericNotify+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a92:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <xTaskGenericNotify+0x17c>)
 8005a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005aa2:	f000 fdef 	bl	8006684 <vPortExitCritical>

		return xReturn;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3728      	adds	r7, #40	; 0x28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000f3c 	.word	0x20000f3c
 8005ab4:	20000a64 	.word	0x20000a64
 8005ab8:	20000a60 	.word	0x20000a60
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08e      	sub	sp, #56	; 0x38
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005af0:	f000 ff5e 	bl	80069b0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005af8:	f3ef 8211 	mrs	r2, BASEPRI
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	623a      	str	r2, [r7, #32]
 8005b0e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005b10:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2202      	movs	r2, #2
 8005b32:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d82f      	bhi.n	8005b9c <xTaskGenericNotifyFromISR+0xdc>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <xTaskGenericNotifyFromISR+0x84>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005bbf 	.word	0x08005bbf
 8005b48:	08005b59 	.word	0x08005b59
 8005b4c:	08005b6b 	.word	0x08005b6b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b85 	.word	0x08005b85
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005b68:	e02c      	b.n	8005bc4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005b78:	e024      	b.n	8005bc4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005b82:	e01f      	b.n	8005bc4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d004      	beq.n	8005b96 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005b94:	e016      	b.n	8005bc4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005b9a:	e013      	b.n	8005bc4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d00c      	beq.n	8005bc2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	61bb      	str	r3, [r7, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8005bc2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d146      	bne.n	8005c5a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	617b      	str	r3, [r7, #20]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bea:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <xTaskGenericNotifyFromISR+0x1b0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d11d      	bne.n	8005c2e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe f8e6 	bl	8003dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xTaskGenericNotifyFromISR+0x1b4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d903      	bls.n	8005c10 <xTaskGenericNotifyFromISR+0x150>
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <xTaskGenericNotifyFromISR+0x1b4>)
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <xTaskGenericNotifyFromISR+0x1b8>)
 8005c1e:	441a      	add	r2, r3
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f7fe f871 	bl	8003d0e <vListInsertEnd>
 8005c2c:	e005      	b.n	8005c3a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	3318      	adds	r3, #24
 8005c32:	4619      	mov	r1, r3
 8005c34:	4811      	ldr	r0, [pc, #68]	; (8005c7c <xTaskGenericNotifyFromISR+0x1bc>)
 8005c36:	f7fe f86a 	bl	8003d0e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <xTaskGenericNotifyFromISR+0x1c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d908      	bls.n	8005c5a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <xTaskGenericNotifyFromISR+0x1c4>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f383 8811 	msr	BASEPRI, r3
}
 8005c64:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3738      	adds	r7, #56	; 0x38
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000f5c 	.word	0x20000f5c
 8005c74:	20000f3c 	.word	0x20000f3c
 8005c78:	20000a64 	.word	0x20000a64
 8005c7c:	20000ef4 	.word	0x20000ef4
 8005c80:	20000a60 	.word	0x20000a60
 8005c84:	20000f48 	.word	0x20000f48

08005c88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c98:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe f892 	bl	8003dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d10a      	bne.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4819      	ldr	r0, [pc, #100]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cbc:	f7fe f827 	bl	8003d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cc0:	e026      	b.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d209      	bcs.n	8005cee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7fe f835 	bl	8003d56 <vListInsert>
}
 8005cec:	e010      	b.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cee:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fe f82b 	bl	8003d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d202      	bcs.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000f38 	.word	0x20000f38
 8005d1c:	20000a60 	.word	0x20000a60
 8005d20:	20000f20 	.word	0x20000f20
 8005d24:	20000ef0 	.word	0x20000ef0
 8005d28:	20000eec 	.word	0x20000eec
 8005d2c:	20000f54 	.word	0x20000f54

08005d30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d3a:	f000 fb07 	bl	800634c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <xTimerCreateTimerTask+0x80>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d021      	beq.n	8005d8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d4e:	1d3a      	adds	r2, r7, #4
 8005d50:	f107 0108 	add.w	r1, r7, #8
 8005d54:	f107 030c 	add.w	r3, r7, #12
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fd ff91 	bl	8003c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	9202      	str	r2, [sp, #8]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	2302      	movs	r3, #2
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	460a      	mov	r2, r1
 8005d70:	4910      	ldr	r1, [pc, #64]	; (8005db4 <xTimerCreateTimerTask+0x84>)
 8005d72:	4811      	ldr	r0, [pc, #68]	; (8005db8 <xTimerCreateTimerTask+0x88>)
 8005d74:	f7fe fdf8 	bl	8004968 <xTaskCreateStatic>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <xTimerCreateTimerTask+0x8c>)
 8005d7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <xTimerCreateTimerTask+0x8c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d86:	2301      	movs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	613b      	str	r3, [r7, #16]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005da6:	697b      	ldr	r3, [r7, #20]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000f90 	.word	0x20000f90
 8005db4:	0800a1b4 	.word	0x0800a1b4
 8005db8:	08005ef5 	.word	0x08005ef5
 8005dbc:	20000f94 	.word	0x20000f94

08005dc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xTimerGenericCommand+0x2e>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	623b      	str	r3, [r7, #32]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005dee:	4b1a      	ldr	r3, [pc, #104]	; (8005e58 <xTimerGenericCommand+0x98>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d02a      	beq.n	8005e4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b05      	cmp	r3, #5
 8005e06:	dc18      	bgt.n	8005e3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e08:	f7ff fcae 	bl	8005768 <xTaskGetSchedulerState>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d109      	bne.n	8005e26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <xTimerGenericCommand+0x98>)
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f107 0110 	add.w	r1, r7, #16
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1e:	f7fe f93b 	bl	8004098 <xQueueGenericSend>
 8005e22:	6278      	str	r0, [r7, #36]	; 0x24
 8005e24:	e012      	b.n	8005e4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <xTimerGenericCommand+0x98>)
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f107 0110 	add.w	r1, r7, #16
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	f7fe f931 	bl	8004098 <xQueueGenericSend>
 8005e36:	6278      	str	r0, [r7, #36]	; 0x24
 8005e38:	e008      	b.n	8005e4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <xTimerGenericCommand+0x98>)
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f107 0110 	add.w	r1, r7, #16
 8005e42:	2300      	movs	r3, #0
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	f7fe fa25 	bl	8004294 <xQueueGenericSendFromISR>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3728      	adds	r7, #40	; 0x28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000f90 	.word	0x20000f90

08005e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e66:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <prvProcessExpiredTimer+0x94>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd ffa7 	bl	8003dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d022      	beq.n	8005ece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	18d1      	adds	r1, r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	6978      	ldr	r0, [r7, #20]
 8005e96:	f000 f8d1 	bl	800603c <prvInsertTimerInActiveList>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01f      	beq.n	8005ee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	6978      	ldr	r0, [r7, #20]
 8005eac:	f7ff ff88 	bl	8005dc0 <xTimerGenericCommand>
 8005eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d113      	bne.n	8005ee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	4798      	blx	r3
}
 8005ee8:	bf00      	nop
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000f88 	.word	0x20000f88

08005ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005efc:	f107 0308 	add.w	r3, r7, #8
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f857 	bl	8005fb4 <prvGetNextExpireTime>
 8005f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f803 	bl	8005f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f12:	f000 f8d5 	bl	80060c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f16:	e7f1      	b.n	8005efc <prvTimerTask+0x8>

08005f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f22:	f7fe ff7d 	bl	8004e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f866 	bl	8005ffc <prvSampleTimeNow>
 8005f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d130      	bne.n	8005f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <prvProcessTimerOrBlockTask+0x3c>
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d806      	bhi.n	8005f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f46:	f7fe ffb1 	bl	8004eac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ff85 	bl	8005e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f52:	e024      	b.n	8005f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f5a:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <prvProcessTimerOrBlockTask+0x90>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <prvProcessTimerOrBlockTask+0x50>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <prvProcessTimerOrBlockTask+0x52>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <prvProcessTimerOrBlockTask+0x94>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f7fe fcc1 	bl	8004900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f7e:	f7fe ff95 	bl	8004eac <xTaskResumeAll>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <prvProcessTimerOrBlockTask+0x98>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
}
 8005f98:	e001      	b.n	8005f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f9a:	f7fe ff87 	bl	8004eac <xTaskResumeAll>
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000f8c 	.word	0x20000f8c
 8005fac:	20000f90 	.word	0x20000f90
 8005fb0:	e000ed04 	.word	0xe000ed04

08005fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <prvGetNextExpireTime+0x44>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <prvGetNextExpireTime+0x16>
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	e000      	b.n	8005fcc <prvGetNextExpireTime+0x18>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <prvGetNextExpireTime+0x44>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e001      	b.n	8005fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000f88 	.word	0x20000f88

08005ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006004:	f7fe fff0 	bl	8004fe8 <xTaskGetTickCount>
 8006008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <prvSampleTimeNow+0x3c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	429a      	cmp	r2, r3
 8006012:	d205      	bcs.n	8006020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006014:	f000 f936 	bl	8006284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e002      	b.n	8006026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006026:	4a04      	ldr	r2, [pc, #16]	; (8006038 <prvSampleTimeNow+0x3c>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800602c:	68fb      	ldr	r3, [r7, #12]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000f98 	.word	0x20000f98

0800603c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d812      	bhi.n	8006088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	429a      	cmp	r2, r3
 800606e:	d302      	bcc.n	8006076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e01b      	b.n	80060ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006076:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <prvInsertTimerInActiveList+0x7c>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7fd fe68 	bl	8003d56 <vListInsert>
 8006086:	e012      	b.n	80060ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d206      	bcs.n	800609e <prvInsertTimerInActiveList+0x62>
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e007      	b.n	80060ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <prvInsertTimerInActiveList+0x80>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fd fe54 	bl	8003d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060ae:	697b      	ldr	r3, [r7, #20]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000f8c 	.word	0x20000f8c
 80060bc:	20000f88 	.word	0x20000f88

080060c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060c6:	e0ca      	b.n	800625e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da18      	bge.n	8006100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	3304      	adds	r3, #4
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61fb      	str	r3, [r7, #28]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	6850      	ldr	r0, [r2, #4]
 80060f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fa:	6892      	ldr	r2, [r2, #8]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f2c0 80aa 	blt.w	800625c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fd fe55 	bl	8003dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800611e:	463b      	mov	r3, r7
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff6b 	bl	8005ffc <prvSampleTimeNow>
 8006126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b09      	cmp	r3, #9
 800612c:	f200 8097 	bhi.w	800625e <prvProcessReceivedCommands+0x19e>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <prvProcessReceivedCommands+0x78>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	08006161 	.word	0x08006161
 800613c:	08006161 	.word	0x08006161
 8006140:	08006161 	.word	0x08006161
 8006144:	080061d5 	.word	0x080061d5
 8006148:	080061e9 	.word	0x080061e9
 800614c:	08006233 	.word	0x08006233
 8006150:	08006161 	.word	0x08006161
 8006154:	08006161 	.word	0x08006161
 8006158:	080061d5 	.word	0x080061d5
 800615c:	080061e9 	.word	0x080061e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	18d1      	adds	r1, r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006180:	f7ff ff5c 	bl	800603c <prvInsertTimerInActiveList>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d069      	beq.n	800625e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d05e      	beq.n	800625e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	441a      	add	r2, r3
 80061a8:	2300      	movs	r3, #0
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	2300      	movs	r3, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b2:	f7ff fe05 	bl	8005dc0 <xTimerGenericCommand>
 80061b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d14f      	bne.n	800625e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	61bb      	str	r3, [r7, #24]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061e6:	e03a      	b.n	800625e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	617b      	str	r3, [r7, #20]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	18d1      	adds	r1, r2, r3
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f7ff ff06 	bl	800603c <prvInsertTimerInActiveList>
					break;
 8006230:	e015      	b.n	800625e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006242:	f000 fcc1 	bl	8006bc8 <vPortFree>
 8006246:	e00a      	b.n	800625e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800625a:	e000      	b.n	800625e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800625c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <prvProcessReceivedCommands+0x1c0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	1d39      	adds	r1, r7, #4
 8006264:	2200      	movs	r2, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f8b0 	bl	80043cc <xQueueReceive>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	f47f af2a 	bne.w	80060c8 <prvProcessReceivedCommands+0x8>
	}
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3730      	adds	r7, #48	; 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000f90 	.word	0x20000f90

08006284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800628a:	e048      	b.n	800631e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800628c:	4b2d      	ldr	r3, [pc, #180]	; (8006344 <prvSwitchTimerLists+0xc0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006296:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <prvSwitchTimerLists+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd fd8f 	bl	8003dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02e      	beq.n	800631e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d90e      	bls.n	80062f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062de:	4b19      	ldr	r3, [pc, #100]	; (8006344 <prvSwitchTimerLists+0xc0>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7fd fd34 	bl	8003d56 <vListInsert>
 80062ee:	e016      	b.n	800631e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062f0:	2300      	movs	r3, #0
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	2100      	movs	r1, #0
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fd60 	bl	8005dc0 <xTimerGenericCommand>
 8006300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	603b      	str	r3, [r7, #0]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <prvSwitchTimerLists+0xc0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1b1      	bne.n	800628c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <prvSwitchTimerLists+0xc0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <prvSwitchTimerLists+0xc4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a04      	ldr	r2, [pc, #16]	; (8006344 <prvSwitchTimerLists+0xc0>)
 8006334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006336:	4a04      	ldr	r2, [pc, #16]	; (8006348 <prvSwitchTimerLists+0xc4>)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	6013      	str	r3, [r2, #0]
}
 800633c:	bf00      	nop
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000f88 	.word	0x20000f88
 8006348:	20000f8c 	.word	0x20000f8c

0800634c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006352:	f000 f967 	bl	8006624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006356:	4b15      	ldr	r3, [pc, #84]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d120      	bne.n	80063a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800635e:	4814      	ldr	r0, [pc, #80]	; (80063b0 <prvCheckForValidListAndQueue+0x64>)
 8006360:	f7fd fca8 	bl	8003cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006364:	4813      	ldr	r0, [pc, #76]	; (80063b4 <prvCheckForValidListAndQueue+0x68>)
 8006366:	f7fd fca5 	bl	8003cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <prvCheckForValidListAndQueue+0x6c>)
 800636c:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <prvCheckForValidListAndQueue+0x64>)
 800636e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <prvCheckForValidListAndQueue+0x70>)
 8006372:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <prvCheckForValidListAndQueue+0x68>)
 8006374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006376:	2300      	movs	r3, #0
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <prvCheckForValidListAndQueue+0x74>)
 800637c:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <prvCheckForValidListAndQueue+0x78>)
 800637e:	2110      	movs	r1, #16
 8006380:	200a      	movs	r0, #10
 8006382:	f7fd fdb3 	bl	8003eec <xQueueGenericCreateStatic>
 8006386:	4603      	mov	r3, r0
 8006388:	4a08      	ldr	r2, [pc, #32]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 800638a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <prvCheckForValidListAndQueue+0x60>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	490b      	ldr	r1, [pc, #44]	; (80063c8 <prvCheckForValidListAndQueue+0x7c>)
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fa86 	bl	80048ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063a0:	f000 f970 	bl	8006684 <vPortExitCritical>
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000f90 	.word	0x20000f90
 80063b0:	20000f60 	.word	0x20000f60
 80063b4:	20000f74 	.word	0x20000f74
 80063b8:	20000f88 	.word	0x20000f88
 80063bc:	20000f8c 	.word	0x20000f8c
 80063c0:	2000103c 	.word	0x2000103c
 80063c4:	20000f9c 	.word	0x20000f9c
 80063c8:	0800a1bc 	.word	0x0800a1bc

080063cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3b04      	subs	r3, #4
 80063dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0201 	bic.w	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3b04      	subs	r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <pxPortInitialiseStack+0x64>)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3b14      	subs	r3, #20
 8006406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b04      	subs	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f06f 0202 	mvn.w	r2, #2
 800641a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3b20      	subs	r3, #32
 8006420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	08006435 	.word	0x08006435

08006434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <prvTaskExitError+0x54>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d00a      	beq.n	800645e <prvTaskExitError+0x2a>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <prvTaskExitError+0x28>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60bb      	str	r3, [r7, #8]
}
 8006470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006472:	bf00      	nop
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0fc      	beq.n	8006474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	2000000c 	.word	0x2000000c
 800648c:	00000000 	.word	0x00000000

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	4770      	bx	lr
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst2>:
 80064b0:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <prvPortStartFirstTask+0x24>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8814 	msr	CONTROL, r0
 80064ca:	b662      	cpsie	i
 80064cc:	b661      	cpsie	f
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	df00      	svc	0
 80064d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064da:	bf00      	nop
 80064dc:	e000ed08 	.word	0xe000ed08

080064e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064e6:	4b46      	ldr	r3, [pc, #280]	; (8006600 <xPortStartScheduler+0x120>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <xPortStartScheduler+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10a      	bne.n	8006506 <xPortStartScheduler+0x26>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <xPortStartScheduler+0x120>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <xPortStartScheduler+0x128>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10a      	bne.n	8006526 <xPortStartScheduler+0x46>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60fb      	str	r3, [r7, #12]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <xPortStartScheduler+0x12c>)
 8006528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006548:	b2da      	uxtb	r2, r3
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <xPortStartScheduler+0x130>)
 800654c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <xPortStartScheduler+0x134>)
 8006550:	2207      	movs	r2, #7
 8006552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006554:	e009      	b.n	800656a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <xPortStartScheduler+0x134>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3b01      	subs	r3, #1
 800655c:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <xPortStartScheduler+0x134>)
 800655e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b2db      	uxtb	r3, r3
 8006568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d0ef      	beq.n	8006556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006576:	4b27      	ldr	r3, [pc, #156]	; (8006614 <xPortStartScheduler+0x134>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1c3 0307 	rsb	r3, r3, #7
 800657e:	2b04      	cmp	r3, #4
 8006580:	d00a      	beq.n	8006598 <xPortStartScheduler+0xb8>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	60bb      	str	r3, [r7, #8]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006598:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <xPortStartScheduler+0x134>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <xPortStartScheduler+0x134>)
 80065a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <xPortStartScheduler+0x134>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <xPortStartScheduler+0x134>)
 80065ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <xPortStartScheduler+0x138>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <xPortStartScheduler+0x138>)
 80065bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <xPortStartScheduler+0x138>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a14      	ldr	r2, [pc, #80]	; (8006618 <xPortStartScheduler+0x138>)
 80065c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065ce:	f000 f9a9 	bl	8006924 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <xPortStartScheduler+0x13c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065d8:	f000 f9e0 	bl	800699c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <xPortStartScheduler+0x140>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <xPortStartScheduler+0x140>)
 80065e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065e8:	f7ff ff66 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ec:	f7fe fdee 	bl	80051cc <vTaskSwitchContext>
	prvTaskExitError();
 80065f0:	f7ff ff20 	bl	8006434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	e000ed00 	.word	0xe000ed00
 8006604:	410fc271 	.word	0x410fc271
 8006608:	410fc270 	.word	0x410fc270
 800660c:	e000e400 	.word	0xe000e400
 8006610:	20001098 	.word	0x20001098
 8006614:	2000109c 	.word	0x2000109c
 8006618:	e000ed20 	.word	0xe000ed20
 800661c:	2000000c 	.word	0x2000000c
 8006620:	e000ef34 	.word	0xe000ef34

08006624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <vPortEnterCritical+0x58>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a0d      	ldr	r2, [pc, #52]	; (800667c <vPortEnterCritical+0x58>)
 8006646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <vPortEnterCritical+0x58>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10f      	bne.n	8006670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortEnterCritical+0x5c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <vPortEnterCritical+0x4c>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	603b      	str	r3, [r7, #0]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <vPortEnterCritical+0x4a>
	}
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	2000000c 	.word	0x2000000c
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <vPortExitCritical+0x50>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <vPortExitCritical+0x24>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <vPortExitCritical+0x50>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <vPortExitCritical+0x50>)
 80066b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <vPortExitCritical+0x50>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <vPortExitCritical+0x42>
 80066ba:	2300      	movs	r3, #0
 80066bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f383 8811 	msr	BASEPRI, r3
}
 80066c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	2000000c 	.word	0x2000000c
	...

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f01e 0f10 	tst.w	lr, #16
 80066f0:	bf08      	it	eq
 80066f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006704:	f380 8811 	msr	BASEPRI, r0
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f7fe fd5c 	bl	80051cc <vTaskSwitchContext>
 8006714:	f04f 0000 	mov.w	r0, #0
 8006718:	f380 8811 	msr	BASEPRI, r0
 800671c:	bc09      	pop	{r0, r3}
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	6808      	ldr	r0, [r1, #0]
 8006722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006726:	f01e 0f10 	tst.w	lr, #16
 800672a:	bf08      	it	eq
 800672c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006730:	f380 8809 	msr	PSP, r0
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst>:
 8006740:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006762:	f7fe fc79 	bl	8005058 <xTaskIncrementTick>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <xPortSysTickHandler+0x40>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	2300      	movs	r3, #0
 8006776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8006794:	4b5d      	ldr	r3, [pc, #372]	; (800690c <vPortSuppressTicksAndSleep+0x180>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d902      	bls.n	80067a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800679e:	4b5b      	ldr	r3, [pc, #364]	; (800690c <vPortSuppressTicksAndSleep+0x180>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80067a4:	4b5a      	ldr	r3, [pc, #360]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a59      	ldr	r2, [pc, #356]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80067b0:	4b58      	ldr	r3, [pc, #352]	; (8006914 <vPortSuppressTicksAndSleep+0x188>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4957      	ldr	r1, [pc, #348]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 80067ba:	6809      	ldr	r1, [r1, #0]
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80067c4:	4b55      	ldr	r3, [pc, #340]	; (800691c <vPortSuppressTicksAndSleep+0x190>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d904      	bls.n	80067d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80067ce:	4b53      	ldr	r3, [pc, #332]	; (800691c <vPortSuppressTicksAndSleep+0x190>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80067d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80067da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80067de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80067e2:	f7fe fed1 	bl	8005588 <eTaskConfirmSleepModeStatus>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80067ec:	4b49      	ldr	r3, [pc, #292]	; (8006914 <vPortSuppressTicksAndSleep+0x188>)
 80067ee:	4a4c      	ldr	r2, [pc, #304]	; (8006920 <vPortSuppressTicksAndSleep+0x194>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80067f4:	4b46      	ldr	r3, [pc, #280]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a45      	ldr	r2, [pc, #276]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006800:	4b45      	ldr	r3, [pc, #276]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a46      	ldr	r2, [pc, #280]	; (8006920 <vPortSuppressTicksAndSleep+0x194>)
 8006806:	3b01      	subs	r3, #1
 8006808:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800680a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800680c:	e079      	b.n	8006902 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800680e:	4a44      	ldr	r2, [pc, #272]	; (8006920 <vPortSuppressTicksAndSleep+0x194>)
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006814:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <vPortSuppressTicksAndSleep+0x188>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800681a:	4b3d      	ldr	r3, [pc, #244]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a3c      	ldr	r2, [pc, #240]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	6938      	ldr	r0, [r7, #16]
 8006830:	f7fa fb94 	bl	8000f5c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800683a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800683e:	bf30      	wfi
				__asm volatile( "isb" );
 8006840:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fa fb93 	bl	8000f70 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800684a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800684c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006850:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8006854:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8006856:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800685a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800685e:	4b2c      	ldr	r3, [pc, #176]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 8006860:	2206      	movs	r2, #6
 8006862:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8006864:	4b2a      	ldr	r3, [pc, #168]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01d      	beq.n	80068ac <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8006870:	4b29      	ldr	r3, [pc, #164]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b27      	ldr	r3, [pc, #156]	; (8006914 <vPortSuppressTicksAndSleep+0x188>)
 8006876:	6819      	ldr	r1, [r3, #0]
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	1acb      	subs	r3, r1, r3
 800687c:	4413      	add	r3, r2
 800687e:	3b01      	subs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <vPortSuppressTicksAndSleep+0x190>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	429a      	cmp	r2, r3
 800688a:	d304      	bcc.n	8006896 <vPortSuppressTicksAndSleep+0x10a>
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	429a      	cmp	r2, r3
 8006894:	d903      	bls.n	800689e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8006896:	4b20      	ldr	r3, [pc, #128]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3b01      	subs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800689e:	4a20      	ldr	r2, [pc, #128]	; (8006920 <vPortSuppressTicksAndSleep+0x194>)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	e018      	b.n	80068de <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	fb03 f202 	mul.w	r2, r3, r2
 80068b6:	4b17      	ldr	r3, [pc, #92]	; (8006914 <vPortSuppressTicksAndSleep+0x188>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80068be:	4b16      	ldr	r3, [pc, #88]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a12      	ldr	r2, [pc, #72]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	fb03 f202 	mul.w	r2, r3, r2
 80068d6:	4912      	ldr	r1, [pc, #72]	; (8006920 <vPortSuppressTicksAndSleep+0x194>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <vPortSuppressTicksAndSleep+0x188>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80068e4:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a09      	ldr	r2, [pc, #36]	; (8006910 <vPortSuppressTicksAndSleep+0x184>)
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80068f0:	69b8      	ldr	r0, [r7, #24]
 80068f2:	f7fe fb89 	bl	8005008 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <vPortSuppressTicksAndSleep+0x18c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a09      	ldr	r2, [pc, #36]	; (8006920 <vPortSuppressTicksAndSleep+0x194>)
 80068fc:	3b01      	subs	r3, #1
 80068fe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8006900:	b662      	cpsie	i
	}
 8006902:	bf00      	nop
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20001090 	.word	0x20001090
 8006910:	e000e010 	.word	0xe000e010
 8006914:	e000e018 	.word	0xe000e018
 8006918:	2000108c 	.word	0x2000108c
 800691c:	20001094 	.word	0x20001094
 8006920:	e000e014 	.word	0xe000e014

08006924 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8006928:	4b14      	ldr	r3, [pc, #80]	; (800697c <vPortSetupTimerInterrupt+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <vPortSetupTimerInterrupt+0x5c>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	099b      	lsrs	r3, r3, #6
 8006934:	4a13      	ldr	r2, [pc, #76]	; (8006984 <vPortSetupTimerInterrupt+0x60>)
 8006936:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8006938:	4b12      	ldr	r3, [pc, #72]	; (8006984 <vPortSetupTimerInterrupt+0x60>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	4a10      	ldr	r2, [pc, #64]	; (8006988 <vPortSetupTimerInterrupt+0x64>)
 8006946:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8006948:	4b10      	ldr	r3, [pc, #64]	; (800698c <vPortSetupTimerInterrupt+0x68>)
 800694a:	222d      	movs	r2, #45	; 0x2d
 800694c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <vPortSetupTimerInterrupt+0x6c>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <vPortSetupTimerInterrupt+0x70>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <vPortSetupTimerInterrupt+0x58>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a08      	ldr	r2, [pc, #32]	; (8006980 <vPortSetupTimerInterrupt+0x5c>)
 8006960:	fba2 2303 	umull	r2, r3, r2, r3
 8006964:	099b      	lsrs	r3, r3, #6
 8006966:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <vPortSetupTimerInterrupt+0x74>)
 8006968:	3b01      	subs	r3, #1
 800696a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696c:	4b08      	ldr	r3, [pc, #32]	; (8006990 <vPortSetupTimerInterrupt+0x6c>)
 800696e:	2207      	movs	r2, #7
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000000 	.word	0x20000000
 8006980:	10624dd3 	.word	0x10624dd3
 8006984:	2000108c 	.word	0x2000108c
 8006988:	20001090 	.word	0x20001090
 800698c:	20001094 	.word	0x20001094
 8006990:	e000e010 	.word	0xe000e010
 8006994:	e000e018 	.word	0xe000e018
 8006998:	e000e014 	.word	0xe000e014

0800699c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800699c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069ac <vPortEnableVFP+0x10>
 80069a0:	6801      	ldr	r1, [r0, #0]
 80069a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069a6:	6001      	str	r1, [r0, #0]
 80069a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069aa:	bf00      	nop
 80069ac:	e000ed88 	.word	0xe000ed88

080069b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069b6:	f3ef 8305 	mrs	r3, IPSR
 80069ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b0f      	cmp	r3, #15
 80069c0:	d914      	bls.n	80069ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069c2:	4a17      	ldr	r2, [pc, #92]	; (8006a20 <vPortValidateInterruptPriority+0x70>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <vPortValidateInterruptPriority+0x74>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	7afa      	ldrb	r2, [r7, #11]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d20a      	bcs.n	80069ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	607b      	str	r3, [r7, #4]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069ec:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <vPortValidateInterruptPriority+0x78>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069f4:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <vPortValidateInterruptPriority+0x7c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d90a      	bls.n	8006a12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	603b      	str	r3, [r7, #0]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <vPortValidateInterruptPriority+0x60>
	}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e3f0 	.word	0xe000e3f0
 8006a24:	20001098 	.word	0x20001098
 8006a28:	e000ed0c 	.word	0xe000ed0c
 8006a2c:	2000109c 	.word	0x2000109c

08006a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a3c:	f7fe f9f0 	bl	8004e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a40:	4b5b      	ldr	r3, [pc, #364]	; (8006bb0 <pvPortMalloc+0x180>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a48:	f000 f920 	bl	8006c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a4c:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <pvPortMalloc+0x184>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 8093 	bne.w	8006b80 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01d      	beq.n	8006a9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a60:	2208      	movs	r2, #8
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d014      	beq.n	8006a9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f023 0307 	bic.w	r3, r3, #7
 8006a78:	3308      	adds	r3, #8
 8006a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <pvPortMalloc+0x6c>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	617b      	str	r3, [r7, #20]
}
 8006a98:	bf00      	nop
 8006a9a:	e7fe      	b.n	8006a9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d06e      	beq.n	8006b80 <pvPortMalloc+0x150>
 8006aa2:	4b45      	ldr	r3, [pc, #276]	; (8006bb8 <pvPortMalloc+0x188>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d869      	bhi.n	8006b80 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aac:	4b43      	ldr	r3, [pc, #268]	; (8006bbc <pvPortMalloc+0x18c>)
 8006aae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ab0:	4b42      	ldr	r3, [pc, #264]	; (8006bbc <pvPortMalloc+0x18c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ab6:	e004      	b.n	8006ac2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d903      	bls.n	8006ad4 <pvPortMalloc+0xa4>
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f1      	bne.n	8006ab8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ad4:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <pvPortMalloc+0x180>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d050      	beq.n	8006b80 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2208      	movs	r2, #8
 8006ae4:	4413      	add	r3, r2
 8006ae6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	2308      	movs	r3, #8
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d91f      	bls.n	8006b40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <pvPortMalloc+0xf8>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	613b      	str	r3, [r7, #16]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b3a:	69b8      	ldr	r0, [r7, #24]
 8006b3c:	f000 f908 	bl	8006d50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b40:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <pvPortMalloc+0x188>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <pvPortMalloc+0x188>)
 8006b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <pvPortMalloc+0x188>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <pvPortMalloc+0x190>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d203      	bcs.n	8006b62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <pvPortMalloc+0x188>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <pvPortMalloc+0x190>)
 8006b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <pvPortMalloc+0x184>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <pvPortMalloc+0x194>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <pvPortMalloc+0x194>)
 8006b7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b80:	f7fe f994 	bl	8004eac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <pvPortMalloc+0x174>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <pvPortMalloc+0x172>
	return pvReturn;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3728      	adds	r7, #40	; 0x28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20004ca8 	.word	0x20004ca8
 8006bb4:	20004cbc 	.word	0x20004cbc
 8006bb8:	20004cac 	.word	0x20004cac
 8006bbc:	20004ca0 	.word	0x20004ca0
 8006bc0:	20004cb0 	.word	0x20004cb0
 8006bc4:	20004cb4 	.word	0x20004cb4

08006bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d04d      	beq.n	8006c76 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bda:	2308      	movs	r3, #8
 8006bdc:	425b      	negs	r3, r3
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <vPortFree+0xb8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <vPortFree+0x44>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <vPortFree+0x62>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	60bb      	str	r3, [r7, #8]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <vPortFree+0xb8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01e      	beq.n	8006c76 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11a      	bne.n	8006c76 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <vPortFree+0xb8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c50:	f7fe f8e6 	bl	8004e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <vPortFree+0xbc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vPortFree+0xbc>)
 8006c60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c62:	6938      	ldr	r0, [r7, #16]
 8006c64:	f000 f874 	bl	8006d50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c68:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <vPortFree+0xc0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	4a06      	ldr	r2, [pc, #24]	; (8006c88 <vPortFree+0xc0>)
 8006c70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c72:	f7fe f91b 	bl	8004eac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c76:	bf00      	nop
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20004cbc 	.word	0x20004cbc
 8006c84:	20004cac 	.word	0x20004cac
 8006c88:	20004cb8 	.word	0x20004cb8

08006c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <prvHeapInit+0xac>)
 8006c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00c      	beq.n	8006cc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3307      	adds	r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0307 	bic.w	r3, r3, #7
 8006cb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	4a1f      	ldr	r2, [pc, #124]	; (8006d38 <prvHeapInit+0xac>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cc4:	4a1d      	ldr	r2, [pc, #116]	; (8006d3c <prvHeapInit+0xb0>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cca:	4b1c      	ldr	r3, [pc, #112]	; (8006d3c <prvHeapInit+0xb0>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd8:	2208      	movs	r2, #8
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a15      	ldr	r2, [pc, #84]	; (8006d40 <prvHeapInit+0xb4>)
 8006cec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <prvHeapInit+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cf6:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <prvHeapInit+0xb4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <prvHeapInit+0xb4>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a0a      	ldr	r2, [pc, #40]	; (8006d44 <prvHeapInit+0xb8>)
 8006d1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <prvHeapInit+0xbc>)
 8006d22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d24:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <prvHeapInit+0xc0>)
 8006d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200010a0 	.word	0x200010a0
 8006d3c:	20004ca0 	.word	0x20004ca0
 8006d40:	20004ca8 	.word	0x20004ca8
 8006d44:	20004cb0 	.word	0x20004cb0
 8006d48:	20004cac 	.word	0x20004cac
 8006d4c:	20004cbc 	.word	0x20004cbc

08006d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d58:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <prvInsertBlockIntoFreeList+0xac>)
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e002      	b.n	8006d64 <prvInsertBlockIntoFreeList+0x14>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d8f7      	bhi.n	8006d5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d108      	bne.n	8006d92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	441a      	add	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d118      	bne.n	8006dd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <prvInsertBlockIntoFreeList+0xb0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d00d      	beq.n	8006dce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e008      	b.n	8006de0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dce:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e003      	b.n	8006de0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d002      	beq.n	8006dee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20004ca0 	.word	0x20004ca0
 8006e00:	20004ca8 	.word	0x20004ca8

08006e04 <__errno>:
 8006e04:	4b01      	ldr	r3, [pc, #4]	; (8006e0c <__errno+0x8>)
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000010 	.word	0x20000010

08006e10 <std>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e1e:	6083      	str	r3, [r0, #8]
 8006e20:	8181      	strh	r1, [r0, #12]
 8006e22:	6643      	str	r3, [r0, #100]	; 0x64
 8006e24:	81c2      	strh	r2, [r0, #14]
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	305c      	adds	r0, #92	; 0x5c
 8006e2e:	f000 f91a 	bl	8007066 <memset>
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <std+0x38>)
 8006e34:	6263      	str	r3, [r4, #36]	; 0x24
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <std+0x3c>)
 8006e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <std+0x40>)
 8006e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <std+0x44>)
 8006e40:	6224      	str	r4, [r4, #32]
 8006e42:	6323      	str	r3, [r4, #48]	; 0x30
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	08007ba9 	.word	0x08007ba9
 8006e4c:	08007bcb 	.word	0x08007bcb
 8006e50:	08007c03 	.word	0x08007c03
 8006e54:	08007c27 	.word	0x08007c27

08006e58 <_cleanup_r>:
 8006e58:	4901      	ldr	r1, [pc, #4]	; (8006e60 <_cleanup_r+0x8>)
 8006e5a:	f000 b8af 	b.w	8006fbc <_fwalk_reent>
 8006e5e:	bf00      	nop
 8006e60:	08008a79 	.word	0x08008a79

08006e64 <__sfmoreglue>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	2268      	movs	r2, #104	; 0x68
 8006e68:	1e4d      	subs	r5, r1, #1
 8006e6a:	4355      	muls	r5, r2
 8006e6c:	460e      	mov	r6, r1
 8006e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e72:	f000 f921 	bl	80070b8 <_malloc_r>
 8006e76:	4604      	mov	r4, r0
 8006e78:	b140      	cbz	r0, 8006e8c <__sfmoreglue+0x28>
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e80:	300c      	adds	r0, #12
 8006e82:	60a0      	str	r0, [r4, #8]
 8006e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e88:	f000 f8ed 	bl	8007066 <memset>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <__sfp_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sfp_lock_acquire+0x8>)
 8006e92:	f000 b8d8 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	20004cc1 	.word	0x20004cc1

08006e9c <__sfp_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sfp_lock_release+0x8>)
 8006e9e:	f000 b8d3 	b.w	8007048 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20004cc1 	.word	0x20004cc1

08006ea8 <__sinit_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sinit_lock_acquire+0x8>)
 8006eaa:	f000 b8cc 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20004cc2 	.word	0x20004cc2

08006eb4 <__sinit_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sinit_lock_release+0x8>)
 8006eb6:	f000 b8c7 	b.w	8007048 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	20004cc2 	.word	0x20004cc2

08006ec0 <__sinit>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	f7ff fff0 	bl	8006ea8 <__sinit_lock_acquire>
 8006ec8:	69a3      	ldr	r3, [r4, #24]
 8006eca:	b11b      	cbz	r3, 8006ed4 <__sinit+0x14>
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f7ff bff0 	b.w	8006eb4 <__sinit_lock_release>
 8006ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <__sinit+0x68>)
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <__sinit+0x6c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	bf04      	itt	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	61a3      	streq	r3, [r4, #24]
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 f820 	bl	8006f30 <__sfp>
 8006ef0:	6060      	str	r0, [r4, #4]
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 f81c 	bl	8006f30 <__sfp>
 8006ef8:	60a0      	str	r0, [r4, #8]
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 f818 	bl	8006f30 <__sfp>
 8006f00:	2200      	movs	r2, #0
 8006f02:	60e0      	str	r0, [r4, #12]
 8006f04:	2104      	movs	r1, #4
 8006f06:	6860      	ldr	r0, [r4, #4]
 8006f08:	f7ff ff82 	bl	8006e10 <std>
 8006f0c:	68a0      	ldr	r0, [r4, #8]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2109      	movs	r1, #9
 8006f12:	f7ff ff7d 	bl	8006e10 <std>
 8006f16:	68e0      	ldr	r0, [r4, #12]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	2112      	movs	r1, #18
 8006f1c:	f7ff ff78 	bl	8006e10 <std>
 8006f20:	2301      	movs	r3, #1
 8006f22:	61a3      	str	r3, [r4, #24]
 8006f24:	e7d2      	b.n	8006ecc <__sinit+0xc>
 8006f26:	bf00      	nop
 8006f28:	0800a2c0 	.word	0x0800a2c0
 8006f2c:	08006e59 	.word	0x08006e59

08006f30 <__sfp>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	4607      	mov	r7, r0
 8006f34:	f7ff ffac 	bl	8006e90 <__sfp_lock_acquire>
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <__sfp+0x84>)
 8006f3a:	681e      	ldr	r6, [r3, #0]
 8006f3c:	69b3      	ldr	r3, [r6, #24]
 8006f3e:	b913      	cbnz	r3, 8006f46 <__sfp+0x16>
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff ffbd 	bl	8006ec0 <__sinit>
 8006f46:	3648      	adds	r6, #72	; 0x48
 8006f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	d503      	bpl.n	8006f58 <__sfp+0x28>
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	b30b      	cbz	r3, 8006f98 <__sfp+0x68>
 8006f54:	6836      	ldr	r6, [r6, #0]
 8006f56:	e7f7      	b.n	8006f48 <__sfp+0x18>
 8006f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f5c:	b9d5      	cbnz	r5, 8006f94 <__sfp+0x64>
 8006f5e:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <__sfp+0x88>)
 8006f60:	60e3      	str	r3, [r4, #12]
 8006f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f66:	6665      	str	r5, [r4, #100]	; 0x64
 8006f68:	f000 f86c 	bl	8007044 <__retarget_lock_init_recursive>
 8006f6c:	f7ff ff96 	bl	8006e9c <__sfp_lock_release>
 8006f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f78:	6025      	str	r5, [r4, #0]
 8006f7a:	61a5      	str	r5, [r4, #24]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f84:	f000 f86f 	bl	8007066 <memset>
 8006f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f90:	4620      	mov	r0, r4
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	3468      	adds	r4, #104	; 0x68
 8006f96:	e7d9      	b.n	8006f4c <__sfp+0x1c>
 8006f98:	2104      	movs	r1, #4
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f7ff ff62 	bl	8006e64 <__sfmoreglue>
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	6030      	str	r0, [r6, #0]
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1d5      	bne.n	8006f54 <__sfp+0x24>
 8006fa8:	f7ff ff78 	bl	8006e9c <__sfp_lock_release>
 8006fac:	230c      	movs	r3, #12
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	e7ee      	b.n	8006f90 <__sfp+0x60>
 8006fb2:	bf00      	nop
 8006fb4:	0800a2c0 	.word	0x0800a2c0
 8006fb8:	ffff0001 	.word	0xffff0001

08006fbc <_fwalk_reent>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	4688      	mov	r8, r1
 8006fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fc8:	2700      	movs	r7, #0
 8006fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fce:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd2:	d505      	bpl.n	8006fe0 <_fwalk_reent+0x24>
 8006fd4:	6824      	ldr	r4, [r4, #0]
 8006fd6:	2c00      	cmp	r4, #0
 8006fd8:	d1f7      	bne.n	8006fca <_fwalk_reent+0xe>
 8006fda:	4638      	mov	r0, r7
 8006fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d907      	bls.n	8006ff6 <_fwalk_reent+0x3a>
 8006fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fea:	3301      	adds	r3, #1
 8006fec:	d003      	beq.n	8006ff6 <_fwalk_reent+0x3a>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	47c0      	blx	r8
 8006ff4:	4307      	orrs	r7, r0
 8006ff6:	3568      	adds	r5, #104	; 0x68
 8006ff8:	e7e9      	b.n	8006fce <_fwalk_reent+0x12>
	...

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4d0d      	ldr	r5, [pc, #52]	; (8007034 <__libc_init_array+0x38>)
 8007000:	4c0d      	ldr	r4, [pc, #52]	; (8007038 <__libc_init_array+0x3c>)
 8007002:	1b64      	subs	r4, r4, r5
 8007004:	10a4      	asrs	r4, r4, #2
 8007006:	2600      	movs	r6, #0
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	4d0b      	ldr	r5, [pc, #44]	; (800703c <__libc_init_array+0x40>)
 800700e:	4c0c      	ldr	r4, [pc, #48]	; (8007040 <__libc_init_array+0x44>)
 8007010:	f003 f87e 	bl	800a110 <_init>
 8007014:	1b64      	subs	r4, r4, r5
 8007016:	10a4      	asrs	r4, r4, #2
 8007018:	2600      	movs	r6, #0
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	0800a644 	.word	0x0800a644
 8007038:	0800a644 	.word	0x0800a644
 800703c:	0800a644 	.word	0x0800a644
 8007040:	0800a648 	.word	0x0800a648

08007044 <__retarget_lock_init_recursive>:
 8007044:	4770      	bx	lr

08007046 <__retarget_lock_acquire_recursive>:
 8007046:	4770      	bx	lr

08007048 <__retarget_lock_release_recursive>:
 8007048:	4770      	bx	lr

0800704a <memcpy>:
 800704a:	440a      	add	r2, r1
 800704c:	4291      	cmp	r1, r2
 800704e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007052:	d100      	bne.n	8007056 <memcpy+0xc>
 8007054:	4770      	bx	lr
 8007056:	b510      	push	{r4, lr}
 8007058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800705c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007060:	4291      	cmp	r1, r2
 8007062:	d1f9      	bne.n	8007058 <memcpy+0xe>
 8007064:	bd10      	pop	{r4, pc}

08007066 <memset>:
 8007066:	4402      	add	r2, r0
 8007068:	4603      	mov	r3, r0
 800706a:	4293      	cmp	r3, r2
 800706c:	d100      	bne.n	8007070 <memset+0xa>
 800706e:	4770      	bx	lr
 8007070:	f803 1b01 	strb.w	r1, [r3], #1
 8007074:	e7f9      	b.n	800706a <memset+0x4>
	...

08007078 <sbrk_aligned>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	4e0e      	ldr	r6, [pc, #56]	; (80070b4 <sbrk_aligned+0x3c>)
 800707c:	460c      	mov	r4, r1
 800707e:	6831      	ldr	r1, [r6, #0]
 8007080:	4605      	mov	r5, r0
 8007082:	b911      	cbnz	r1, 800708a <sbrk_aligned+0x12>
 8007084:	f000 fd60 	bl	8007b48 <_sbrk_r>
 8007088:	6030      	str	r0, [r6, #0]
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 fd5b 	bl	8007b48 <_sbrk_r>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d00a      	beq.n	80070ac <sbrk_aligned+0x34>
 8007096:	1cc4      	adds	r4, r0, #3
 8007098:	f024 0403 	bic.w	r4, r4, #3
 800709c:	42a0      	cmp	r0, r4
 800709e:	d007      	beq.n	80070b0 <sbrk_aligned+0x38>
 80070a0:	1a21      	subs	r1, r4, r0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 fd50 	bl	8007b48 <_sbrk_r>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d101      	bne.n	80070b0 <sbrk_aligned+0x38>
 80070ac:	f04f 34ff 	mov.w	r4, #4294967295
 80070b0:	4620      	mov	r0, r4
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	20004cc8 	.word	0x20004cc8

080070b8 <_malloc_r>:
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	1ccd      	adds	r5, r1, #3
 80070be:	f025 0503 	bic.w	r5, r5, #3
 80070c2:	3508      	adds	r5, #8
 80070c4:	2d0c      	cmp	r5, #12
 80070c6:	bf38      	it	cc
 80070c8:	250c      	movcc	r5, #12
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	4607      	mov	r7, r0
 80070ce:	db01      	blt.n	80070d4 <_malloc_r+0x1c>
 80070d0:	42a9      	cmp	r1, r5
 80070d2:	d905      	bls.n	80070e0 <_malloc_r+0x28>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	2600      	movs	r6, #0
 80070da:	4630      	mov	r0, r6
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e0:	4e2e      	ldr	r6, [pc, #184]	; (800719c <_malloc_r+0xe4>)
 80070e2:	f001 fd23 	bl	8008b2c <__malloc_lock>
 80070e6:	6833      	ldr	r3, [r6, #0]
 80070e8:	461c      	mov	r4, r3
 80070ea:	bb34      	cbnz	r4, 800713a <_malloc_r+0x82>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff ffc2 	bl	8007078 <sbrk_aligned>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	4604      	mov	r4, r0
 80070f8:	d14d      	bne.n	8007196 <_malloc_r+0xde>
 80070fa:	6834      	ldr	r4, [r6, #0]
 80070fc:	4626      	mov	r6, r4
 80070fe:	2e00      	cmp	r6, #0
 8007100:	d140      	bne.n	8007184 <_malloc_r+0xcc>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	4631      	mov	r1, r6
 8007106:	4638      	mov	r0, r7
 8007108:	eb04 0803 	add.w	r8, r4, r3
 800710c:	f000 fd1c 	bl	8007b48 <_sbrk_r>
 8007110:	4580      	cmp	r8, r0
 8007112:	d13a      	bne.n	800718a <_malloc_r+0xd2>
 8007114:	6821      	ldr	r1, [r4, #0]
 8007116:	3503      	adds	r5, #3
 8007118:	1a6d      	subs	r5, r5, r1
 800711a:	f025 0503 	bic.w	r5, r5, #3
 800711e:	3508      	adds	r5, #8
 8007120:	2d0c      	cmp	r5, #12
 8007122:	bf38      	it	cc
 8007124:	250c      	movcc	r5, #12
 8007126:	4629      	mov	r1, r5
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ffa5 	bl	8007078 <sbrk_aligned>
 800712e:	3001      	adds	r0, #1
 8007130:	d02b      	beq.n	800718a <_malloc_r+0xd2>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	442b      	add	r3, r5
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	e00e      	b.n	8007158 <_malloc_r+0xa0>
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	1b52      	subs	r2, r2, r5
 800713e:	d41e      	bmi.n	800717e <_malloc_r+0xc6>
 8007140:	2a0b      	cmp	r2, #11
 8007142:	d916      	bls.n	8007172 <_malloc_r+0xba>
 8007144:	1961      	adds	r1, r4, r5
 8007146:	42a3      	cmp	r3, r4
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	bf18      	it	ne
 800714c:	6059      	strne	r1, [r3, #4]
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	bf08      	it	eq
 8007152:	6031      	streq	r1, [r6, #0]
 8007154:	5162      	str	r2, [r4, r5]
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	4638      	mov	r0, r7
 800715a:	f104 060b 	add.w	r6, r4, #11
 800715e:	f001 fceb 	bl	8008b38 <__malloc_unlock>
 8007162:	f026 0607 	bic.w	r6, r6, #7
 8007166:	1d23      	adds	r3, r4, #4
 8007168:	1af2      	subs	r2, r6, r3
 800716a:	d0b6      	beq.n	80070da <_malloc_r+0x22>
 800716c:	1b9b      	subs	r3, r3, r6
 800716e:	50a3      	str	r3, [r4, r2]
 8007170:	e7b3      	b.n	80070da <_malloc_r+0x22>
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	42a3      	cmp	r3, r4
 8007176:	bf0c      	ite	eq
 8007178:	6032      	streq	r2, [r6, #0]
 800717a:	605a      	strne	r2, [r3, #4]
 800717c:	e7ec      	b.n	8007158 <_malloc_r+0xa0>
 800717e:	4623      	mov	r3, r4
 8007180:	6864      	ldr	r4, [r4, #4]
 8007182:	e7b2      	b.n	80070ea <_malloc_r+0x32>
 8007184:	4634      	mov	r4, r6
 8007186:	6876      	ldr	r6, [r6, #4]
 8007188:	e7b9      	b.n	80070fe <_malloc_r+0x46>
 800718a:	230c      	movs	r3, #12
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4638      	mov	r0, r7
 8007190:	f001 fcd2 	bl	8008b38 <__malloc_unlock>
 8007194:	e7a1      	b.n	80070da <_malloc_r+0x22>
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	e7de      	b.n	8007158 <_malloc_r+0xa0>
 800719a:	bf00      	nop
 800719c:	20004cc4 	.word	0x20004cc4

080071a0 <__cvt>:
 80071a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	ec55 4b10 	vmov	r4, r5, d0
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	460e      	mov	r6, r1
 80071ac:	4619      	mov	r1, r3
 80071ae:	462b      	mov	r3, r5
 80071b0:	bfbb      	ittet	lt
 80071b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071b6:	461d      	movlt	r5, r3
 80071b8:	2300      	movge	r3, #0
 80071ba:	232d      	movlt	r3, #45	; 0x2d
 80071bc:	700b      	strb	r3, [r1, #0]
 80071be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071c4:	4691      	mov	r9, r2
 80071c6:	f023 0820 	bic.w	r8, r3, #32
 80071ca:	bfbc      	itt	lt
 80071cc:	4622      	movlt	r2, r4
 80071ce:	4614      	movlt	r4, r2
 80071d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071d4:	d005      	beq.n	80071e2 <__cvt+0x42>
 80071d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071da:	d100      	bne.n	80071de <__cvt+0x3e>
 80071dc:	3601      	adds	r6, #1
 80071de:	2102      	movs	r1, #2
 80071e0:	e000      	b.n	80071e4 <__cvt+0x44>
 80071e2:	2103      	movs	r1, #3
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	ab02      	add	r3, sp, #8
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	ec45 4b10 	vmov	d0, r4, r5
 80071f0:	4653      	mov	r3, sl
 80071f2:	4632      	mov	r2, r6
 80071f4:	f000 fdcc 	bl	8007d90 <_dtoa_r>
 80071f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071fc:	4607      	mov	r7, r0
 80071fe:	d102      	bne.n	8007206 <__cvt+0x66>
 8007200:	f019 0f01 	tst.w	r9, #1
 8007204:	d022      	beq.n	800724c <__cvt+0xac>
 8007206:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800720a:	eb07 0906 	add.w	r9, r7, r6
 800720e:	d110      	bne.n	8007232 <__cvt+0x92>
 8007210:	783b      	ldrb	r3, [r7, #0]
 8007212:	2b30      	cmp	r3, #48	; 0x30
 8007214:	d10a      	bne.n	800722c <__cvt+0x8c>
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007222:	b918      	cbnz	r0, 800722c <__cvt+0x8c>
 8007224:	f1c6 0601 	rsb	r6, r6, #1
 8007228:	f8ca 6000 	str.w	r6, [sl]
 800722c:	f8da 3000 	ldr.w	r3, [sl]
 8007230:	4499      	add	r9, r3
 8007232:	2200      	movs	r2, #0
 8007234:	2300      	movs	r3, #0
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800723e:	b108      	cbz	r0, 8007244 <__cvt+0xa4>
 8007240:	f8cd 900c 	str.w	r9, [sp, #12]
 8007244:	2230      	movs	r2, #48	; 0x30
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	454b      	cmp	r3, r9
 800724a:	d307      	bcc.n	800725c <__cvt+0xbc>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007250:	1bdb      	subs	r3, r3, r7
 8007252:	4638      	mov	r0, r7
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	b004      	add	sp, #16
 8007258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725c:	1c59      	adds	r1, r3, #1
 800725e:	9103      	str	r1, [sp, #12]
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	e7f0      	b.n	8007246 <__cvt+0xa6>

08007264 <__exponent>:
 8007264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007266:	4603      	mov	r3, r0
 8007268:	2900      	cmp	r1, #0
 800726a:	bfb8      	it	lt
 800726c:	4249      	neglt	r1, r1
 800726e:	f803 2b02 	strb.w	r2, [r3], #2
 8007272:	bfb4      	ite	lt
 8007274:	222d      	movlt	r2, #45	; 0x2d
 8007276:	222b      	movge	r2, #43	; 0x2b
 8007278:	2909      	cmp	r1, #9
 800727a:	7042      	strb	r2, [r0, #1]
 800727c:	dd2a      	ble.n	80072d4 <__exponent+0x70>
 800727e:	f10d 0407 	add.w	r4, sp, #7
 8007282:	46a4      	mov	ip, r4
 8007284:	270a      	movs	r7, #10
 8007286:	46a6      	mov	lr, r4
 8007288:	460a      	mov	r2, r1
 800728a:	fb91 f6f7 	sdiv	r6, r1, r7
 800728e:	fb07 1516 	mls	r5, r7, r6, r1
 8007292:	3530      	adds	r5, #48	; 0x30
 8007294:	2a63      	cmp	r2, #99	; 0x63
 8007296:	f104 34ff 	add.w	r4, r4, #4294967295
 800729a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800729e:	4631      	mov	r1, r6
 80072a0:	dcf1      	bgt.n	8007286 <__exponent+0x22>
 80072a2:	3130      	adds	r1, #48	; 0x30
 80072a4:	f1ae 0502 	sub.w	r5, lr, #2
 80072a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072ac:	1c44      	adds	r4, r0, #1
 80072ae:	4629      	mov	r1, r5
 80072b0:	4561      	cmp	r1, ip
 80072b2:	d30a      	bcc.n	80072ca <__exponent+0x66>
 80072b4:	f10d 0209 	add.w	r2, sp, #9
 80072b8:	eba2 020e 	sub.w	r2, r2, lr
 80072bc:	4565      	cmp	r5, ip
 80072be:	bf88      	it	hi
 80072c0:	2200      	movhi	r2, #0
 80072c2:	4413      	add	r3, r2
 80072c4:	1a18      	subs	r0, r3, r0
 80072c6:	b003      	add	sp, #12
 80072c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072d2:	e7ed      	b.n	80072b0 <__exponent+0x4c>
 80072d4:	2330      	movs	r3, #48	; 0x30
 80072d6:	3130      	adds	r1, #48	; 0x30
 80072d8:	7083      	strb	r3, [r0, #2]
 80072da:	70c1      	strb	r1, [r0, #3]
 80072dc:	1d03      	adds	r3, r0, #4
 80072de:	e7f1      	b.n	80072c4 <__exponent+0x60>

080072e0 <_printf_float>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	ed2d 8b02 	vpush	{d8}
 80072e8:	b08d      	sub	sp, #52	; 0x34
 80072ea:	460c      	mov	r4, r1
 80072ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072f0:	4616      	mov	r6, r2
 80072f2:	461f      	mov	r7, r3
 80072f4:	4605      	mov	r5, r0
 80072f6:	f001 fbfb 	bl	8008af0 <_localeconv_r>
 80072fa:	f8d0 a000 	ldr.w	sl, [r0]
 80072fe:	4650      	mov	r0, sl
 8007300:	f7f8 ff6e 	bl	80001e0 <strlen>
 8007304:	2300      	movs	r3, #0
 8007306:	930a      	str	r3, [sp, #40]	; 0x28
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	f8d8 3000 	ldr.w	r3, [r8]
 8007310:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007314:	3307      	adds	r3, #7
 8007316:	f023 0307 	bic.w	r3, r3, #7
 800731a:	f103 0208 	add.w	r2, r3, #8
 800731e:	f8c8 2000 	str.w	r2, [r8]
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800732a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800732e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007332:	9307      	str	r3, [sp, #28]
 8007334:	f8cd 8018 	str.w	r8, [sp, #24]
 8007338:	ee08 0a10 	vmov	s16, r0
 800733c:	4b9f      	ldr	r3, [pc, #636]	; (80075bc <_printf_float+0x2dc>)
 800733e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	f7f9 fbf9 	bl	8000b3c <__aeabi_dcmpun>
 800734a:	bb88      	cbnz	r0, 80073b0 <_printf_float+0xd0>
 800734c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007350:	4b9a      	ldr	r3, [pc, #616]	; (80075bc <_printf_float+0x2dc>)
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	f7f9 fbd3 	bl	8000b00 <__aeabi_dcmple>
 800735a:	bb48      	cbnz	r0, 80073b0 <_printf_float+0xd0>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4640      	mov	r0, r8
 8007362:	4649      	mov	r1, r9
 8007364:	f7f9 fbc2 	bl	8000aec <__aeabi_dcmplt>
 8007368:	b110      	cbz	r0, 8007370 <_printf_float+0x90>
 800736a:	232d      	movs	r3, #45	; 0x2d
 800736c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007370:	4b93      	ldr	r3, [pc, #588]	; (80075c0 <_printf_float+0x2e0>)
 8007372:	4894      	ldr	r0, [pc, #592]	; (80075c4 <_printf_float+0x2e4>)
 8007374:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007378:	bf94      	ite	ls
 800737a:	4698      	movls	r8, r3
 800737c:	4680      	movhi	r8, r0
 800737e:	2303      	movs	r3, #3
 8007380:	6123      	str	r3, [r4, #16]
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	f023 0204 	bic.w	r2, r3, #4
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	f04f 0900 	mov.w	r9, #0
 800738e:	9700      	str	r7, [sp, #0]
 8007390:	4633      	mov	r3, r6
 8007392:	aa0b      	add	r2, sp, #44	; 0x2c
 8007394:	4621      	mov	r1, r4
 8007396:	4628      	mov	r0, r5
 8007398:	f000 f9d8 	bl	800774c <_printf_common>
 800739c:	3001      	adds	r0, #1
 800739e:	f040 8090 	bne.w	80074c2 <_printf_float+0x1e2>
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295
 80073a6:	b00d      	add	sp, #52	; 0x34
 80073a8:	ecbd 8b02 	vpop	{d8}
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f9 fbc0 	bl	8000b3c <__aeabi_dcmpun>
 80073bc:	b140      	cbz	r0, 80073d0 <_printf_float+0xf0>
 80073be:	464b      	mov	r3, r9
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bfbc      	itt	lt
 80073c4:	232d      	movlt	r3, #45	; 0x2d
 80073c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073ca:	487f      	ldr	r0, [pc, #508]	; (80075c8 <_printf_float+0x2e8>)
 80073cc:	4b7f      	ldr	r3, [pc, #508]	; (80075cc <_printf_float+0x2ec>)
 80073ce:	e7d1      	b.n	8007374 <_printf_float+0x94>
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073d6:	9206      	str	r2, [sp, #24]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	d13f      	bne.n	800745c <_printf_float+0x17c>
 80073dc:	2306      	movs	r3, #6
 80073de:	6063      	str	r3, [r4, #4]
 80073e0:	9b05      	ldr	r3, [sp, #20]
 80073e2:	6861      	ldr	r1, [r4, #4]
 80073e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073e8:	2300      	movs	r3, #0
 80073ea:	9303      	str	r3, [sp, #12]
 80073ec:	ab0a      	add	r3, sp, #40	; 0x28
 80073ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073f2:	ab09      	add	r3, sp, #36	; 0x24
 80073f4:	ec49 8b10 	vmov	d0, r8, r9
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	6022      	str	r2, [r4, #0]
 80073fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007400:	4628      	mov	r0, r5
 8007402:	f7ff fecd 	bl	80071a0 <__cvt>
 8007406:	9b06      	ldr	r3, [sp, #24]
 8007408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800740a:	2b47      	cmp	r3, #71	; 0x47
 800740c:	4680      	mov	r8, r0
 800740e:	d108      	bne.n	8007422 <_printf_float+0x142>
 8007410:	1cc8      	adds	r0, r1, #3
 8007412:	db02      	blt.n	800741a <_printf_float+0x13a>
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	4299      	cmp	r1, r3
 8007418:	dd41      	ble.n	800749e <_printf_float+0x1be>
 800741a:	f1ab 0b02 	sub.w	fp, fp, #2
 800741e:	fa5f fb8b 	uxtb.w	fp, fp
 8007422:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007426:	d820      	bhi.n	800746a <_printf_float+0x18a>
 8007428:	3901      	subs	r1, #1
 800742a:	465a      	mov	r2, fp
 800742c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007430:	9109      	str	r1, [sp, #36]	; 0x24
 8007432:	f7ff ff17 	bl	8007264 <__exponent>
 8007436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007438:	1813      	adds	r3, r2, r0
 800743a:	2a01      	cmp	r2, #1
 800743c:	4681      	mov	r9, r0
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	dc02      	bgt.n	8007448 <_printf_float+0x168>
 8007442:	6822      	ldr	r2, [r4, #0]
 8007444:	07d2      	lsls	r2, r2, #31
 8007446:	d501      	bpl.n	800744c <_printf_float+0x16c>
 8007448:	3301      	adds	r3, #1
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007450:	2b00      	cmp	r3, #0
 8007452:	d09c      	beq.n	800738e <_printf_float+0xae>
 8007454:	232d      	movs	r3, #45	; 0x2d
 8007456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800745a:	e798      	b.n	800738e <_printf_float+0xae>
 800745c:	9a06      	ldr	r2, [sp, #24]
 800745e:	2a47      	cmp	r2, #71	; 0x47
 8007460:	d1be      	bne.n	80073e0 <_printf_float+0x100>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1bc      	bne.n	80073e0 <_printf_float+0x100>
 8007466:	2301      	movs	r3, #1
 8007468:	e7b9      	b.n	80073de <_printf_float+0xfe>
 800746a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800746e:	d118      	bne.n	80074a2 <_printf_float+0x1c2>
 8007470:	2900      	cmp	r1, #0
 8007472:	6863      	ldr	r3, [r4, #4]
 8007474:	dd0b      	ble.n	800748e <_printf_float+0x1ae>
 8007476:	6121      	str	r1, [r4, #16]
 8007478:	b913      	cbnz	r3, 8007480 <_printf_float+0x1a0>
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	07d0      	lsls	r0, r2, #31
 800747e:	d502      	bpl.n	8007486 <_printf_float+0x1a6>
 8007480:	3301      	adds	r3, #1
 8007482:	440b      	add	r3, r1
 8007484:	6123      	str	r3, [r4, #16]
 8007486:	65a1      	str	r1, [r4, #88]	; 0x58
 8007488:	f04f 0900 	mov.w	r9, #0
 800748c:	e7de      	b.n	800744c <_printf_float+0x16c>
 800748e:	b913      	cbnz	r3, 8007496 <_printf_float+0x1b6>
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	07d2      	lsls	r2, r2, #31
 8007494:	d501      	bpl.n	800749a <_printf_float+0x1ba>
 8007496:	3302      	adds	r3, #2
 8007498:	e7f4      	b.n	8007484 <_printf_float+0x1a4>
 800749a:	2301      	movs	r3, #1
 800749c:	e7f2      	b.n	8007484 <_printf_float+0x1a4>
 800749e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	4299      	cmp	r1, r3
 80074a6:	db05      	blt.n	80074b4 <_printf_float+0x1d4>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	6121      	str	r1, [r4, #16]
 80074ac:	07d8      	lsls	r0, r3, #31
 80074ae:	d5ea      	bpl.n	8007486 <_printf_float+0x1a6>
 80074b0:	1c4b      	adds	r3, r1, #1
 80074b2:	e7e7      	b.n	8007484 <_printf_float+0x1a4>
 80074b4:	2900      	cmp	r1, #0
 80074b6:	bfd4      	ite	le
 80074b8:	f1c1 0202 	rsble	r2, r1, #2
 80074bc:	2201      	movgt	r2, #1
 80074be:	4413      	add	r3, r2
 80074c0:	e7e0      	b.n	8007484 <_printf_float+0x1a4>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	055a      	lsls	r2, r3, #21
 80074c6:	d407      	bmi.n	80074d8 <_printf_float+0x1f8>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	4642      	mov	r2, r8
 80074cc:	4631      	mov	r1, r6
 80074ce:	4628      	mov	r0, r5
 80074d0:	47b8      	blx	r7
 80074d2:	3001      	adds	r0, #1
 80074d4:	d12c      	bne.n	8007530 <_printf_float+0x250>
 80074d6:	e764      	b.n	80073a2 <_printf_float+0xc2>
 80074d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074dc:	f240 80e0 	bls.w	80076a0 <_printf_float+0x3c0>
 80074e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074e4:	2200      	movs	r2, #0
 80074e6:	2300      	movs	r3, #0
 80074e8:	f7f9 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d034      	beq.n	800755a <_printf_float+0x27a>
 80074f0:	4a37      	ldr	r2, [pc, #220]	; (80075d0 <_printf_float+0x2f0>)
 80074f2:	2301      	movs	r3, #1
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f af51 	beq.w	80073a2 <_printf_float+0xc2>
 8007500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007504:	429a      	cmp	r2, r3
 8007506:	db02      	blt.n	800750e <_printf_float+0x22e>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	07d8      	lsls	r0, r3, #31
 800750c:	d510      	bpl.n	8007530 <_printf_float+0x250>
 800750e:	ee18 3a10 	vmov	r3, s16
 8007512:	4652      	mov	r2, sl
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	f43f af41 	beq.w	80073a2 <_printf_float+0xc2>
 8007520:	f04f 0800 	mov.w	r8, #0
 8007524:	f104 091a 	add.w	r9, r4, #26
 8007528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752a:	3b01      	subs	r3, #1
 800752c:	4543      	cmp	r3, r8
 800752e:	dc09      	bgt.n	8007544 <_printf_float+0x264>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	079b      	lsls	r3, r3, #30
 8007534:	f100 8105 	bmi.w	8007742 <_printf_float+0x462>
 8007538:	68e0      	ldr	r0, [r4, #12]
 800753a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753c:	4298      	cmp	r0, r3
 800753e:	bfb8      	it	lt
 8007540:	4618      	movlt	r0, r3
 8007542:	e730      	b.n	80073a6 <_printf_float+0xc6>
 8007544:	2301      	movs	r3, #1
 8007546:	464a      	mov	r2, r9
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f af27 	beq.w	80073a2 <_printf_float+0xc2>
 8007554:	f108 0801 	add.w	r8, r8, #1
 8007558:	e7e6      	b.n	8007528 <_printf_float+0x248>
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	dc39      	bgt.n	80075d4 <_printf_float+0x2f4>
 8007560:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <_printf_float+0x2f0>)
 8007562:	2301      	movs	r3, #1
 8007564:	4631      	mov	r1, r6
 8007566:	4628      	mov	r0, r5
 8007568:	47b8      	blx	r7
 800756a:	3001      	adds	r0, #1
 800756c:	f43f af19 	beq.w	80073a2 <_printf_float+0xc2>
 8007570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007574:	4313      	orrs	r3, r2
 8007576:	d102      	bne.n	800757e <_printf_float+0x29e>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	d5d8      	bpl.n	8007530 <_printf_float+0x250>
 800757e:	ee18 3a10 	vmov	r3, s16
 8007582:	4652      	mov	r2, sl
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f af09 	beq.w	80073a2 <_printf_float+0xc2>
 8007590:	f04f 0900 	mov.w	r9, #0
 8007594:	f104 0a1a 	add.w	sl, r4, #26
 8007598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759a:	425b      	negs	r3, r3
 800759c:	454b      	cmp	r3, r9
 800759e:	dc01      	bgt.n	80075a4 <_printf_float+0x2c4>
 80075a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a2:	e792      	b.n	80074ca <_printf_float+0x1ea>
 80075a4:	2301      	movs	r3, #1
 80075a6:	4652      	mov	r2, sl
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f aef7 	beq.w	80073a2 <_printf_float+0xc2>
 80075b4:	f109 0901 	add.w	r9, r9, #1
 80075b8:	e7ee      	b.n	8007598 <_printf_float+0x2b8>
 80075ba:	bf00      	nop
 80075bc:	7fefffff 	.word	0x7fefffff
 80075c0:	0800a2c4 	.word	0x0800a2c4
 80075c4:	0800a2c8 	.word	0x0800a2c8
 80075c8:	0800a2d0 	.word	0x0800a2d0
 80075cc:	0800a2cc 	.word	0x0800a2cc
 80075d0:	0800a2d4 	.word	0x0800a2d4
 80075d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075d8:	429a      	cmp	r2, r3
 80075da:	bfa8      	it	ge
 80075dc:	461a      	movge	r2, r3
 80075de:	2a00      	cmp	r2, #0
 80075e0:	4691      	mov	r9, r2
 80075e2:	dc37      	bgt.n	8007654 <_printf_float+0x374>
 80075e4:	f04f 0b00 	mov.w	fp, #0
 80075e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ec:	f104 021a 	add.w	r2, r4, #26
 80075f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075f2:	9305      	str	r3, [sp, #20]
 80075f4:	eba3 0309 	sub.w	r3, r3, r9
 80075f8:	455b      	cmp	r3, fp
 80075fa:	dc33      	bgt.n	8007664 <_printf_float+0x384>
 80075fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007600:	429a      	cmp	r2, r3
 8007602:	db3b      	blt.n	800767c <_printf_float+0x39c>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	07da      	lsls	r2, r3, #31
 8007608:	d438      	bmi.n	800767c <_printf_float+0x39c>
 800760a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760c:	9a05      	ldr	r2, [sp, #20]
 800760e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007610:	1a9a      	subs	r2, r3, r2
 8007612:	eba3 0901 	sub.w	r9, r3, r1
 8007616:	4591      	cmp	r9, r2
 8007618:	bfa8      	it	ge
 800761a:	4691      	movge	r9, r2
 800761c:	f1b9 0f00 	cmp.w	r9, #0
 8007620:	dc35      	bgt.n	800768e <_printf_float+0x3ae>
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800762a:	f104 0a1a 	add.w	sl, r4, #26
 800762e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	eba3 0309 	sub.w	r3, r3, r9
 8007638:	4543      	cmp	r3, r8
 800763a:	f77f af79 	ble.w	8007530 <_printf_float+0x250>
 800763e:	2301      	movs	r3, #1
 8007640:	4652      	mov	r2, sl
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	f43f aeaa 	beq.w	80073a2 <_printf_float+0xc2>
 800764e:	f108 0801 	add.w	r8, r8, #1
 8007652:	e7ec      	b.n	800762e <_printf_float+0x34e>
 8007654:	4613      	mov	r3, r2
 8007656:	4631      	mov	r1, r6
 8007658:	4642      	mov	r2, r8
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	d1c0      	bne.n	80075e4 <_printf_float+0x304>
 8007662:	e69e      	b.n	80073a2 <_printf_float+0xc2>
 8007664:	2301      	movs	r3, #1
 8007666:	4631      	mov	r1, r6
 8007668:	4628      	mov	r0, r5
 800766a:	9205      	str	r2, [sp, #20]
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f ae97 	beq.w	80073a2 <_printf_float+0xc2>
 8007674:	9a05      	ldr	r2, [sp, #20]
 8007676:	f10b 0b01 	add.w	fp, fp, #1
 800767a:	e7b9      	b.n	80075f0 <_printf_float+0x310>
 800767c:	ee18 3a10 	vmov	r3, s16
 8007680:	4652      	mov	r2, sl
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	d1be      	bne.n	800760a <_printf_float+0x32a>
 800768c:	e689      	b.n	80073a2 <_printf_float+0xc2>
 800768e:	9a05      	ldr	r2, [sp, #20]
 8007690:	464b      	mov	r3, r9
 8007692:	4442      	add	r2, r8
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	d1c1      	bne.n	8007622 <_printf_float+0x342>
 800769e:	e680      	b.n	80073a2 <_printf_float+0xc2>
 80076a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a2:	2a01      	cmp	r2, #1
 80076a4:	dc01      	bgt.n	80076aa <_printf_float+0x3ca>
 80076a6:	07db      	lsls	r3, r3, #31
 80076a8:	d538      	bpl.n	800771c <_printf_float+0x43c>
 80076aa:	2301      	movs	r3, #1
 80076ac:	4642      	mov	r2, r8
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	f43f ae74 	beq.w	80073a2 <_printf_float+0xc2>
 80076ba:	ee18 3a10 	vmov	r3, s16
 80076be:	4652      	mov	r2, sl
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f ae6b 	beq.w	80073a2 <_printf_float+0xc2>
 80076cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076d0:	2200      	movs	r2, #0
 80076d2:	2300      	movs	r3, #0
 80076d4:	f7f9 fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80076d8:	b9d8      	cbnz	r0, 8007712 <_printf_float+0x432>
 80076da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076dc:	f108 0201 	add.w	r2, r8, #1
 80076e0:	3b01      	subs	r3, #1
 80076e2:	4631      	mov	r1, r6
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b8      	blx	r7
 80076e8:	3001      	adds	r0, #1
 80076ea:	d10e      	bne.n	800770a <_printf_float+0x42a>
 80076ec:	e659      	b.n	80073a2 <_printf_float+0xc2>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4652      	mov	r2, sl
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	f43f ae52 	beq.w	80073a2 <_printf_float+0xc2>
 80076fe:	f108 0801 	add.w	r8, r8, #1
 8007702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007704:	3b01      	subs	r3, #1
 8007706:	4543      	cmp	r3, r8
 8007708:	dcf1      	bgt.n	80076ee <_printf_float+0x40e>
 800770a:	464b      	mov	r3, r9
 800770c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007710:	e6dc      	b.n	80074cc <_printf_float+0x1ec>
 8007712:	f04f 0800 	mov.w	r8, #0
 8007716:	f104 0a1a 	add.w	sl, r4, #26
 800771a:	e7f2      	b.n	8007702 <_printf_float+0x422>
 800771c:	2301      	movs	r3, #1
 800771e:	4642      	mov	r2, r8
 8007720:	e7df      	b.n	80076e2 <_printf_float+0x402>
 8007722:	2301      	movs	r3, #1
 8007724:	464a      	mov	r2, r9
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	f43f ae38 	beq.w	80073a2 <_printf_float+0xc2>
 8007732:	f108 0801 	add.w	r8, r8, #1
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800773a:	1a5b      	subs	r3, r3, r1
 800773c:	4543      	cmp	r3, r8
 800773e:	dcf0      	bgt.n	8007722 <_printf_float+0x442>
 8007740:	e6fa      	b.n	8007538 <_printf_float+0x258>
 8007742:	f04f 0800 	mov.w	r8, #0
 8007746:	f104 0919 	add.w	r9, r4, #25
 800774a:	e7f4      	b.n	8007736 <_printf_float+0x456>

0800774c <_printf_common>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	4616      	mov	r6, r2
 8007752:	4699      	mov	r9, r3
 8007754:	688a      	ldr	r2, [r1, #8]
 8007756:	690b      	ldr	r3, [r1, #16]
 8007758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800775c:	4293      	cmp	r3, r2
 800775e:	bfb8      	it	lt
 8007760:	4613      	movlt	r3, r2
 8007762:	6033      	str	r3, [r6, #0]
 8007764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007768:	4607      	mov	r7, r0
 800776a:	460c      	mov	r4, r1
 800776c:	b10a      	cbz	r2, 8007772 <_printf_common+0x26>
 800776e:	3301      	adds	r3, #1
 8007770:	6033      	str	r3, [r6, #0]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	0699      	lsls	r1, r3, #26
 8007776:	bf42      	ittt	mi
 8007778:	6833      	ldrmi	r3, [r6, #0]
 800777a:	3302      	addmi	r3, #2
 800777c:	6033      	strmi	r3, [r6, #0]
 800777e:	6825      	ldr	r5, [r4, #0]
 8007780:	f015 0506 	ands.w	r5, r5, #6
 8007784:	d106      	bne.n	8007794 <_printf_common+0x48>
 8007786:	f104 0a19 	add.w	sl, r4, #25
 800778a:	68e3      	ldr	r3, [r4, #12]
 800778c:	6832      	ldr	r2, [r6, #0]
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	42ab      	cmp	r3, r5
 8007792:	dc26      	bgt.n	80077e2 <_printf_common+0x96>
 8007794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007798:	1e13      	subs	r3, r2, #0
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	bf18      	it	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	0692      	lsls	r2, r2, #26
 80077a2:	d42b      	bmi.n	80077fc <_printf_common+0xb0>
 80077a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a8:	4649      	mov	r1, r9
 80077aa:	4638      	mov	r0, r7
 80077ac:	47c0      	blx	r8
 80077ae:	3001      	adds	r0, #1
 80077b0:	d01e      	beq.n	80077f0 <_printf_common+0xa4>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	68e5      	ldr	r5, [r4, #12]
 80077b6:	6832      	ldr	r2, [r6, #0]
 80077b8:	f003 0306 	and.w	r3, r3, #6
 80077bc:	2b04      	cmp	r3, #4
 80077be:	bf08      	it	eq
 80077c0:	1aad      	subeq	r5, r5, r2
 80077c2:	68a3      	ldr	r3, [r4, #8]
 80077c4:	6922      	ldr	r2, [r4, #16]
 80077c6:	bf0c      	ite	eq
 80077c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077cc:	2500      	movne	r5, #0
 80077ce:	4293      	cmp	r3, r2
 80077d0:	bfc4      	itt	gt
 80077d2:	1a9b      	subgt	r3, r3, r2
 80077d4:	18ed      	addgt	r5, r5, r3
 80077d6:	2600      	movs	r6, #0
 80077d8:	341a      	adds	r4, #26
 80077da:	42b5      	cmp	r5, r6
 80077dc:	d11a      	bne.n	8007814 <_printf_common+0xc8>
 80077de:	2000      	movs	r0, #0
 80077e0:	e008      	b.n	80077f4 <_printf_common+0xa8>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4652      	mov	r2, sl
 80077e6:	4649      	mov	r1, r9
 80077e8:	4638      	mov	r0, r7
 80077ea:	47c0      	blx	r8
 80077ec:	3001      	adds	r0, #1
 80077ee:	d103      	bne.n	80077f8 <_printf_common+0xac>
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	3501      	adds	r5, #1
 80077fa:	e7c6      	b.n	800778a <_printf_common+0x3e>
 80077fc:	18e1      	adds	r1, r4, r3
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	2030      	movs	r0, #48	; 0x30
 8007802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007806:	4422      	add	r2, r4
 8007808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800780c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007810:	3302      	adds	r3, #2
 8007812:	e7c7      	b.n	80077a4 <_printf_common+0x58>
 8007814:	2301      	movs	r3, #1
 8007816:	4622      	mov	r2, r4
 8007818:	4649      	mov	r1, r9
 800781a:	4638      	mov	r0, r7
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d0e6      	beq.n	80077f0 <_printf_common+0xa4>
 8007822:	3601      	adds	r6, #1
 8007824:	e7d9      	b.n	80077da <_printf_common+0x8e>
	...

08007828 <_printf_i>:
 8007828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	7e0f      	ldrb	r7, [r1, #24]
 800782e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007830:	2f78      	cmp	r7, #120	; 0x78
 8007832:	4691      	mov	r9, r2
 8007834:	4680      	mov	r8, r0
 8007836:	460c      	mov	r4, r1
 8007838:	469a      	mov	sl, r3
 800783a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800783e:	d807      	bhi.n	8007850 <_printf_i+0x28>
 8007840:	2f62      	cmp	r7, #98	; 0x62
 8007842:	d80a      	bhi.n	800785a <_printf_i+0x32>
 8007844:	2f00      	cmp	r7, #0
 8007846:	f000 80d8 	beq.w	80079fa <_printf_i+0x1d2>
 800784a:	2f58      	cmp	r7, #88	; 0x58
 800784c:	f000 80a3 	beq.w	8007996 <_printf_i+0x16e>
 8007850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007858:	e03a      	b.n	80078d0 <_printf_i+0xa8>
 800785a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800785e:	2b15      	cmp	r3, #21
 8007860:	d8f6      	bhi.n	8007850 <_printf_i+0x28>
 8007862:	a101      	add	r1, pc, #4	; (adr r1, 8007868 <_printf_i+0x40>)
 8007864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007868:	080078c1 	.word	0x080078c1
 800786c:	080078d5 	.word	0x080078d5
 8007870:	08007851 	.word	0x08007851
 8007874:	08007851 	.word	0x08007851
 8007878:	08007851 	.word	0x08007851
 800787c:	08007851 	.word	0x08007851
 8007880:	080078d5 	.word	0x080078d5
 8007884:	08007851 	.word	0x08007851
 8007888:	08007851 	.word	0x08007851
 800788c:	08007851 	.word	0x08007851
 8007890:	08007851 	.word	0x08007851
 8007894:	080079e1 	.word	0x080079e1
 8007898:	08007905 	.word	0x08007905
 800789c:	080079c3 	.word	0x080079c3
 80078a0:	08007851 	.word	0x08007851
 80078a4:	08007851 	.word	0x08007851
 80078a8:	08007a03 	.word	0x08007a03
 80078ac:	08007851 	.word	0x08007851
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007851 	.word	0x08007851
 80078b8:	08007851 	.word	0x08007851
 80078bc:	080079cb 	.word	0x080079cb
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	1d1a      	adds	r2, r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	602a      	str	r2, [r5, #0]
 80078c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d0:	2301      	movs	r3, #1
 80078d2:	e0a3      	b.n	8007a1c <_printf_i+0x1f4>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	6829      	ldr	r1, [r5, #0]
 80078d8:	0606      	lsls	r6, r0, #24
 80078da:	f101 0304 	add.w	r3, r1, #4
 80078de:	d50a      	bpl.n	80078f6 <_printf_i+0xce>
 80078e0:	680e      	ldr	r6, [r1, #0]
 80078e2:	602b      	str	r3, [r5, #0]
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	da03      	bge.n	80078f0 <_printf_i+0xc8>
 80078e8:	232d      	movs	r3, #45	; 0x2d
 80078ea:	4276      	negs	r6, r6
 80078ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f0:	485e      	ldr	r0, [pc, #376]	; (8007a6c <_printf_i+0x244>)
 80078f2:	230a      	movs	r3, #10
 80078f4:	e019      	b.n	800792a <_printf_i+0x102>
 80078f6:	680e      	ldr	r6, [r1, #0]
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078fe:	bf18      	it	ne
 8007900:	b236      	sxthne	r6, r6
 8007902:	e7ef      	b.n	80078e4 <_printf_i+0xbc>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1d19      	adds	r1, r3, #4
 800790a:	6029      	str	r1, [r5, #0]
 800790c:	0601      	lsls	r1, r0, #24
 800790e:	d501      	bpl.n	8007914 <_printf_i+0xec>
 8007910:	681e      	ldr	r6, [r3, #0]
 8007912:	e002      	b.n	800791a <_printf_i+0xf2>
 8007914:	0646      	lsls	r6, r0, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0xe8>
 8007918:	881e      	ldrh	r6, [r3, #0]
 800791a:	4854      	ldr	r0, [pc, #336]	; (8007a6c <_printf_i+0x244>)
 800791c:	2f6f      	cmp	r7, #111	; 0x6f
 800791e:	bf0c      	ite	eq
 8007920:	2308      	moveq	r3, #8
 8007922:	230a      	movne	r3, #10
 8007924:	2100      	movs	r1, #0
 8007926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800792a:	6865      	ldr	r5, [r4, #4]
 800792c:	60a5      	str	r5, [r4, #8]
 800792e:	2d00      	cmp	r5, #0
 8007930:	bfa2      	ittt	ge
 8007932:	6821      	ldrge	r1, [r4, #0]
 8007934:	f021 0104 	bicge.w	r1, r1, #4
 8007938:	6021      	strge	r1, [r4, #0]
 800793a:	b90e      	cbnz	r6, 8007940 <_printf_i+0x118>
 800793c:	2d00      	cmp	r5, #0
 800793e:	d04d      	beq.n	80079dc <_printf_i+0x1b4>
 8007940:	4615      	mov	r5, r2
 8007942:	fbb6 f1f3 	udiv	r1, r6, r3
 8007946:	fb03 6711 	mls	r7, r3, r1, r6
 800794a:	5dc7      	ldrb	r7, [r0, r7]
 800794c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007950:	4637      	mov	r7, r6
 8007952:	42bb      	cmp	r3, r7
 8007954:	460e      	mov	r6, r1
 8007956:	d9f4      	bls.n	8007942 <_printf_i+0x11a>
 8007958:	2b08      	cmp	r3, #8
 800795a:	d10b      	bne.n	8007974 <_printf_i+0x14c>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	07de      	lsls	r6, r3, #31
 8007960:	d508      	bpl.n	8007974 <_printf_i+0x14c>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	4299      	cmp	r1, r3
 8007968:	bfde      	ittt	le
 800796a:	2330      	movle	r3, #48	; 0x30
 800796c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007970:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007974:	1b52      	subs	r2, r2, r5
 8007976:	6122      	str	r2, [r4, #16]
 8007978:	f8cd a000 	str.w	sl, [sp]
 800797c:	464b      	mov	r3, r9
 800797e:	aa03      	add	r2, sp, #12
 8007980:	4621      	mov	r1, r4
 8007982:	4640      	mov	r0, r8
 8007984:	f7ff fee2 	bl	800774c <_printf_common>
 8007988:	3001      	adds	r0, #1
 800798a:	d14c      	bne.n	8007a26 <_printf_i+0x1fe>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b004      	add	sp, #16
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	4835      	ldr	r0, [pc, #212]	; (8007a6c <_printf_i+0x244>)
 8007998:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800799c:	6829      	ldr	r1, [r5, #0]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079a4:	6029      	str	r1, [r5, #0]
 80079a6:	061d      	lsls	r5, r3, #24
 80079a8:	d514      	bpl.n	80079d4 <_printf_i+0x1ac>
 80079aa:	07df      	lsls	r7, r3, #31
 80079ac:	bf44      	itt	mi
 80079ae:	f043 0320 	orrmi.w	r3, r3, #32
 80079b2:	6023      	strmi	r3, [r4, #0]
 80079b4:	b91e      	cbnz	r6, 80079be <_printf_i+0x196>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	f023 0320 	bic.w	r3, r3, #32
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	2310      	movs	r3, #16
 80079c0:	e7b0      	b.n	8007924 <_printf_i+0xfc>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	f043 0320 	orr.w	r3, r3, #32
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	2378      	movs	r3, #120	; 0x78
 80079cc:	4828      	ldr	r0, [pc, #160]	; (8007a70 <_printf_i+0x248>)
 80079ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079d2:	e7e3      	b.n	800799c <_printf_i+0x174>
 80079d4:	0659      	lsls	r1, r3, #25
 80079d6:	bf48      	it	mi
 80079d8:	b2b6      	uxthmi	r6, r6
 80079da:	e7e6      	b.n	80079aa <_printf_i+0x182>
 80079dc:	4615      	mov	r5, r2
 80079de:	e7bb      	b.n	8007958 <_printf_i+0x130>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	6826      	ldr	r6, [r4, #0]
 80079e4:	6961      	ldr	r1, [r4, #20]
 80079e6:	1d18      	adds	r0, r3, #4
 80079e8:	6028      	str	r0, [r5, #0]
 80079ea:	0635      	lsls	r5, r6, #24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	d501      	bpl.n	80079f4 <_printf_i+0x1cc>
 80079f0:	6019      	str	r1, [r3, #0]
 80079f2:	e002      	b.n	80079fa <_printf_i+0x1d2>
 80079f4:	0670      	lsls	r0, r6, #25
 80079f6:	d5fb      	bpl.n	80079f0 <_printf_i+0x1c8>
 80079f8:	8019      	strh	r1, [r3, #0]
 80079fa:	2300      	movs	r3, #0
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	4615      	mov	r5, r2
 8007a00:	e7ba      	b.n	8007978 <_printf_i+0x150>
 8007a02:	682b      	ldr	r3, [r5, #0]
 8007a04:	1d1a      	adds	r2, r3, #4
 8007a06:	602a      	str	r2, [r5, #0]
 8007a08:	681d      	ldr	r5, [r3, #0]
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f7f8 fbee 	bl	80001f0 <memchr>
 8007a14:	b108      	cbz	r0, 8007a1a <_printf_i+0x1f2>
 8007a16:	1b40      	subs	r0, r0, r5
 8007a18:	6060      	str	r0, [r4, #4]
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a24:	e7a8      	b.n	8007978 <_printf_i+0x150>
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	47d0      	blx	sl
 8007a30:	3001      	adds	r0, #1
 8007a32:	d0ab      	beq.n	800798c <_printf_i+0x164>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	079b      	lsls	r3, r3, #30
 8007a38:	d413      	bmi.n	8007a62 <_printf_i+0x23a>
 8007a3a:	68e0      	ldr	r0, [r4, #12]
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	4298      	cmp	r0, r3
 8007a40:	bfb8      	it	lt
 8007a42:	4618      	movlt	r0, r3
 8007a44:	e7a4      	b.n	8007990 <_printf_i+0x168>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	47d0      	blx	sl
 8007a50:	3001      	adds	r0, #1
 8007a52:	d09b      	beq.n	800798c <_printf_i+0x164>
 8007a54:	3501      	adds	r5, #1
 8007a56:	68e3      	ldr	r3, [r4, #12]
 8007a58:	9903      	ldr	r1, [sp, #12]
 8007a5a:	1a5b      	subs	r3, r3, r1
 8007a5c:	42ab      	cmp	r3, r5
 8007a5e:	dcf2      	bgt.n	8007a46 <_printf_i+0x21e>
 8007a60:	e7eb      	b.n	8007a3a <_printf_i+0x212>
 8007a62:	2500      	movs	r5, #0
 8007a64:	f104 0619 	add.w	r6, r4, #25
 8007a68:	e7f5      	b.n	8007a56 <_printf_i+0x22e>
 8007a6a:	bf00      	nop
 8007a6c:	0800a2d6 	.word	0x0800a2d6
 8007a70:	0800a2e7 	.word	0x0800a2e7

08007a74 <cleanup_glue>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	460c      	mov	r4, r1
 8007a78:	6809      	ldr	r1, [r1, #0]
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	b109      	cbz	r1, 8007a82 <cleanup_glue+0xe>
 8007a7e:	f7ff fff9 	bl	8007a74 <cleanup_glue>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8a:	f001 bbf5 	b.w	8009278 <_free_r>
	...

08007a90 <_reclaim_reent>:
 8007a90:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <_reclaim_reent+0xb4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4283      	cmp	r3, r0
 8007a96:	b570      	push	{r4, r5, r6, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	d051      	beq.n	8007b40 <_reclaim_reent+0xb0>
 8007a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a9e:	b143      	cbz	r3, 8007ab2 <_reclaim_reent+0x22>
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d14a      	bne.n	8007b3c <_reclaim_reent+0xac>
 8007aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	b111      	cbz	r1, 8007ab2 <_reclaim_reent+0x22>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f001 fbe3 	bl	8009278 <_free_r>
 8007ab2:	6961      	ldr	r1, [r4, #20]
 8007ab4:	b111      	cbz	r1, 8007abc <_reclaim_reent+0x2c>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f001 fbde 	bl	8009278 <_free_r>
 8007abc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007abe:	b111      	cbz	r1, 8007ac6 <_reclaim_reent+0x36>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 fbd9 	bl	8009278 <_free_r>
 8007ac6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ac8:	b111      	cbz	r1, 8007ad0 <_reclaim_reent+0x40>
 8007aca:	4620      	mov	r0, r4
 8007acc:	f001 fbd4 	bl	8009278 <_free_r>
 8007ad0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ad2:	b111      	cbz	r1, 8007ada <_reclaim_reent+0x4a>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f001 fbcf 	bl	8009278 <_free_r>
 8007ada:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007adc:	b111      	cbz	r1, 8007ae4 <_reclaim_reent+0x54>
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f001 fbca 	bl	8009278 <_free_r>
 8007ae4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ae6:	b111      	cbz	r1, 8007aee <_reclaim_reent+0x5e>
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f001 fbc5 	bl	8009278 <_free_r>
 8007aee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007af0:	b111      	cbz	r1, 8007af8 <_reclaim_reent+0x68>
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fbc0 	bl	8009278 <_free_r>
 8007af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afa:	b111      	cbz	r1, 8007b02 <_reclaim_reent+0x72>
 8007afc:	4620      	mov	r0, r4
 8007afe:	f001 fbbb 	bl	8009278 <_free_r>
 8007b02:	69a3      	ldr	r3, [r4, #24]
 8007b04:	b1e3      	cbz	r3, 8007b40 <_reclaim_reent+0xb0>
 8007b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4798      	blx	r3
 8007b0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b0e:	b1b9      	cbz	r1, 8007b40 <_reclaim_reent+0xb0>
 8007b10:	4620      	mov	r0, r4
 8007b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b16:	f7ff bfad 	b.w	8007a74 <cleanup_glue>
 8007b1a:	5949      	ldr	r1, [r1, r5]
 8007b1c:	b941      	cbnz	r1, 8007b30 <_reclaim_reent+0xa0>
 8007b1e:	3504      	adds	r5, #4
 8007b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b22:	2d80      	cmp	r5, #128	; 0x80
 8007b24:	68d9      	ldr	r1, [r3, #12]
 8007b26:	d1f8      	bne.n	8007b1a <_reclaim_reent+0x8a>
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 fba5 	bl	8009278 <_free_r>
 8007b2e:	e7ba      	b.n	8007aa6 <_reclaim_reent+0x16>
 8007b30:	680e      	ldr	r6, [r1, #0]
 8007b32:	4620      	mov	r0, r4
 8007b34:	f001 fba0 	bl	8009278 <_free_r>
 8007b38:	4631      	mov	r1, r6
 8007b3a:	e7ef      	b.n	8007b1c <_reclaim_reent+0x8c>
 8007b3c:	2500      	movs	r5, #0
 8007b3e:	e7ef      	b.n	8007b20 <_reclaim_reent+0x90>
 8007b40:	bd70      	pop	{r4, r5, r6, pc}
 8007b42:	bf00      	nop
 8007b44:	20000010 	.word	0x20000010

08007b48 <_sbrk_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_sbrk_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7f9 ff2a 	bl	80019ac <_sbrk>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_sbrk_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_sbrk_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20004ccc 	.word	0x20004ccc

08007b68 <siprintf>:
 8007b68:	b40e      	push	{r1, r2, r3}
 8007b6a:	b500      	push	{lr}
 8007b6c:	b09c      	sub	sp, #112	; 0x70
 8007b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b70:	9002      	str	r0, [sp, #8]
 8007b72:	9006      	str	r0, [sp, #24]
 8007b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b78:	4809      	ldr	r0, [pc, #36]	; (8007ba0 <siprintf+0x38>)
 8007b7a:	9107      	str	r1, [sp, #28]
 8007b7c:	9104      	str	r1, [sp, #16]
 8007b7e:	4909      	ldr	r1, [pc, #36]	; (8007ba4 <siprintf+0x3c>)
 8007b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b84:	9105      	str	r1, [sp, #20]
 8007b86:	6800      	ldr	r0, [r0, #0]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	a902      	add	r1, sp, #8
 8007b8c:	f001 fc1c 	bl	80093c8 <_svfiprintf_r>
 8007b90:	9b02      	ldr	r3, [sp, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	b01c      	add	sp, #112	; 0x70
 8007b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b9c:	b003      	add	sp, #12
 8007b9e:	4770      	bx	lr
 8007ba0:	20000010 	.word	0x20000010
 8007ba4:	ffff0208 	.word	0xffff0208

08007ba8 <__sread>:
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	460c      	mov	r4, r1
 8007bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb0:	f001 fd0a 	bl	80095c8 <_read_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	bfab      	itete	ge
 8007bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bba:	89a3      	ldrhlt	r3, [r4, #12]
 8007bbc:	181b      	addge	r3, r3, r0
 8007bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bc2:	bfac      	ite	ge
 8007bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bc6:	81a3      	strhlt	r3, [r4, #12]
 8007bc8:	bd10      	pop	{r4, pc}

08007bca <__swrite>:
 8007bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bce:	461f      	mov	r7, r3
 8007bd0:	898b      	ldrh	r3, [r1, #12]
 8007bd2:	05db      	lsls	r3, r3, #23
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	4616      	mov	r6, r2
 8007bda:	d505      	bpl.n	8007be8 <__swrite+0x1e>
 8007bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be0:	2302      	movs	r3, #2
 8007be2:	2200      	movs	r2, #0
 8007be4:	f000 ff88 	bl	8008af8 <_lseek_r>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	f000 b817 	b.w	8007c30 <_write_r>

08007c02 <__sseek>:
 8007c02:	b510      	push	{r4, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0a:	f000 ff75 	bl	8008af8 <_lseek_r>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	bf15      	itete	ne
 8007c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c1e:	81a3      	strheq	r3, [r4, #12]
 8007c20:	bf18      	it	ne
 8007c22:	81a3      	strhne	r3, [r4, #12]
 8007c24:	bd10      	pop	{r4, pc}

08007c26 <__sclose>:
 8007c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2a:	f000 b813 	b.w	8007c54 <_close_r>
	...

08007c30 <_write_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_write_r+0x20>)
 8007c34:	4604      	mov	r4, r0
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	602a      	str	r2, [r5, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f7f9 fe63 	bl	800190a <_write>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_write_r+0x1e>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_write_r+0x1e>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20004ccc 	.word	0x20004ccc

08007c54 <_close_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_close_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f9 fe6f 	bl	8001942 <_close>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_close_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_close_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	20004ccc 	.word	0x20004ccc

08007c74 <quorem>:
 8007c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	6903      	ldr	r3, [r0, #16]
 8007c7a:	690c      	ldr	r4, [r1, #16]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f2c0 8081 	blt.w	8007d86 <quorem+0x112>
 8007c84:	3c01      	subs	r4, #1
 8007c86:	f101 0814 	add.w	r8, r1, #20
 8007c8a:	f100 0514 	add.w	r5, r0, #20
 8007c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cac:	d331      	bcc.n	8007d12 <quorem+0x9e>
 8007cae:	f04f 0e00 	mov.w	lr, #0
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	46ac      	mov	ip, r5
 8007cb6:	46f2      	mov	sl, lr
 8007cb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cbc:	b293      	uxth	r3, r2
 8007cbe:	fb06 e303 	mla	r3, r6, r3, lr
 8007cc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007ccc:	f8dc a000 	ldr.w	sl, [ip]
 8007cd0:	0c12      	lsrs	r2, r2, #16
 8007cd2:	fa13 f38a 	uxtah	r3, r3, sl
 8007cd6:	fb06 e202 	mla	r2, r6, r2, lr
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8007cf0:	4581      	cmp	r9, r0
 8007cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf6:	f84c 3b04 	str.w	r3, [ip], #4
 8007cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cfe:	d2db      	bcs.n	8007cb8 <quorem+0x44>
 8007d00:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d04:	b92b      	cbnz	r3, 8007d12 <quorem+0x9e>
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	d32e      	bcc.n	8007d6e <quorem+0xfa>
 8007d10:	613c      	str	r4, [r7, #16]
 8007d12:	4638      	mov	r0, r7
 8007d14:	f001 f998 	bl	8009048 <__mcmp>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	db24      	blt.n	8007d66 <quorem+0xf2>
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f04f 0c00 	mov.w	ip, #0
 8007d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d28:	f8d0 e000 	ldr.w	lr, [r0]
 8007d2c:	b293      	uxth	r3, r2
 8007d2e:	ebac 0303 	sub.w	r3, ip, r3
 8007d32:	0c12      	lsrs	r2, r2, #16
 8007d34:	fa13 f38e 	uxtah	r3, r3, lr
 8007d38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d46:	45c1      	cmp	r9, r8
 8007d48:	f840 3b04 	str.w	r3, [r0], #4
 8007d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d50:	d2e8      	bcs.n	8007d24 <quorem+0xb0>
 8007d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d5a:	b922      	cbnz	r2, 8007d66 <quorem+0xf2>
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	d30a      	bcc.n	8007d7a <quorem+0x106>
 8007d64:	613c      	str	r4, [r7, #16]
 8007d66:	4630      	mov	r0, r6
 8007d68:	b003      	add	sp, #12
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	3b04      	subs	r3, #4
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d1cc      	bne.n	8007d10 <quorem+0x9c>
 8007d76:	3c01      	subs	r4, #1
 8007d78:	e7c7      	b.n	8007d0a <quorem+0x96>
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d1f0      	bne.n	8007d64 <quorem+0xf0>
 8007d82:	3c01      	subs	r4, #1
 8007d84:	e7eb      	b.n	8007d5e <quorem+0xea>
 8007d86:	2000      	movs	r0, #0
 8007d88:	e7ee      	b.n	8007d68 <quorem+0xf4>
 8007d8a:	0000      	movs	r0, r0
 8007d8c:	0000      	movs	r0, r0
	...

08007d90 <_dtoa_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	ed2d 8b04 	vpush	{d8-d9}
 8007d98:	ec57 6b10 	vmov	r6, r7, d0
 8007d9c:	b093      	sub	sp, #76	; 0x4c
 8007d9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007da0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007da4:	9106      	str	r1, [sp, #24]
 8007da6:	ee10 aa10 	vmov	sl, s0
 8007daa:	4604      	mov	r4, r0
 8007dac:	9209      	str	r2, [sp, #36]	; 0x24
 8007dae:	930c      	str	r3, [sp, #48]	; 0x30
 8007db0:	46bb      	mov	fp, r7
 8007db2:	b975      	cbnz	r5, 8007dd2 <_dtoa_r+0x42>
 8007db4:	2010      	movs	r0, #16
 8007db6:	f000 feb1 	bl	8008b1c <malloc>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6260      	str	r0, [r4, #36]	; 0x24
 8007dbe:	b920      	cbnz	r0, 8007dca <_dtoa_r+0x3a>
 8007dc0:	4ba7      	ldr	r3, [pc, #668]	; (8008060 <_dtoa_r+0x2d0>)
 8007dc2:	21ea      	movs	r1, #234	; 0xea
 8007dc4:	48a7      	ldr	r0, [pc, #668]	; (8008064 <_dtoa_r+0x2d4>)
 8007dc6:	f001 fc11 	bl	80095ec <__assert_func>
 8007dca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dce:	6005      	str	r5, [r0, #0]
 8007dd0:	60c5      	str	r5, [r0, #12]
 8007dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd4:	6819      	ldr	r1, [r3, #0]
 8007dd6:	b151      	cbz	r1, 8007dee <_dtoa_r+0x5e>
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	604a      	str	r2, [r1, #4]
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4093      	lsls	r3, r2
 8007de0:	608b      	str	r3, [r1, #8]
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 feee 	bl	8008bc4 <_Bfree>
 8007de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	1e3b      	subs	r3, r7, #0
 8007df0:	bfaa      	itet	ge
 8007df2:	2300      	movge	r3, #0
 8007df4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007df8:	f8c8 3000 	strge.w	r3, [r8]
 8007dfc:	4b9a      	ldr	r3, [pc, #616]	; (8008068 <_dtoa_r+0x2d8>)
 8007dfe:	bfbc      	itt	lt
 8007e00:	2201      	movlt	r2, #1
 8007e02:	f8c8 2000 	strlt.w	r2, [r8]
 8007e06:	ea33 030b 	bics.w	r3, r3, fp
 8007e0a:	d11b      	bne.n	8007e44 <_dtoa_r+0xb4>
 8007e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e18:	4333      	orrs	r3, r6
 8007e1a:	f000 8592 	beq.w	8008942 <_dtoa_r+0xbb2>
 8007e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e20:	b963      	cbnz	r3, 8007e3c <_dtoa_r+0xac>
 8007e22:	4b92      	ldr	r3, [pc, #584]	; (800806c <_dtoa_r+0x2dc>)
 8007e24:	e022      	b.n	8007e6c <_dtoa_r+0xdc>
 8007e26:	4b92      	ldr	r3, [pc, #584]	; (8008070 <_dtoa_r+0x2e0>)
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	9801      	ldr	r0, [sp, #4]
 8007e32:	b013      	add	sp, #76	; 0x4c
 8007e34:	ecbd 8b04 	vpop	{d8-d9}
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	4b8b      	ldr	r3, [pc, #556]	; (800806c <_dtoa_r+0x2dc>)
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	3303      	adds	r3, #3
 8007e42:	e7f3      	b.n	8007e2c <_dtoa_r+0x9c>
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	4650      	mov	r0, sl
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f7f8 fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e50:	ec4b ab19 	vmov	d9, sl, fp
 8007e54:	4680      	mov	r8, r0
 8007e56:	b158      	cbz	r0, 8007e70 <_dtoa_r+0xe0>
 8007e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 856b 	beq.w	800893c <_dtoa_r+0xbac>
 8007e66:	4883      	ldr	r0, [pc, #524]	; (8008074 <_dtoa_r+0x2e4>)
 8007e68:	6018      	str	r0, [r3, #0]
 8007e6a:	1e43      	subs	r3, r0, #1
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	e7df      	b.n	8007e30 <_dtoa_r+0xa0>
 8007e70:	ec4b ab10 	vmov	d0, sl, fp
 8007e74:	aa10      	add	r2, sp, #64	; 0x40
 8007e76:	a911      	add	r1, sp, #68	; 0x44
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f001 f98b 	bl	8009194 <__d2b>
 8007e7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e82:	ee08 0a10 	vmov	s16, r0
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	f000 8084 	beq.w	8007f94 <_dtoa_r+0x204>
 8007e8c:	ee19 3a90 	vmov	r3, s19
 8007e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e98:	4656      	mov	r6, sl
 8007e9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ea2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007ea6:	4b74      	ldr	r3, [pc, #464]	; (8008078 <_dtoa_r+0x2e8>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 f9f3 	bl	8000298 <__aeabi_dsub>
 8007eb2:	a365      	add	r3, pc, #404	; (adr r3, 8008048 <_dtoa_r+0x2b8>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fba6 	bl	8000608 <__aeabi_dmul>
 8007ebc:	a364      	add	r3, pc, #400	; (adr r3, 8008050 <_dtoa_r+0x2c0>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 f9eb 	bl	800029c <__adddf3>
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	460f      	mov	r7, r1
 8007ecc:	f7f8 fb32 	bl	8000534 <__aeabi_i2d>
 8007ed0:	a361      	add	r3, pc, #388	; (adr r3, 8008058 <_dtoa_r+0x2c8>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fb97 	bl	8000608 <__aeabi_dmul>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 f9db 	bl	800029c <__adddf3>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	f7f8 fe3d 	bl	8000b68 <__aeabi_d2iz>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	9000      	str	r0, [sp, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 fdf8 	bl	8000aec <__aeabi_dcmplt>
 8007efc:	b150      	cbz	r0, 8007f14 <_dtoa_r+0x184>
 8007efe:	9800      	ldr	r0, [sp, #0]
 8007f00:	f7f8 fb18 	bl	8000534 <__aeabi_i2d>
 8007f04:	4632      	mov	r2, r6
 8007f06:	463b      	mov	r3, r7
 8007f08:	f7f8 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f0c:	b910      	cbnz	r0, 8007f14 <_dtoa_r+0x184>
 8007f0e:	9b00      	ldr	r3, [sp, #0]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	2b16      	cmp	r3, #22
 8007f18:	d85a      	bhi.n	8007fd0 <_dtoa_r+0x240>
 8007f1a:	9a00      	ldr	r2, [sp, #0]
 8007f1c:	4b57      	ldr	r3, [pc, #348]	; (800807c <_dtoa_r+0x2ec>)
 8007f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	ec51 0b19 	vmov	r0, r1, d9
 8007f2a:	f7f8 fddf 	bl	8000aec <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d050      	beq.n	8007fd4 <_dtoa_r+0x244>
 8007f32:	9b00      	ldr	r3, [sp, #0]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f3e:	1b5d      	subs	r5, r3, r5
 8007f40:	1e6b      	subs	r3, r5, #1
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	bf45      	ittet	mi
 8007f46:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f4a:	9304      	strmi	r3, [sp, #16]
 8007f4c:	2300      	movpl	r3, #0
 8007f4e:	2300      	movmi	r3, #0
 8007f50:	bf4c      	ite	mi
 8007f52:	9305      	strmi	r3, [sp, #20]
 8007f54:	9304      	strpl	r3, [sp, #16]
 8007f56:	9b00      	ldr	r3, [sp, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db3d      	blt.n	8007fd8 <_dtoa_r+0x248>
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	9a00      	ldr	r2, [sp, #0]
 8007f60:	920a      	str	r2, [sp, #40]	; 0x28
 8007f62:	4413      	add	r3, r2
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	2300      	movs	r3, #0
 8007f68:	9307      	str	r3, [sp, #28]
 8007f6a:	9b06      	ldr	r3, [sp, #24]
 8007f6c:	2b09      	cmp	r3, #9
 8007f6e:	f200 8089 	bhi.w	8008084 <_dtoa_r+0x2f4>
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	bfc4      	itt	gt
 8007f76:	3b04      	subgt	r3, #4
 8007f78:	9306      	strgt	r3, [sp, #24]
 8007f7a:	9b06      	ldr	r3, [sp, #24]
 8007f7c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f80:	bfcc      	ite	gt
 8007f82:	2500      	movgt	r5, #0
 8007f84:	2501      	movle	r5, #1
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	f200 8087 	bhi.w	800809a <_dtoa_r+0x30a>
 8007f8c:	e8df f003 	tbb	[pc, r3]
 8007f90:	59383a2d 	.word	0x59383a2d
 8007f94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f98:	441d      	add	r5, r3
 8007f9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	bfc1      	itttt	gt
 8007fa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007faa:	fa0b f303 	lslgt.w	r3, fp, r3
 8007fae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007fb2:	bfda      	itte	le
 8007fb4:	f1c3 0320 	rsble	r3, r3, #32
 8007fb8:	fa06 f003 	lslle.w	r0, r6, r3
 8007fbc:	4318      	orrgt	r0, r3
 8007fbe:	f7f8 faa9 	bl	8000514 <__aeabi_ui2d>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007fca:	3d01      	subs	r5, #1
 8007fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8007fce:	e76a      	b.n	8007ea6 <_dtoa_r+0x116>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7b2      	b.n	8007f3a <_dtoa_r+0x1aa>
 8007fd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fd6:	e7b1      	b.n	8007f3c <_dtoa_r+0x1ac>
 8007fd8:	9b04      	ldr	r3, [sp, #16]
 8007fda:	9a00      	ldr	r2, [sp, #0]
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	4253      	negs	r3, r2
 8007fe2:	9307      	str	r3, [sp, #28]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe8:	e7bf      	b.n	8007f6a <_dtoa_r+0x1da>
 8007fea:	2300      	movs	r3, #0
 8007fec:	9308      	str	r3, [sp, #32]
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dc55      	bgt.n	80080a0 <_dtoa_r+0x310>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffe:	e00c      	b.n	800801a <_dtoa_r+0x28a>
 8008000:	2301      	movs	r3, #1
 8008002:	e7f3      	b.n	8007fec <_dtoa_r+0x25c>
 8008004:	2300      	movs	r3, #0
 8008006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008008:	9308      	str	r3, [sp, #32]
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	4413      	add	r3, r2
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	3301      	adds	r3, #1
 8008012:	2b01      	cmp	r3, #1
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	bfb8      	it	lt
 8008018:	2301      	movlt	r3, #1
 800801a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800801c:	2200      	movs	r2, #0
 800801e:	6042      	str	r2, [r0, #4]
 8008020:	2204      	movs	r2, #4
 8008022:	f102 0614 	add.w	r6, r2, #20
 8008026:	429e      	cmp	r6, r3
 8008028:	6841      	ldr	r1, [r0, #4]
 800802a:	d93d      	bls.n	80080a8 <_dtoa_r+0x318>
 800802c:	4620      	mov	r0, r4
 800802e:	f000 fd89 	bl	8008b44 <_Balloc>
 8008032:	9001      	str	r0, [sp, #4]
 8008034:	2800      	cmp	r0, #0
 8008036:	d13b      	bne.n	80080b0 <_dtoa_r+0x320>
 8008038:	4b11      	ldr	r3, [pc, #68]	; (8008080 <_dtoa_r+0x2f0>)
 800803a:	4602      	mov	r2, r0
 800803c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008040:	e6c0      	b.n	8007dc4 <_dtoa_r+0x34>
 8008042:	2301      	movs	r3, #1
 8008044:	e7df      	b.n	8008006 <_dtoa_r+0x276>
 8008046:	bf00      	nop
 8008048:	636f4361 	.word	0x636f4361
 800804c:	3fd287a7 	.word	0x3fd287a7
 8008050:	8b60c8b3 	.word	0x8b60c8b3
 8008054:	3fc68a28 	.word	0x3fc68a28
 8008058:	509f79fb 	.word	0x509f79fb
 800805c:	3fd34413 	.word	0x3fd34413
 8008060:	0800a305 	.word	0x0800a305
 8008064:	0800a31c 	.word	0x0800a31c
 8008068:	7ff00000 	.word	0x7ff00000
 800806c:	0800a301 	.word	0x0800a301
 8008070:	0800a2f8 	.word	0x0800a2f8
 8008074:	0800a2d5 	.word	0x0800a2d5
 8008078:	3ff80000 	.word	0x3ff80000
 800807c:	0800a410 	.word	0x0800a410
 8008080:	0800a377 	.word	0x0800a377
 8008084:	2501      	movs	r5, #1
 8008086:	2300      	movs	r3, #0
 8008088:	9306      	str	r3, [sp, #24]
 800808a:	9508      	str	r5, [sp, #32]
 800808c:	f04f 33ff 	mov.w	r3, #4294967295
 8008090:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	2312      	movs	r3, #18
 8008098:	e7b0      	b.n	8007ffc <_dtoa_r+0x26c>
 800809a:	2301      	movs	r3, #1
 800809c:	9308      	str	r3, [sp, #32]
 800809e:	e7f5      	b.n	800808c <_dtoa_r+0x2fc>
 80080a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080a6:	e7b8      	b.n	800801a <_dtoa_r+0x28a>
 80080a8:	3101      	adds	r1, #1
 80080aa:	6041      	str	r1, [r0, #4]
 80080ac:	0052      	lsls	r2, r2, #1
 80080ae:	e7b8      	b.n	8008022 <_dtoa_r+0x292>
 80080b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b2:	9a01      	ldr	r2, [sp, #4]
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	2b0e      	cmp	r3, #14
 80080ba:	f200 809d 	bhi.w	80081f8 <_dtoa_r+0x468>
 80080be:	2d00      	cmp	r5, #0
 80080c0:	f000 809a 	beq.w	80081f8 <_dtoa_r+0x468>
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd32      	ble.n	8008130 <_dtoa_r+0x3a0>
 80080ca:	4ab7      	ldr	r2, [pc, #732]	; (80083a8 <_dtoa_r+0x618>)
 80080cc:	f003 030f 	and.w	r3, r3, #15
 80080d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080d8:	9b00      	ldr	r3, [sp, #0]
 80080da:	05d8      	lsls	r0, r3, #23
 80080dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80080e0:	d516      	bpl.n	8008110 <_dtoa_r+0x380>
 80080e2:	4bb2      	ldr	r3, [pc, #712]	; (80083ac <_dtoa_r+0x61c>)
 80080e4:	ec51 0b19 	vmov	r0, r1, d9
 80080e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080ec:	f7f8 fbb6 	bl	800085c <__aeabi_ddiv>
 80080f0:	f007 070f 	and.w	r7, r7, #15
 80080f4:	4682      	mov	sl, r0
 80080f6:	468b      	mov	fp, r1
 80080f8:	2503      	movs	r5, #3
 80080fa:	4eac      	ldr	r6, [pc, #688]	; (80083ac <_dtoa_r+0x61c>)
 80080fc:	b957      	cbnz	r7, 8008114 <_dtoa_r+0x384>
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	4650      	mov	r0, sl
 8008104:	4659      	mov	r1, fp
 8008106:	f7f8 fba9 	bl	800085c <__aeabi_ddiv>
 800810a:	4682      	mov	sl, r0
 800810c:	468b      	mov	fp, r1
 800810e:	e028      	b.n	8008162 <_dtoa_r+0x3d2>
 8008110:	2502      	movs	r5, #2
 8008112:	e7f2      	b.n	80080fa <_dtoa_r+0x36a>
 8008114:	07f9      	lsls	r1, r7, #31
 8008116:	d508      	bpl.n	800812a <_dtoa_r+0x39a>
 8008118:	4640      	mov	r0, r8
 800811a:	4649      	mov	r1, r9
 800811c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	3501      	adds	r5, #1
 8008126:	4680      	mov	r8, r0
 8008128:	4689      	mov	r9, r1
 800812a:	107f      	asrs	r7, r7, #1
 800812c:	3608      	adds	r6, #8
 800812e:	e7e5      	b.n	80080fc <_dtoa_r+0x36c>
 8008130:	f000 809b 	beq.w	800826a <_dtoa_r+0x4da>
 8008134:	9b00      	ldr	r3, [sp, #0]
 8008136:	4f9d      	ldr	r7, [pc, #628]	; (80083ac <_dtoa_r+0x61c>)
 8008138:	425e      	negs	r6, r3
 800813a:	4b9b      	ldr	r3, [pc, #620]	; (80083a8 <_dtoa_r+0x618>)
 800813c:	f006 020f 	and.w	r2, r6, #15
 8008140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	ec51 0b19 	vmov	r0, r1, d9
 800814c:	f7f8 fa5c 	bl	8000608 <__aeabi_dmul>
 8008150:	1136      	asrs	r6, r6, #4
 8008152:	4682      	mov	sl, r0
 8008154:	468b      	mov	fp, r1
 8008156:	2300      	movs	r3, #0
 8008158:	2502      	movs	r5, #2
 800815a:	2e00      	cmp	r6, #0
 800815c:	d17a      	bne.n	8008254 <_dtoa_r+0x4c4>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1d3      	bne.n	800810a <_dtoa_r+0x37a>
 8008162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8082 	beq.w	800826e <_dtoa_r+0x4de>
 800816a:	4b91      	ldr	r3, [pc, #580]	; (80083b0 <_dtoa_r+0x620>)
 800816c:	2200      	movs	r2, #0
 800816e:	4650      	mov	r0, sl
 8008170:	4659      	mov	r1, fp
 8008172:	f7f8 fcbb 	bl	8000aec <__aeabi_dcmplt>
 8008176:	2800      	cmp	r0, #0
 8008178:	d079      	beq.n	800826e <_dtoa_r+0x4de>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d076      	beq.n	800826e <_dtoa_r+0x4de>
 8008180:	9b02      	ldr	r3, [sp, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	dd36      	ble.n	80081f4 <_dtoa_r+0x464>
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	4650      	mov	r0, sl
 800818a:	4659      	mov	r1, fp
 800818c:	1e5f      	subs	r7, r3, #1
 800818e:	2200      	movs	r2, #0
 8008190:	4b88      	ldr	r3, [pc, #544]	; (80083b4 <_dtoa_r+0x624>)
 8008192:	f7f8 fa39 	bl	8000608 <__aeabi_dmul>
 8008196:	9e02      	ldr	r6, [sp, #8]
 8008198:	4682      	mov	sl, r0
 800819a:	468b      	mov	fp, r1
 800819c:	3501      	adds	r5, #1
 800819e:	4628      	mov	r0, r5
 80081a0:	f7f8 f9c8 	bl	8000534 <__aeabi_i2d>
 80081a4:	4652      	mov	r2, sl
 80081a6:	465b      	mov	r3, fp
 80081a8:	f7f8 fa2e 	bl	8000608 <__aeabi_dmul>
 80081ac:	4b82      	ldr	r3, [pc, #520]	; (80083b8 <_dtoa_r+0x628>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	f7f8 f874 	bl	800029c <__adddf3>
 80081b4:	46d0      	mov	r8, sl
 80081b6:	46d9      	mov	r9, fp
 80081b8:	4682      	mov	sl, r0
 80081ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80081be:	2e00      	cmp	r6, #0
 80081c0:	d158      	bne.n	8008274 <_dtoa_r+0x4e4>
 80081c2:	4b7e      	ldr	r3, [pc, #504]	; (80083bc <_dtoa_r+0x62c>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	4640      	mov	r0, r8
 80081c8:	4649      	mov	r1, r9
 80081ca:	f7f8 f865 	bl	8000298 <__aeabi_dsub>
 80081ce:	4652      	mov	r2, sl
 80081d0:	465b      	mov	r3, fp
 80081d2:	4680      	mov	r8, r0
 80081d4:	4689      	mov	r9, r1
 80081d6:	f7f8 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 80081da:	2800      	cmp	r0, #0
 80081dc:	f040 8295 	bne.w	800870a <_dtoa_r+0x97a>
 80081e0:	4652      	mov	r2, sl
 80081e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081e6:	4640      	mov	r0, r8
 80081e8:	4649      	mov	r1, r9
 80081ea:	f7f8 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f040 8289 	bne.w	8008706 <_dtoa_r+0x976>
 80081f4:	ec5b ab19 	vmov	sl, fp, d9
 80081f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f2c0 8148 	blt.w	8008490 <_dtoa_r+0x700>
 8008200:	9a00      	ldr	r2, [sp, #0]
 8008202:	2a0e      	cmp	r2, #14
 8008204:	f300 8144 	bgt.w	8008490 <_dtoa_r+0x700>
 8008208:	4b67      	ldr	r3, [pc, #412]	; (80083a8 <_dtoa_r+0x618>)
 800820a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800820e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	f280 80d5 	bge.w	80083c4 <_dtoa_r+0x634>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f300 80d1 	bgt.w	80083c4 <_dtoa_r+0x634>
 8008222:	f040 826f 	bne.w	8008704 <_dtoa_r+0x974>
 8008226:	4b65      	ldr	r3, [pc, #404]	; (80083bc <_dtoa_r+0x62c>)
 8008228:	2200      	movs	r2, #0
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	f7f8 f9eb 	bl	8000608 <__aeabi_dmul>
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	f7f8 fc6d 	bl	8000b14 <__aeabi_dcmpge>
 800823a:	9e03      	ldr	r6, [sp, #12]
 800823c:	4637      	mov	r7, r6
 800823e:	2800      	cmp	r0, #0
 8008240:	f040 8245 	bne.w	80086ce <_dtoa_r+0x93e>
 8008244:	9d01      	ldr	r5, [sp, #4]
 8008246:	2331      	movs	r3, #49	; 0x31
 8008248:	f805 3b01 	strb.w	r3, [r5], #1
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	e240      	b.n	80086d6 <_dtoa_r+0x946>
 8008254:	07f2      	lsls	r2, r6, #31
 8008256:	d505      	bpl.n	8008264 <_dtoa_r+0x4d4>
 8008258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825c:	f7f8 f9d4 	bl	8000608 <__aeabi_dmul>
 8008260:	3501      	adds	r5, #1
 8008262:	2301      	movs	r3, #1
 8008264:	1076      	asrs	r6, r6, #1
 8008266:	3708      	adds	r7, #8
 8008268:	e777      	b.n	800815a <_dtoa_r+0x3ca>
 800826a:	2502      	movs	r5, #2
 800826c:	e779      	b.n	8008162 <_dtoa_r+0x3d2>
 800826e:	9f00      	ldr	r7, [sp, #0]
 8008270:	9e03      	ldr	r6, [sp, #12]
 8008272:	e794      	b.n	800819e <_dtoa_r+0x40e>
 8008274:	9901      	ldr	r1, [sp, #4]
 8008276:	4b4c      	ldr	r3, [pc, #304]	; (80083a8 <_dtoa_r+0x618>)
 8008278:	4431      	add	r1, r6
 800827a:	910d      	str	r1, [sp, #52]	; 0x34
 800827c:	9908      	ldr	r1, [sp, #32]
 800827e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008286:	2900      	cmp	r1, #0
 8008288:	d043      	beq.n	8008312 <_dtoa_r+0x582>
 800828a:	494d      	ldr	r1, [pc, #308]	; (80083c0 <_dtoa_r+0x630>)
 800828c:	2000      	movs	r0, #0
 800828e:	f7f8 fae5 	bl	800085c <__aeabi_ddiv>
 8008292:	4652      	mov	r2, sl
 8008294:	465b      	mov	r3, fp
 8008296:	f7f7 ffff 	bl	8000298 <__aeabi_dsub>
 800829a:	9d01      	ldr	r5, [sp, #4]
 800829c:	4682      	mov	sl, r0
 800829e:	468b      	mov	fp, r1
 80082a0:	4649      	mov	r1, r9
 80082a2:	4640      	mov	r0, r8
 80082a4:	f7f8 fc60 	bl	8000b68 <__aeabi_d2iz>
 80082a8:	4606      	mov	r6, r0
 80082aa:	f7f8 f943 	bl	8000534 <__aeabi_i2d>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f7 ffef 	bl	8000298 <__aeabi_dsub>
 80082ba:	3630      	adds	r6, #48	; 0x30
 80082bc:	f805 6b01 	strb.w	r6, [r5], #1
 80082c0:	4652      	mov	r2, sl
 80082c2:	465b      	mov	r3, fp
 80082c4:	4680      	mov	r8, r0
 80082c6:	4689      	mov	r9, r1
 80082c8:	f7f8 fc10 	bl	8000aec <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d163      	bne.n	8008398 <_dtoa_r+0x608>
 80082d0:	4642      	mov	r2, r8
 80082d2:	464b      	mov	r3, r9
 80082d4:	4936      	ldr	r1, [pc, #216]	; (80083b0 <_dtoa_r+0x620>)
 80082d6:	2000      	movs	r0, #0
 80082d8:	f7f7 ffde 	bl	8000298 <__aeabi_dsub>
 80082dc:	4652      	mov	r2, sl
 80082de:	465b      	mov	r3, fp
 80082e0:	f7f8 fc04 	bl	8000aec <__aeabi_dcmplt>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	f040 80b5 	bne.w	8008454 <_dtoa_r+0x6c4>
 80082ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ec:	429d      	cmp	r5, r3
 80082ee:	d081      	beq.n	80081f4 <_dtoa_r+0x464>
 80082f0:	4b30      	ldr	r3, [pc, #192]	; (80083b4 <_dtoa_r+0x624>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	4650      	mov	r0, sl
 80082f6:	4659      	mov	r1, fp
 80082f8:	f7f8 f986 	bl	8000608 <__aeabi_dmul>
 80082fc:	4b2d      	ldr	r3, [pc, #180]	; (80083b4 <_dtoa_r+0x624>)
 80082fe:	4682      	mov	sl, r0
 8008300:	468b      	mov	fp, r1
 8008302:	4640      	mov	r0, r8
 8008304:	4649      	mov	r1, r9
 8008306:	2200      	movs	r2, #0
 8008308:	f7f8 f97e 	bl	8000608 <__aeabi_dmul>
 800830c:	4680      	mov	r8, r0
 800830e:	4689      	mov	r9, r1
 8008310:	e7c6      	b.n	80082a0 <_dtoa_r+0x510>
 8008312:	4650      	mov	r0, sl
 8008314:	4659      	mov	r1, fp
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831c:	9d01      	ldr	r5, [sp, #4]
 800831e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008320:	4682      	mov	sl, r0
 8008322:	468b      	mov	fp, r1
 8008324:	4649      	mov	r1, r9
 8008326:	4640      	mov	r0, r8
 8008328:	f7f8 fc1e 	bl	8000b68 <__aeabi_d2iz>
 800832c:	4606      	mov	r6, r0
 800832e:	f7f8 f901 	bl	8000534 <__aeabi_i2d>
 8008332:	3630      	adds	r6, #48	; 0x30
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4640      	mov	r0, r8
 800833a:	4649      	mov	r1, r9
 800833c:	f7f7 ffac 	bl	8000298 <__aeabi_dsub>
 8008340:	f805 6b01 	strb.w	r6, [r5], #1
 8008344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008346:	429d      	cmp	r5, r3
 8008348:	4680      	mov	r8, r0
 800834a:	4689      	mov	r9, r1
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	d124      	bne.n	800839c <_dtoa_r+0x60c>
 8008352:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <_dtoa_r+0x630>)
 8008354:	4650      	mov	r0, sl
 8008356:	4659      	mov	r1, fp
 8008358:	f7f7 ffa0 	bl	800029c <__adddf3>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4640      	mov	r0, r8
 8008362:	4649      	mov	r1, r9
 8008364:	f7f8 fbe0 	bl	8000b28 <__aeabi_dcmpgt>
 8008368:	2800      	cmp	r0, #0
 800836a:	d173      	bne.n	8008454 <_dtoa_r+0x6c4>
 800836c:	4652      	mov	r2, sl
 800836e:	465b      	mov	r3, fp
 8008370:	4913      	ldr	r1, [pc, #76]	; (80083c0 <_dtoa_r+0x630>)
 8008372:	2000      	movs	r0, #0
 8008374:	f7f7 ff90 	bl	8000298 <__aeabi_dsub>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4640      	mov	r0, r8
 800837e:	4649      	mov	r1, r9
 8008380:	f7f8 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f af35 	beq.w	80081f4 <_dtoa_r+0x464>
 800838a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800838c:	1e6b      	subs	r3, r5, #1
 800838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008390:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d0f8      	beq.n	800838a <_dtoa_r+0x5fa>
 8008398:	9700      	str	r7, [sp, #0]
 800839a:	e049      	b.n	8008430 <_dtoa_r+0x6a0>
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <_dtoa_r+0x624>)
 800839e:	f7f8 f933 	bl	8000608 <__aeabi_dmul>
 80083a2:	4680      	mov	r8, r0
 80083a4:	4689      	mov	r9, r1
 80083a6:	e7bd      	b.n	8008324 <_dtoa_r+0x594>
 80083a8:	0800a410 	.word	0x0800a410
 80083ac:	0800a3e8 	.word	0x0800a3e8
 80083b0:	3ff00000 	.word	0x3ff00000
 80083b4:	40240000 	.word	0x40240000
 80083b8:	401c0000 	.word	0x401c0000
 80083bc:	40140000 	.word	0x40140000
 80083c0:	3fe00000 	.word	0x3fe00000
 80083c4:	9d01      	ldr	r5, [sp, #4]
 80083c6:	4656      	mov	r6, sl
 80083c8:	465f      	mov	r7, fp
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	f7f8 fa43 	bl	800085c <__aeabi_ddiv>
 80083d6:	f7f8 fbc7 	bl	8000b68 <__aeabi_d2iz>
 80083da:	4682      	mov	sl, r0
 80083dc:	f7f8 f8aa 	bl	8000534 <__aeabi_i2d>
 80083e0:	4642      	mov	r2, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	f7f8 f910 	bl	8000608 <__aeabi_dmul>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80083f4:	f7f7 ff50 	bl	8000298 <__aeabi_dsub>
 80083f8:	f805 6b01 	strb.w	r6, [r5], #1
 80083fc:	9e01      	ldr	r6, [sp, #4]
 80083fe:	9f03      	ldr	r7, [sp, #12]
 8008400:	1bae      	subs	r6, r5, r6
 8008402:	42b7      	cmp	r7, r6
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	d135      	bne.n	8008476 <_dtoa_r+0x6e6>
 800840a:	f7f7 ff47 	bl	800029c <__adddf3>
 800840e:	4642      	mov	r2, r8
 8008410:	464b      	mov	r3, r9
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	f7f8 fb87 	bl	8000b28 <__aeabi_dcmpgt>
 800841a:	b9d0      	cbnz	r0, 8008452 <_dtoa_r+0x6c2>
 800841c:	4642      	mov	r2, r8
 800841e:	464b      	mov	r3, r9
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f7f8 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008428:	b110      	cbz	r0, 8008430 <_dtoa_r+0x6a0>
 800842a:	f01a 0f01 	tst.w	sl, #1
 800842e:	d110      	bne.n	8008452 <_dtoa_r+0x6c2>
 8008430:	4620      	mov	r0, r4
 8008432:	ee18 1a10 	vmov	r1, s16
 8008436:	f000 fbc5 	bl	8008bc4 <_Bfree>
 800843a:	2300      	movs	r3, #0
 800843c:	9800      	ldr	r0, [sp, #0]
 800843e:	702b      	strb	r3, [r5, #0]
 8008440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008442:	3001      	adds	r0, #1
 8008444:	6018      	str	r0, [r3, #0]
 8008446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008448:	2b00      	cmp	r3, #0
 800844a:	f43f acf1 	beq.w	8007e30 <_dtoa_r+0xa0>
 800844e:	601d      	str	r5, [r3, #0]
 8008450:	e4ee      	b.n	8007e30 <_dtoa_r+0xa0>
 8008452:	9f00      	ldr	r7, [sp, #0]
 8008454:	462b      	mov	r3, r5
 8008456:	461d      	mov	r5, r3
 8008458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800845c:	2a39      	cmp	r2, #57	; 0x39
 800845e:	d106      	bne.n	800846e <_dtoa_r+0x6de>
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d1f7      	bne.n	8008456 <_dtoa_r+0x6c6>
 8008466:	9901      	ldr	r1, [sp, #4]
 8008468:	2230      	movs	r2, #48	; 0x30
 800846a:	3701      	adds	r7, #1
 800846c:	700a      	strb	r2, [r1, #0]
 800846e:	781a      	ldrb	r2, [r3, #0]
 8008470:	3201      	adds	r2, #1
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	e790      	b.n	8008398 <_dtoa_r+0x608>
 8008476:	4ba6      	ldr	r3, [pc, #664]	; (8008710 <_dtoa_r+0x980>)
 8008478:	2200      	movs	r2, #0
 800847a:	f7f8 f8c5 	bl	8000608 <__aeabi_dmul>
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	4606      	mov	r6, r0
 8008484:	460f      	mov	r7, r1
 8008486:	f7f8 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800848a:	2800      	cmp	r0, #0
 800848c:	d09d      	beq.n	80083ca <_dtoa_r+0x63a>
 800848e:	e7cf      	b.n	8008430 <_dtoa_r+0x6a0>
 8008490:	9a08      	ldr	r2, [sp, #32]
 8008492:	2a00      	cmp	r2, #0
 8008494:	f000 80d7 	beq.w	8008646 <_dtoa_r+0x8b6>
 8008498:	9a06      	ldr	r2, [sp, #24]
 800849a:	2a01      	cmp	r2, #1
 800849c:	f300 80ba 	bgt.w	8008614 <_dtoa_r+0x884>
 80084a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	f000 80b2 	beq.w	800860c <_dtoa_r+0x87c>
 80084a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084ac:	9e07      	ldr	r6, [sp, #28]
 80084ae:	9d04      	ldr	r5, [sp, #16]
 80084b0:	9a04      	ldr	r2, [sp, #16]
 80084b2:	441a      	add	r2, r3
 80084b4:	9204      	str	r2, [sp, #16]
 80084b6:	9a05      	ldr	r2, [sp, #20]
 80084b8:	2101      	movs	r1, #1
 80084ba:	441a      	add	r2, r3
 80084bc:	4620      	mov	r0, r4
 80084be:	9205      	str	r2, [sp, #20]
 80084c0:	f000 fc38 	bl	8008d34 <__i2b>
 80084c4:	4607      	mov	r7, r0
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	dd0c      	ble.n	80084e4 <_dtoa_r+0x754>
 80084ca:	9b05      	ldr	r3, [sp, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	dd09      	ble.n	80084e4 <_dtoa_r+0x754>
 80084d0:	42ab      	cmp	r3, r5
 80084d2:	9a04      	ldr	r2, [sp, #16]
 80084d4:	bfa8      	it	ge
 80084d6:	462b      	movge	r3, r5
 80084d8:	1ad2      	subs	r2, r2, r3
 80084da:	9204      	str	r2, [sp, #16]
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	1aed      	subs	r5, r5, r3
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	9305      	str	r3, [sp, #20]
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	b31b      	cbz	r3, 8008530 <_dtoa_r+0x7a0>
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80af 	beq.w	800864e <_dtoa_r+0x8be>
 80084f0:	2e00      	cmp	r6, #0
 80084f2:	dd13      	ble.n	800851c <_dtoa_r+0x78c>
 80084f4:	4639      	mov	r1, r7
 80084f6:	4632      	mov	r2, r6
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fcdb 	bl	8008eb4 <__pow5mult>
 80084fe:	ee18 2a10 	vmov	r2, s16
 8008502:	4601      	mov	r1, r0
 8008504:	4607      	mov	r7, r0
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fc2a 	bl	8008d60 <__multiply>
 800850c:	ee18 1a10 	vmov	r1, s16
 8008510:	4680      	mov	r8, r0
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fb56 	bl	8008bc4 <_Bfree>
 8008518:	ee08 8a10 	vmov	s16, r8
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	1b9a      	subs	r2, r3, r6
 8008520:	d006      	beq.n	8008530 <_dtoa_r+0x7a0>
 8008522:	ee18 1a10 	vmov	r1, s16
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fcc4 	bl	8008eb4 <__pow5mult>
 800852c:	ee08 0a10 	vmov	s16, r0
 8008530:	2101      	movs	r1, #1
 8008532:	4620      	mov	r0, r4
 8008534:	f000 fbfe 	bl	8008d34 <__i2b>
 8008538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	4606      	mov	r6, r0
 800853e:	f340 8088 	ble.w	8008652 <_dtoa_r+0x8c2>
 8008542:	461a      	mov	r2, r3
 8008544:	4601      	mov	r1, r0
 8008546:	4620      	mov	r0, r4
 8008548:	f000 fcb4 	bl	8008eb4 <__pow5mult>
 800854c:	9b06      	ldr	r3, [sp, #24]
 800854e:	2b01      	cmp	r3, #1
 8008550:	4606      	mov	r6, r0
 8008552:	f340 8081 	ble.w	8008658 <_dtoa_r+0x8c8>
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	6933      	ldr	r3, [r6, #16]
 800855c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008560:	6918      	ldr	r0, [r3, #16]
 8008562:	f000 fb97 	bl	8008c94 <__hi0bits>
 8008566:	f1c0 0020 	rsb	r0, r0, #32
 800856a:	9b05      	ldr	r3, [sp, #20]
 800856c:	4418      	add	r0, r3
 800856e:	f010 001f 	ands.w	r0, r0, #31
 8008572:	f000 8092 	beq.w	800869a <_dtoa_r+0x90a>
 8008576:	f1c0 0320 	rsb	r3, r0, #32
 800857a:	2b04      	cmp	r3, #4
 800857c:	f340 808a 	ble.w	8008694 <_dtoa_r+0x904>
 8008580:	f1c0 001c 	rsb	r0, r0, #28
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	4403      	add	r3, r0
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	4403      	add	r3, r0
 800858e:	4405      	add	r5, r0
 8008590:	9305      	str	r3, [sp, #20]
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd07      	ble.n	80085a8 <_dtoa_r+0x818>
 8008598:	ee18 1a10 	vmov	r1, s16
 800859c:	461a      	mov	r2, r3
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fce2 	bl	8008f68 <__lshift>
 80085a4:	ee08 0a10 	vmov	s16, r0
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd05      	ble.n	80085ba <_dtoa_r+0x82a>
 80085ae:	4631      	mov	r1, r6
 80085b0:	461a      	mov	r2, r3
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fcd8 	bl	8008f68 <__lshift>
 80085b8:	4606      	mov	r6, r0
 80085ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d06e      	beq.n	800869e <_dtoa_r+0x90e>
 80085c0:	ee18 0a10 	vmov	r0, s16
 80085c4:	4631      	mov	r1, r6
 80085c6:	f000 fd3f 	bl	8009048 <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	da67      	bge.n	800869e <_dtoa_r+0x90e>
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	ee18 1a10 	vmov	r1, s16
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	220a      	movs	r2, #10
 80085da:	2300      	movs	r3, #0
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fb13 	bl	8008c08 <__multadd>
 80085e2:	9b08      	ldr	r3, [sp, #32]
 80085e4:	ee08 0a10 	vmov	s16, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 81b1 	beq.w	8008950 <_dtoa_r+0xbc0>
 80085ee:	2300      	movs	r3, #0
 80085f0:	4639      	mov	r1, r7
 80085f2:	220a      	movs	r2, #10
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fb07 	bl	8008c08 <__multadd>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	4607      	mov	r7, r0
 8008600:	f300 808e 	bgt.w	8008720 <_dtoa_r+0x990>
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	2b02      	cmp	r3, #2
 8008608:	dc51      	bgt.n	80086ae <_dtoa_r+0x91e>
 800860a:	e089      	b.n	8008720 <_dtoa_r+0x990>
 800860c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800860e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008612:	e74b      	b.n	80084ac <_dtoa_r+0x71c>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	1e5e      	subs	r6, r3, #1
 8008618:	9b07      	ldr	r3, [sp, #28]
 800861a:	42b3      	cmp	r3, r6
 800861c:	bfbf      	itttt	lt
 800861e:	9b07      	ldrlt	r3, [sp, #28]
 8008620:	9607      	strlt	r6, [sp, #28]
 8008622:	1af2      	sublt	r2, r6, r3
 8008624:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008626:	bfb6      	itet	lt
 8008628:	189b      	addlt	r3, r3, r2
 800862a:	1b9e      	subge	r6, r3, r6
 800862c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	bfb8      	it	lt
 8008632:	2600      	movlt	r6, #0
 8008634:	2b00      	cmp	r3, #0
 8008636:	bfb7      	itett	lt
 8008638:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800863c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008640:	1a9d      	sublt	r5, r3, r2
 8008642:	2300      	movlt	r3, #0
 8008644:	e734      	b.n	80084b0 <_dtoa_r+0x720>
 8008646:	9e07      	ldr	r6, [sp, #28]
 8008648:	9d04      	ldr	r5, [sp, #16]
 800864a:	9f08      	ldr	r7, [sp, #32]
 800864c:	e73b      	b.n	80084c6 <_dtoa_r+0x736>
 800864e:	9a07      	ldr	r2, [sp, #28]
 8008650:	e767      	b.n	8008522 <_dtoa_r+0x792>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	2b01      	cmp	r3, #1
 8008656:	dc18      	bgt.n	800868a <_dtoa_r+0x8fa>
 8008658:	f1ba 0f00 	cmp.w	sl, #0
 800865c:	d115      	bne.n	800868a <_dtoa_r+0x8fa>
 800865e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008662:	b993      	cbnz	r3, 800868a <_dtoa_r+0x8fa>
 8008664:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008668:	0d1b      	lsrs	r3, r3, #20
 800866a:	051b      	lsls	r3, r3, #20
 800866c:	b183      	cbz	r3, 8008690 <_dtoa_r+0x900>
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	3301      	adds	r3, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	9b05      	ldr	r3, [sp, #20]
 8008676:	3301      	adds	r3, #1
 8008678:	9305      	str	r3, [sp, #20]
 800867a:	f04f 0801 	mov.w	r8, #1
 800867e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008680:	2b00      	cmp	r3, #0
 8008682:	f47f af6a 	bne.w	800855a <_dtoa_r+0x7ca>
 8008686:	2001      	movs	r0, #1
 8008688:	e76f      	b.n	800856a <_dtoa_r+0x7da>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	e7f6      	b.n	800867e <_dtoa_r+0x8ee>
 8008690:	4698      	mov	r8, r3
 8008692:	e7f4      	b.n	800867e <_dtoa_r+0x8ee>
 8008694:	f43f af7d 	beq.w	8008592 <_dtoa_r+0x802>
 8008698:	4618      	mov	r0, r3
 800869a:	301c      	adds	r0, #28
 800869c:	e772      	b.n	8008584 <_dtoa_r+0x7f4>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dc37      	bgt.n	8008714 <_dtoa_r+0x984>
 80086a4:	9b06      	ldr	r3, [sp, #24]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	dd34      	ble.n	8008714 <_dtoa_r+0x984>
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	9302      	str	r3, [sp, #8]
 80086ae:	9b02      	ldr	r3, [sp, #8]
 80086b0:	b96b      	cbnz	r3, 80086ce <_dtoa_r+0x93e>
 80086b2:	4631      	mov	r1, r6
 80086b4:	2205      	movs	r2, #5
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 faa6 	bl	8008c08 <__multadd>
 80086bc:	4601      	mov	r1, r0
 80086be:	4606      	mov	r6, r0
 80086c0:	ee18 0a10 	vmov	r0, s16
 80086c4:	f000 fcc0 	bl	8009048 <__mcmp>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	f73f adbb 	bgt.w	8008244 <_dtoa_r+0x4b4>
 80086ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d0:	9d01      	ldr	r5, [sp, #4]
 80086d2:	43db      	mvns	r3, r3
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	f04f 0800 	mov.w	r8, #0
 80086da:	4631      	mov	r1, r6
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fa71 	bl	8008bc4 <_Bfree>
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	f43f aea4 	beq.w	8008430 <_dtoa_r+0x6a0>
 80086e8:	f1b8 0f00 	cmp.w	r8, #0
 80086ec:	d005      	beq.n	80086fa <_dtoa_r+0x96a>
 80086ee:	45b8      	cmp	r8, r7
 80086f0:	d003      	beq.n	80086fa <_dtoa_r+0x96a>
 80086f2:	4641      	mov	r1, r8
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 fa65 	bl	8008bc4 <_Bfree>
 80086fa:	4639      	mov	r1, r7
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fa61 	bl	8008bc4 <_Bfree>
 8008702:	e695      	b.n	8008430 <_dtoa_r+0x6a0>
 8008704:	2600      	movs	r6, #0
 8008706:	4637      	mov	r7, r6
 8008708:	e7e1      	b.n	80086ce <_dtoa_r+0x93e>
 800870a:	9700      	str	r7, [sp, #0]
 800870c:	4637      	mov	r7, r6
 800870e:	e599      	b.n	8008244 <_dtoa_r+0x4b4>
 8008710:	40240000 	.word	0x40240000
 8008714:	9b08      	ldr	r3, [sp, #32]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80ca 	beq.w	80088b0 <_dtoa_r+0xb20>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	2d00      	cmp	r5, #0
 8008722:	dd05      	ble.n	8008730 <_dtoa_r+0x9a0>
 8008724:	4639      	mov	r1, r7
 8008726:	462a      	mov	r2, r5
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fc1d 	bl	8008f68 <__lshift>
 800872e:	4607      	mov	r7, r0
 8008730:	f1b8 0f00 	cmp.w	r8, #0
 8008734:	d05b      	beq.n	80087ee <_dtoa_r+0xa5e>
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fa03 	bl	8008b44 <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b928      	cbnz	r0, 800874e <_dtoa_r+0x9be>
 8008742:	4b87      	ldr	r3, [pc, #540]	; (8008960 <_dtoa_r+0xbd0>)
 8008744:	4602      	mov	r2, r0
 8008746:	f240 21ea 	movw	r1, #746	; 0x2ea
 800874a:	f7ff bb3b 	b.w	8007dc4 <_dtoa_r+0x34>
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	3202      	adds	r2, #2
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	f107 010c 	add.w	r1, r7, #12
 8008758:	300c      	adds	r0, #12
 800875a:	f7fe fc76 	bl	800704a <memcpy>
 800875e:	2201      	movs	r2, #1
 8008760:	4629      	mov	r1, r5
 8008762:	4620      	mov	r0, r4
 8008764:	f000 fc00 	bl	8008f68 <__lshift>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	f103 0901 	add.w	r9, r3, #1
 800876e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008772:	4413      	add	r3, r2
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	f00a 0301 	and.w	r3, sl, #1
 800877a:	46b8      	mov	r8, r7
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	4607      	mov	r7, r0
 8008780:	4631      	mov	r1, r6
 8008782:	ee18 0a10 	vmov	r0, s16
 8008786:	f7ff fa75 	bl	8007c74 <quorem>
 800878a:	4641      	mov	r1, r8
 800878c:	9002      	str	r0, [sp, #8]
 800878e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008792:	ee18 0a10 	vmov	r0, s16
 8008796:	f000 fc57 	bl	8009048 <__mcmp>
 800879a:	463a      	mov	r2, r7
 800879c:	9003      	str	r0, [sp, #12]
 800879e:	4631      	mov	r1, r6
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fc6d 	bl	8009080 <__mdiff>
 80087a6:	68c2      	ldr	r2, [r0, #12]
 80087a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80087ac:	4605      	mov	r5, r0
 80087ae:	bb02      	cbnz	r2, 80087f2 <_dtoa_r+0xa62>
 80087b0:	4601      	mov	r1, r0
 80087b2:	ee18 0a10 	vmov	r0, s16
 80087b6:	f000 fc47 	bl	8009048 <__mcmp>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4629      	mov	r1, r5
 80087be:	4620      	mov	r0, r4
 80087c0:	9207      	str	r2, [sp, #28]
 80087c2:	f000 f9ff 	bl	8008bc4 <_Bfree>
 80087c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80087ca:	ea43 0102 	orr.w	r1, r3, r2
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	430b      	orrs	r3, r1
 80087d2:	464d      	mov	r5, r9
 80087d4:	d10f      	bne.n	80087f6 <_dtoa_r+0xa66>
 80087d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087da:	d02a      	beq.n	8008832 <_dtoa_r+0xaa2>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dd02      	ble.n	80087e8 <_dtoa_r+0xa58>
 80087e2:	9b02      	ldr	r3, [sp, #8]
 80087e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80087e8:	f88b a000 	strb.w	sl, [fp]
 80087ec:	e775      	b.n	80086da <_dtoa_r+0x94a>
 80087ee:	4638      	mov	r0, r7
 80087f0:	e7ba      	b.n	8008768 <_dtoa_r+0x9d8>
 80087f2:	2201      	movs	r2, #1
 80087f4:	e7e2      	b.n	80087bc <_dtoa_r+0xa2c>
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	db04      	blt.n	8008806 <_dtoa_r+0xa76>
 80087fc:	9906      	ldr	r1, [sp, #24]
 80087fe:	430b      	orrs	r3, r1
 8008800:	9904      	ldr	r1, [sp, #16]
 8008802:	430b      	orrs	r3, r1
 8008804:	d122      	bne.n	800884c <_dtoa_r+0xabc>
 8008806:	2a00      	cmp	r2, #0
 8008808:	ddee      	ble.n	80087e8 <_dtoa_r+0xa58>
 800880a:	ee18 1a10 	vmov	r1, s16
 800880e:	2201      	movs	r2, #1
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fba9 	bl	8008f68 <__lshift>
 8008816:	4631      	mov	r1, r6
 8008818:	ee08 0a10 	vmov	s16, r0
 800881c:	f000 fc14 	bl	8009048 <__mcmp>
 8008820:	2800      	cmp	r0, #0
 8008822:	dc03      	bgt.n	800882c <_dtoa_r+0xa9c>
 8008824:	d1e0      	bne.n	80087e8 <_dtoa_r+0xa58>
 8008826:	f01a 0f01 	tst.w	sl, #1
 800882a:	d0dd      	beq.n	80087e8 <_dtoa_r+0xa58>
 800882c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008830:	d1d7      	bne.n	80087e2 <_dtoa_r+0xa52>
 8008832:	2339      	movs	r3, #57	; 0x39
 8008834:	f88b 3000 	strb.w	r3, [fp]
 8008838:	462b      	mov	r3, r5
 800883a:	461d      	mov	r5, r3
 800883c:	3b01      	subs	r3, #1
 800883e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008842:	2a39      	cmp	r2, #57	; 0x39
 8008844:	d071      	beq.n	800892a <_dtoa_r+0xb9a>
 8008846:	3201      	adds	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	e746      	b.n	80086da <_dtoa_r+0x94a>
 800884c:	2a00      	cmp	r2, #0
 800884e:	dd07      	ble.n	8008860 <_dtoa_r+0xad0>
 8008850:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008854:	d0ed      	beq.n	8008832 <_dtoa_r+0xaa2>
 8008856:	f10a 0301 	add.w	r3, sl, #1
 800885a:	f88b 3000 	strb.w	r3, [fp]
 800885e:	e73c      	b.n	80086da <_dtoa_r+0x94a>
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008866:	4599      	cmp	r9, r3
 8008868:	d047      	beq.n	80088fa <_dtoa_r+0xb6a>
 800886a:	ee18 1a10 	vmov	r1, s16
 800886e:	2300      	movs	r3, #0
 8008870:	220a      	movs	r2, #10
 8008872:	4620      	mov	r0, r4
 8008874:	f000 f9c8 	bl	8008c08 <__multadd>
 8008878:	45b8      	cmp	r8, r7
 800887a:	ee08 0a10 	vmov	s16, r0
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	f04f 020a 	mov.w	r2, #10
 8008886:	4641      	mov	r1, r8
 8008888:	4620      	mov	r0, r4
 800888a:	d106      	bne.n	800889a <_dtoa_r+0xb0a>
 800888c:	f000 f9bc 	bl	8008c08 <__multadd>
 8008890:	4680      	mov	r8, r0
 8008892:	4607      	mov	r7, r0
 8008894:	f109 0901 	add.w	r9, r9, #1
 8008898:	e772      	b.n	8008780 <_dtoa_r+0x9f0>
 800889a:	f000 f9b5 	bl	8008c08 <__multadd>
 800889e:	4639      	mov	r1, r7
 80088a0:	4680      	mov	r8, r0
 80088a2:	2300      	movs	r3, #0
 80088a4:	220a      	movs	r2, #10
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 f9ae 	bl	8008c08 <__multadd>
 80088ac:	4607      	mov	r7, r0
 80088ae:	e7f1      	b.n	8008894 <_dtoa_r+0xb04>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	9302      	str	r3, [sp, #8]
 80088b4:	9d01      	ldr	r5, [sp, #4]
 80088b6:	ee18 0a10 	vmov	r0, s16
 80088ba:	4631      	mov	r1, r6
 80088bc:	f7ff f9da 	bl	8007c74 <quorem>
 80088c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088c4:	9b01      	ldr	r3, [sp, #4]
 80088c6:	f805 ab01 	strb.w	sl, [r5], #1
 80088ca:	1aea      	subs	r2, r5, r3
 80088cc:	9b02      	ldr	r3, [sp, #8]
 80088ce:	4293      	cmp	r3, r2
 80088d0:	dd09      	ble.n	80088e6 <_dtoa_r+0xb56>
 80088d2:	ee18 1a10 	vmov	r1, s16
 80088d6:	2300      	movs	r3, #0
 80088d8:	220a      	movs	r2, #10
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 f994 	bl	8008c08 <__multadd>
 80088e0:	ee08 0a10 	vmov	s16, r0
 80088e4:	e7e7      	b.n	80088b6 <_dtoa_r+0xb26>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfc8      	it	gt
 80088ec:	461d      	movgt	r5, r3
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	bfd8      	it	le
 80088f2:	2501      	movle	r5, #1
 80088f4:	441d      	add	r5, r3
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	ee18 1a10 	vmov	r1, s16
 80088fe:	2201      	movs	r2, #1
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fb31 	bl	8008f68 <__lshift>
 8008906:	4631      	mov	r1, r6
 8008908:	ee08 0a10 	vmov	s16, r0
 800890c:	f000 fb9c 	bl	8009048 <__mcmp>
 8008910:	2800      	cmp	r0, #0
 8008912:	dc91      	bgt.n	8008838 <_dtoa_r+0xaa8>
 8008914:	d102      	bne.n	800891c <_dtoa_r+0xb8c>
 8008916:	f01a 0f01 	tst.w	sl, #1
 800891a:	d18d      	bne.n	8008838 <_dtoa_r+0xaa8>
 800891c:	462b      	mov	r3, r5
 800891e:	461d      	mov	r5, r3
 8008920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008924:	2a30      	cmp	r2, #48	; 0x30
 8008926:	d0fa      	beq.n	800891e <_dtoa_r+0xb8e>
 8008928:	e6d7      	b.n	80086da <_dtoa_r+0x94a>
 800892a:	9a01      	ldr	r2, [sp, #4]
 800892c:	429a      	cmp	r2, r3
 800892e:	d184      	bne.n	800883a <_dtoa_r+0xaaa>
 8008930:	9b00      	ldr	r3, [sp, #0]
 8008932:	3301      	adds	r3, #1
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2331      	movs	r3, #49	; 0x31
 8008938:	7013      	strb	r3, [r2, #0]
 800893a:	e6ce      	b.n	80086da <_dtoa_r+0x94a>
 800893c:	4b09      	ldr	r3, [pc, #36]	; (8008964 <_dtoa_r+0xbd4>)
 800893e:	f7ff ba95 	b.w	8007e6c <_dtoa_r+0xdc>
 8008942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008944:	2b00      	cmp	r3, #0
 8008946:	f47f aa6e 	bne.w	8007e26 <_dtoa_r+0x96>
 800894a:	4b07      	ldr	r3, [pc, #28]	; (8008968 <_dtoa_r+0xbd8>)
 800894c:	f7ff ba8e 	b.w	8007e6c <_dtoa_r+0xdc>
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	dcae      	bgt.n	80088b4 <_dtoa_r+0xb24>
 8008956:	9b06      	ldr	r3, [sp, #24]
 8008958:	2b02      	cmp	r3, #2
 800895a:	f73f aea8 	bgt.w	80086ae <_dtoa_r+0x91e>
 800895e:	e7a9      	b.n	80088b4 <_dtoa_r+0xb24>
 8008960:	0800a377 	.word	0x0800a377
 8008964:	0800a2d4 	.word	0x0800a2d4
 8008968:	0800a2f8 	.word	0x0800a2f8

0800896c <__sflush_r>:
 800896c:	898a      	ldrh	r2, [r1, #12]
 800896e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008972:	4605      	mov	r5, r0
 8008974:	0710      	lsls	r0, r2, #28
 8008976:	460c      	mov	r4, r1
 8008978:	d458      	bmi.n	8008a2c <__sflush_r+0xc0>
 800897a:	684b      	ldr	r3, [r1, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	dc05      	bgt.n	800898c <__sflush_r+0x20>
 8008980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	dc02      	bgt.n	800898c <__sflush_r+0x20>
 8008986:	2000      	movs	r0, #0
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800898e:	2e00      	cmp	r6, #0
 8008990:	d0f9      	beq.n	8008986 <__sflush_r+0x1a>
 8008992:	2300      	movs	r3, #0
 8008994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008998:	682f      	ldr	r7, [r5, #0]
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	d032      	beq.n	8008a04 <__sflush_r+0x98>
 800899e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	075a      	lsls	r2, r3, #29
 80089a4:	d505      	bpl.n	80089b2 <__sflush_r+0x46>
 80089a6:	6863      	ldr	r3, [r4, #4]
 80089a8:	1ac0      	subs	r0, r0, r3
 80089aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ac:	b10b      	cbz	r3, 80089b2 <__sflush_r+0x46>
 80089ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089b0:	1ac0      	subs	r0, r0, r3
 80089b2:	2300      	movs	r3, #0
 80089b4:	4602      	mov	r2, r0
 80089b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089b8:	6a21      	ldr	r1, [r4, #32]
 80089ba:	4628      	mov	r0, r5
 80089bc:	47b0      	blx	r6
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	d106      	bne.n	80089d2 <__sflush_r+0x66>
 80089c4:	6829      	ldr	r1, [r5, #0]
 80089c6:	291d      	cmp	r1, #29
 80089c8:	d82c      	bhi.n	8008a24 <__sflush_r+0xb8>
 80089ca:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <__sflush_r+0x108>)
 80089cc:	40ca      	lsrs	r2, r1
 80089ce:	07d6      	lsls	r6, r2, #31
 80089d0:	d528      	bpl.n	8008a24 <__sflush_r+0xb8>
 80089d2:	2200      	movs	r2, #0
 80089d4:	6062      	str	r2, [r4, #4]
 80089d6:	04d9      	lsls	r1, r3, #19
 80089d8:	6922      	ldr	r2, [r4, #16]
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	d504      	bpl.n	80089e8 <__sflush_r+0x7c>
 80089de:	1c42      	adds	r2, r0, #1
 80089e0:	d101      	bne.n	80089e6 <__sflush_r+0x7a>
 80089e2:	682b      	ldr	r3, [r5, #0]
 80089e4:	b903      	cbnz	r3, 80089e8 <__sflush_r+0x7c>
 80089e6:	6560      	str	r0, [r4, #84]	; 0x54
 80089e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ea:	602f      	str	r7, [r5, #0]
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d0ca      	beq.n	8008986 <__sflush_r+0x1a>
 80089f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089f4:	4299      	cmp	r1, r3
 80089f6:	d002      	beq.n	80089fe <__sflush_r+0x92>
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 fc3d 	bl	8009278 <_free_r>
 80089fe:	2000      	movs	r0, #0
 8008a00:	6360      	str	r0, [r4, #52]	; 0x34
 8008a02:	e7c1      	b.n	8008988 <__sflush_r+0x1c>
 8008a04:	6a21      	ldr	r1, [r4, #32]
 8008a06:	2301      	movs	r3, #1
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b0      	blx	r6
 8008a0c:	1c41      	adds	r1, r0, #1
 8008a0e:	d1c7      	bne.n	80089a0 <__sflush_r+0x34>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0c4      	beq.n	80089a0 <__sflush_r+0x34>
 8008a16:	2b1d      	cmp	r3, #29
 8008a18:	d001      	beq.n	8008a1e <__sflush_r+0xb2>
 8008a1a:	2b16      	cmp	r3, #22
 8008a1c:	d101      	bne.n	8008a22 <__sflush_r+0xb6>
 8008a1e:	602f      	str	r7, [r5, #0]
 8008a20:	e7b1      	b.n	8008986 <__sflush_r+0x1a>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	e7ad      	b.n	8008988 <__sflush_r+0x1c>
 8008a2c:	690f      	ldr	r7, [r1, #16]
 8008a2e:	2f00      	cmp	r7, #0
 8008a30:	d0a9      	beq.n	8008986 <__sflush_r+0x1a>
 8008a32:	0793      	lsls	r3, r2, #30
 8008a34:	680e      	ldr	r6, [r1, #0]
 8008a36:	bf08      	it	eq
 8008a38:	694b      	ldreq	r3, [r1, #20]
 8008a3a:	600f      	str	r7, [r1, #0]
 8008a3c:	bf18      	it	ne
 8008a3e:	2300      	movne	r3, #0
 8008a40:	eba6 0807 	sub.w	r8, r6, r7
 8008a44:	608b      	str	r3, [r1, #8]
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	dd9c      	ble.n	8008986 <__sflush_r+0x1a>
 8008a4c:	6a21      	ldr	r1, [r4, #32]
 8008a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a50:	4643      	mov	r3, r8
 8008a52:	463a      	mov	r2, r7
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	dc06      	bgt.n	8008a6a <__sflush_r+0xfe>
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	e78e      	b.n	8008988 <__sflush_r+0x1c>
 8008a6a:	4407      	add	r7, r0
 8008a6c:	eba8 0800 	sub.w	r8, r8, r0
 8008a70:	e7e9      	b.n	8008a46 <__sflush_r+0xda>
 8008a72:	bf00      	nop
 8008a74:	20400001 	.word	0x20400001

08008a78 <_fflush_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	690b      	ldr	r3, [r1, #16]
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	460c      	mov	r4, r1
 8008a80:	b913      	cbnz	r3, 8008a88 <_fflush_r+0x10>
 8008a82:	2500      	movs	r5, #0
 8008a84:	4628      	mov	r0, r5
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	b118      	cbz	r0, 8008a92 <_fflush_r+0x1a>
 8008a8a:	6983      	ldr	r3, [r0, #24]
 8008a8c:	b90b      	cbnz	r3, 8008a92 <_fflush_r+0x1a>
 8008a8e:	f7fe fa17 	bl	8006ec0 <__sinit>
 8008a92:	4b14      	ldr	r3, [pc, #80]	; (8008ae4 <_fflush_r+0x6c>)
 8008a94:	429c      	cmp	r4, r3
 8008a96:	d11b      	bne.n	8008ad0 <_fflush_r+0x58>
 8008a98:	686c      	ldr	r4, [r5, #4]
 8008a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0ef      	beq.n	8008a82 <_fflush_r+0xa>
 8008aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008aa4:	07d0      	lsls	r0, r2, #31
 8008aa6:	d404      	bmi.n	8008ab2 <_fflush_r+0x3a>
 8008aa8:	0599      	lsls	r1, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_fflush_r+0x3a>
 8008aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aae:	f7fe faca 	bl	8007046 <__retarget_lock_acquire_recursive>
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7ff ff59 	bl	800896c <__sflush_r>
 8008aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008abc:	07da      	lsls	r2, r3, #31
 8008abe:	4605      	mov	r5, r0
 8008ac0:	d4e0      	bmi.n	8008a84 <_fflush_r+0xc>
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	059b      	lsls	r3, r3, #22
 8008ac6:	d4dd      	bmi.n	8008a84 <_fflush_r+0xc>
 8008ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aca:	f7fe fabd 	bl	8007048 <__retarget_lock_release_recursive>
 8008ace:	e7d9      	b.n	8008a84 <_fflush_r+0xc>
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <_fflush_r+0x70>)
 8008ad2:	429c      	cmp	r4, r3
 8008ad4:	d101      	bne.n	8008ada <_fflush_r+0x62>
 8008ad6:	68ac      	ldr	r4, [r5, #8]
 8008ad8:	e7df      	b.n	8008a9a <_fflush_r+0x22>
 8008ada:	4b04      	ldr	r3, [pc, #16]	; (8008aec <_fflush_r+0x74>)
 8008adc:	429c      	cmp	r4, r3
 8008ade:	bf08      	it	eq
 8008ae0:	68ec      	ldreq	r4, [r5, #12]
 8008ae2:	e7da      	b.n	8008a9a <_fflush_r+0x22>
 8008ae4:	0800a280 	.word	0x0800a280
 8008ae8:	0800a2a0 	.word	0x0800a2a0
 8008aec:	0800a260 	.word	0x0800a260

08008af0 <_localeconv_r>:
 8008af0:	4800      	ldr	r0, [pc, #0]	; (8008af4 <_localeconv_r+0x4>)
 8008af2:	4770      	bx	lr
 8008af4:	20000164 	.word	0x20000164

08008af8 <_lseek_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d07      	ldr	r5, [pc, #28]	; (8008b18 <_lseek_r+0x20>)
 8008afc:	4604      	mov	r4, r0
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	602a      	str	r2, [r5, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f7f8 ff42 	bl	8001990 <_lseek>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_lseek_r+0x1e>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_lseek_r+0x1e>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20004ccc 	.word	0x20004ccc

08008b1c <malloc>:
 8008b1c:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <malloc+0xc>)
 8008b1e:	4601      	mov	r1, r0
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	f7fe bac9 	b.w	80070b8 <_malloc_r>
 8008b26:	bf00      	nop
 8008b28:	20000010 	.word	0x20000010

08008b2c <__malloc_lock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__malloc_lock+0x8>)
 8008b2e:	f7fe ba8a 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20004cc0 	.word	0x20004cc0

08008b38 <__malloc_unlock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__malloc_unlock+0x8>)
 8008b3a:	f7fe ba85 	b.w	8007048 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20004cc0 	.word	0x20004cc0

08008b44 <_Balloc>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b48:	4604      	mov	r4, r0
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	b976      	cbnz	r6, 8008b6c <_Balloc+0x28>
 8008b4e:	2010      	movs	r0, #16
 8008b50:	f7ff ffe4 	bl	8008b1c <malloc>
 8008b54:	4602      	mov	r2, r0
 8008b56:	6260      	str	r0, [r4, #36]	; 0x24
 8008b58:	b920      	cbnz	r0, 8008b64 <_Balloc+0x20>
 8008b5a:	4b18      	ldr	r3, [pc, #96]	; (8008bbc <_Balloc+0x78>)
 8008b5c:	4818      	ldr	r0, [pc, #96]	; (8008bc0 <_Balloc+0x7c>)
 8008b5e:	2166      	movs	r1, #102	; 0x66
 8008b60:	f000 fd44 	bl	80095ec <__assert_func>
 8008b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b68:	6006      	str	r6, [r0, #0]
 8008b6a:	60c6      	str	r6, [r0, #12]
 8008b6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b6e:	68f3      	ldr	r3, [r6, #12]
 8008b70:	b183      	cbz	r3, 8008b94 <_Balloc+0x50>
 8008b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b7a:	b9b8      	cbnz	r0, 8008bac <_Balloc+0x68>
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b82:	1d72      	adds	r2, r6, #5
 8008b84:	0092      	lsls	r2, r2, #2
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 fb60 	bl	800924c <_calloc_r>
 8008b8c:	b160      	cbz	r0, 8008ba8 <_Balloc+0x64>
 8008b8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b92:	e00e      	b.n	8008bb2 <_Balloc+0x6e>
 8008b94:	2221      	movs	r2, #33	; 0x21
 8008b96:	2104      	movs	r1, #4
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fb57 	bl	800924c <_calloc_r>
 8008b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba0:	60f0      	str	r0, [r6, #12]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e4      	bne.n	8008b72 <_Balloc+0x2e>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	6802      	ldr	r2, [r0, #0]
 8008bae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bb8:	e7f7      	b.n	8008baa <_Balloc+0x66>
 8008bba:	bf00      	nop
 8008bbc:	0800a305 	.word	0x0800a305
 8008bc0:	0800a388 	.word	0x0800a388

08008bc4 <_Bfree>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	b976      	cbnz	r6, 8008bec <_Bfree+0x28>
 8008bce:	2010      	movs	r0, #16
 8008bd0:	f7ff ffa4 	bl	8008b1c <malloc>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6268      	str	r0, [r5, #36]	; 0x24
 8008bd8:	b920      	cbnz	r0, 8008be4 <_Bfree+0x20>
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <_Bfree+0x3c>)
 8008bdc:	4809      	ldr	r0, [pc, #36]	; (8008c04 <_Bfree+0x40>)
 8008bde:	218a      	movs	r1, #138	; 0x8a
 8008be0:	f000 fd04 	bl	80095ec <__assert_func>
 8008be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008be8:	6006      	str	r6, [r0, #0]
 8008bea:	60c6      	str	r6, [r0, #12]
 8008bec:	b13c      	cbz	r4, 8008bfe <_Bfree+0x3a>
 8008bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bf0:	6862      	ldr	r2, [r4, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf8:	6021      	str	r1, [r4, #0]
 8008bfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	0800a305 	.word	0x0800a305
 8008c04:	0800a388 	.word	0x0800a388

08008c08 <__multadd>:
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	690d      	ldr	r5, [r1, #16]
 8008c0e:	4607      	mov	r7, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	461e      	mov	r6, r3
 8008c14:	f101 0c14 	add.w	ip, r1, #20
 8008c18:	2000      	movs	r0, #0
 8008c1a:	f8dc 3000 	ldr.w	r3, [ip]
 8008c1e:	b299      	uxth	r1, r3
 8008c20:	fb02 6101 	mla	r1, r2, r1, r6
 8008c24:	0c1e      	lsrs	r6, r3, #16
 8008c26:	0c0b      	lsrs	r3, r1, #16
 8008c28:	fb02 3306 	mla	r3, r2, r6, r3
 8008c2c:	b289      	uxth	r1, r1
 8008c2e:	3001      	adds	r0, #1
 8008c30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c34:	4285      	cmp	r5, r0
 8008c36:	f84c 1b04 	str.w	r1, [ip], #4
 8008c3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c3e:	dcec      	bgt.n	8008c1a <__multadd+0x12>
 8008c40:	b30e      	cbz	r6, 8008c86 <__multadd+0x7e>
 8008c42:	68a3      	ldr	r3, [r4, #8]
 8008c44:	42ab      	cmp	r3, r5
 8008c46:	dc19      	bgt.n	8008c7c <__multadd+0x74>
 8008c48:	6861      	ldr	r1, [r4, #4]
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	3101      	adds	r1, #1
 8008c4e:	f7ff ff79 	bl	8008b44 <_Balloc>
 8008c52:	4680      	mov	r8, r0
 8008c54:	b928      	cbnz	r0, 8008c62 <__multadd+0x5a>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <__multadd+0x84>)
 8008c5a:	480d      	ldr	r0, [pc, #52]	; (8008c90 <__multadd+0x88>)
 8008c5c:	21b5      	movs	r1, #181	; 0xb5
 8008c5e:	f000 fcc5 	bl	80095ec <__assert_func>
 8008c62:	6922      	ldr	r2, [r4, #16]
 8008c64:	3202      	adds	r2, #2
 8008c66:	f104 010c 	add.w	r1, r4, #12
 8008c6a:	0092      	lsls	r2, r2, #2
 8008c6c:	300c      	adds	r0, #12
 8008c6e:	f7fe f9ec 	bl	800704a <memcpy>
 8008c72:	4621      	mov	r1, r4
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff ffa5 	bl	8008bc4 <_Bfree>
 8008c7a:	4644      	mov	r4, r8
 8008c7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c80:	3501      	adds	r5, #1
 8008c82:	615e      	str	r6, [r3, #20]
 8008c84:	6125      	str	r5, [r4, #16]
 8008c86:	4620      	mov	r0, r4
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	0800a377 	.word	0x0800a377
 8008c90:	0800a388 	.word	0x0800a388

08008c94 <__hi0bits>:
 8008c94:	0c03      	lsrs	r3, r0, #16
 8008c96:	041b      	lsls	r3, r3, #16
 8008c98:	b9d3      	cbnz	r3, 8008cd0 <__hi0bits+0x3c>
 8008c9a:	0400      	lsls	r0, r0, #16
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ca2:	bf04      	itt	eq
 8008ca4:	0200      	lsleq	r0, r0, #8
 8008ca6:	3308      	addeq	r3, #8
 8008ca8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008cac:	bf04      	itt	eq
 8008cae:	0100      	lsleq	r0, r0, #4
 8008cb0:	3304      	addeq	r3, #4
 8008cb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008cb6:	bf04      	itt	eq
 8008cb8:	0080      	lsleq	r0, r0, #2
 8008cba:	3302      	addeq	r3, #2
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	db05      	blt.n	8008ccc <__hi0bits+0x38>
 8008cc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008cc4:	f103 0301 	add.w	r3, r3, #1
 8008cc8:	bf08      	it	eq
 8008cca:	2320      	moveq	r3, #32
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4770      	bx	lr
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e7e4      	b.n	8008c9e <__hi0bits+0xa>

08008cd4 <__lo0bits>:
 8008cd4:	6803      	ldr	r3, [r0, #0]
 8008cd6:	f013 0207 	ands.w	r2, r3, #7
 8008cda:	4601      	mov	r1, r0
 8008cdc:	d00b      	beq.n	8008cf6 <__lo0bits+0x22>
 8008cde:	07da      	lsls	r2, r3, #31
 8008ce0:	d423      	bmi.n	8008d2a <__lo0bits+0x56>
 8008ce2:	0798      	lsls	r0, r3, #30
 8008ce4:	bf49      	itett	mi
 8008ce6:	085b      	lsrmi	r3, r3, #1
 8008ce8:	089b      	lsrpl	r3, r3, #2
 8008cea:	2001      	movmi	r0, #1
 8008cec:	600b      	strmi	r3, [r1, #0]
 8008cee:	bf5c      	itt	pl
 8008cf0:	600b      	strpl	r3, [r1, #0]
 8008cf2:	2002      	movpl	r0, #2
 8008cf4:	4770      	bx	lr
 8008cf6:	b298      	uxth	r0, r3
 8008cf8:	b9a8      	cbnz	r0, 8008d26 <__lo0bits+0x52>
 8008cfa:	0c1b      	lsrs	r3, r3, #16
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	b90a      	cbnz	r2, 8008d06 <__lo0bits+0x32>
 8008d02:	3008      	adds	r0, #8
 8008d04:	0a1b      	lsrs	r3, r3, #8
 8008d06:	071a      	lsls	r2, r3, #28
 8008d08:	bf04      	itt	eq
 8008d0a:	091b      	lsreq	r3, r3, #4
 8008d0c:	3004      	addeq	r0, #4
 8008d0e:	079a      	lsls	r2, r3, #30
 8008d10:	bf04      	itt	eq
 8008d12:	089b      	lsreq	r3, r3, #2
 8008d14:	3002      	addeq	r0, #2
 8008d16:	07da      	lsls	r2, r3, #31
 8008d18:	d403      	bmi.n	8008d22 <__lo0bits+0x4e>
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	f100 0001 	add.w	r0, r0, #1
 8008d20:	d005      	beq.n	8008d2e <__lo0bits+0x5a>
 8008d22:	600b      	str	r3, [r1, #0]
 8008d24:	4770      	bx	lr
 8008d26:	4610      	mov	r0, r2
 8008d28:	e7e9      	b.n	8008cfe <__lo0bits+0x2a>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	4770      	bx	lr
 8008d2e:	2020      	movs	r0, #32
 8008d30:	4770      	bx	lr
	...

08008d34 <__i2b>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	2101      	movs	r1, #1
 8008d3a:	f7ff ff03 	bl	8008b44 <_Balloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	b928      	cbnz	r0, 8008d4e <__i2b+0x1a>
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <__i2b+0x24>)
 8008d44:	4805      	ldr	r0, [pc, #20]	; (8008d5c <__i2b+0x28>)
 8008d46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d4a:	f000 fc4f 	bl	80095ec <__assert_func>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	6144      	str	r4, [r0, #20]
 8008d52:	6103      	str	r3, [r0, #16]
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	bf00      	nop
 8008d58:	0800a377 	.word	0x0800a377
 8008d5c:	0800a388 	.word	0x0800a388

08008d60 <__multiply>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	4691      	mov	r9, r2
 8008d66:	690a      	ldr	r2, [r1, #16]
 8008d68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	bfb8      	it	lt
 8008d70:	460b      	movlt	r3, r1
 8008d72:	460c      	mov	r4, r1
 8008d74:	bfbc      	itt	lt
 8008d76:	464c      	movlt	r4, r9
 8008d78:	4699      	movlt	r9, r3
 8008d7a:	6927      	ldr	r7, [r4, #16]
 8008d7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d80:	68a3      	ldr	r3, [r4, #8]
 8008d82:	6861      	ldr	r1, [r4, #4]
 8008d84:	eb07 060a 	add.w	r6, r7, sl
 8008d88:	42b3      	cmp	r3, r6
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	bfb8      	it	lt
 8008d8e:	3101      	addlt	r1, #1
 8008d90:	f7ff fed8 	bl	8008b44 <_Balloc>
 8008d94:	b930      	cbnz	r0, 8008da4 <__multiply+0x44>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b44      	ldr	r3, [pc, #272]	; (8008eac <__multiply+0x14c>)
 8008d9a:	4845      	ldr	r0, [pc, #276]	; (8008eb0 <__multiply+0x150>)
 8008d9c:	f240 115d 	movw	r1, #349	; 0x15d
 8008da0:	f000 fc24 	bl	80095ec <__assert_func>
 8008da4:	f100 0514 	add.w	r5, r0, #20
 8008da8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008dac:	462b      	mov	r3, r5
 8008dae:	2200      	movs	r2, #0
 8008db0:	4543      	cmp	r3, r8
 8008db2:	d321      	bcc.n	8008df8 <__multiply+0x98>
 8008db4:	f104 0314 	add.w	r3, r4, #20
 8008db8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008dbc:	f109 0314 	add.w	r3, r9, #20
 8008dc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008dc4:	9202      	str	r2, [sp, #8]
 8008dc6:	1b3a      	subs	r2, r7, r4
 8008dc8:	3a15      	subs	r2, #21
 8008dca:	f022 0203 	bic.w	r2, r2, #3
 8008dce:	3204      	adds	r2, #4
 8008dd0:	f104 0115 	add.w	r1, r4, #21
 8008dd4:	428f      	cmp	r7, r1
 8008dd6:	bf38      	it	cc
 8008dd8:	2204      	movcc	r2, #4
 8008dda:	9201      	str	r2, [sp, #4]
 8008ddc:	9a02      	ldr	r2, [sp, #8]
 8008dde:	9303      	str	r3, [sp, #12]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d80c      	bhi.n	8008dfe <__multiply+0x9e>
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	dd03      	ble.n	8008df0 <__multiply+0x90>
 8008de8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d05a      	beq.n	8008ea6 <__multiply+0x146>
 8008df0:	6106      	str	r6, [r0, #16]
 8008df2:	b005      	add	sp, #20
 8008df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	f843 2b04 	str.w	r2, [r3], #4
 8008dfc:	e7d8      	b.n	8008db0 <__multiply+0x50>
 8008dfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e02:	f1ba 0f00 	cmp.w	sl, #0
 8008e06:	d024      	beq.n	8008e52 <__multiply+0xf2>
 8008e08:	f104 0e14 	add.w	lr, r4, #20
 8008e0c:	46a9      	mov	r9, r5
 8008e0e:	f04f 0c00 	mov.w	ip, #0
 8008e12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e16:	f8d9 1000 	ldr.w	r1, [r9]
 8008e1a:	fa1f fb82 	uxth.w	fp, r2
 8008e1e:	b289      	uxth	r1, r1
 8008e20:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e28:	f8d9 2000 	ldr.w	r2, [r9]
 8008e2c:	4461      	add	r1, ip
 8008e2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e32:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e3a:	b289      	uxth	r1, r1
 8008e3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e40:	4577      	cmp	r7, lr
 8008e42:	f849 1b04 	str.w	r1, [r9], #4
 8008e46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e4a:	d8e2      	bhi.n	8008e12 <__multiply+0xb2>
 8008e4c:	9a01      	ldr	r2, [sp, #4]
 8008e4e:	f845 c002 	str.w	ip, [r5, r2]
 8008e52:	9a03      	ldr	r2, [sp, #12]
 8008e54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	f1b9 0f00 	cmp.w	r9, #0
 8008e5e:	d020      	beq.n	8008ea2 <__multiply+0x142>
 8008e60:	6829      	ldr	r1, [r5, #0]
 8008e62:	f104 0c14 	add.w	ip, r4, #20
 8008e66:	46ae      	mov	lr, r5
 8008e68:	f04f 0a00 	mov.w	sl, #0
 8008e6c:	f8bc b000 	ldrh.w	fp, [ip]
 8008e70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e74:	fb09 220b 	mla	r2, r9, fp, r2
 8008e78:	4492      	add	sl, r2
 8008e7a:	b289      	uxth	r1, r1
 8008e7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e80:	f84e 1b04 	str.w	r1, [lr], #4
 8008e84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e88:	f8be 1000 	ldrh.w	r1, [lr]
 8008e8c:	0c12      	lsrs	r2, r2, #16
 8008e8e:	fb09 1102 	mla	r1, r9, r2, r1
 8008e92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e96:	4567      	cmp	r7, ip
 8008e98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e9c:	d8e6      	bhi.n	8008e6c <__multiply+0x10c>
 8008e9e:	9a01      	ldr	r2, [sp, #4]
 8008ea0:	50a9      	str	r1, [r5, r2]
 8008ea2:	3504      	adds	r5, #4
 8008ea4:	e79a      	b.n	8008ddc <__multiply+0x7c>
 8008ea6:	3e01      	subs	r6, #1
 8008ea8:	e79c      	b.n	8008de4 <__multiply+0x84>
 8008eaa:	bf00      	nop
 8008eac:	0800a377 	.word	0x0800a377
 8008eb0:	0800a388 	.word	0x0800a388

08008eb4 <__pow5mult>:
 8008eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	4615      	mov	r5, r2
 8008eba:	f012 0203 	ands.w	r2, r2, #3
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	d007      	beq.n	8008ed4 <__pow5mult+0x20>
 8008ec4:	4c25      	ldr	r4, [pc, #148]	; (8008f5c <__pow5mult+0xa8>)
 8008ec6:	3a01      	subs	r2, #1
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ece:	f7ff fe9b 	bl	8008c08 <__multadd>
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	10ad      	asrs	r5, r5, #2
 8008ed6:	d03d      	beq.n	8008f54 <__pow5mult+0xa0>
 8008ed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008eda:	b97c      	cbnz	r4, 8008efc <__pow5mult+0x48>
 8008edc:	2010      	movs	r0, #16
 8008ede:	f7ff fe1d 	bl	8008b1c <malloc>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	6270      	str	r0, [r6, #36]	; 0x24
 8008ee6:	b928      	cbnz	r0, 8008ef4 <__pow5mult+0x40>
 8008ee8:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <__pow5mult+0xac>)
 8008eea:	481e      	ldr	r0, [pc, #120]	; (8008f64 <__pow5mult+0xb0>)
 8008eec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ef0:	f000 fb7c 	bl	80095ec <__assert_func>
 8008ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ef8:	6004      	str	r4, [r0, #0]
 8008efa:	60c4      	str	r4, [r0, #12]
 8008efc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f04:	b94c      	cbnz	r4, 8008f1a <__pow5mult+0x66>
 8008f06:	f240 2171 	movw	r1, #625	; 0x271
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ff12 	bl	8008d34 <__i2b>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f16:	4604      	mov	r4, r0
 8008f18:	6003      	str	r3, [r0, #0]
 8008f1a:	f04f 0900 	mov.w	r9, #0
 8008f1e:	07eb      	lsls	r3, r5, #31
 8008f20:	d50a      	bpl.n	8008f38 <__pow5mult+0x84>
 8008f22:	4639      	mov	r1, r7
 8008f24:	4622      	mov	r2, r4
 8008f26:	4630      	mov	r0, r6
 8008f28:	f7ff ff1a 	bl	8008d60 <__multiply>
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	4680      	mov	r8, r0
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7ff fe47 	bl	8008bc4 <_Bfree>
 8008f36:	4647      	mov	r7, r8
 8008f38:	106d      	asrs	r5, r5, #1
 8008f3a:	d00b      	beq.n	8008f54 <__pow5mult+0xa0>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	b938      	cbnz	r0, 8008f50 <__pow5mult+0x9c>
 8008f40:	4622      	mov	r2, r4
 8008f42:	4621      	mov	r1, r4
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7ff ff0b 	bl	8008d60 <__multiply>
 8008f4a:	6020      	str	r0, [r4, #0]
 8008f4c:	f8c0 9000 	str.w	r9, [r0]
 8008f50:	4604      	mov	r4, r0
 8008f52:	e7e4      	b.n	8008f1e <__pow5mult+0x6a>
 8008f54:	4638      	mov	r0, r7
 8008f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5a:	bf00      	nop
 8008f5c:	0800a4d8 	.word	0x0800a4d8
 8008f60:	0800a305 	.word	0x0800a305
 8008f64:	0800a388 	.word	0x0800a388

08008f68 <__lshift>:
 8008f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	6849      	ldr	r1, [r1, #4]
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f76:	68a3      	ldr	r3, [r4, #8]
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4691      	mov	r9, r2
 8008f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f80:	f108 0601 	add.w	r6, r8, #1
 8008f84:	42b3      	cmp	r3, r6
 8008f86:	db0b      	blt.n	8008fa0 <__lshift+0x38>
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff fddb 	bl	8008b44 <_Balloc>
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b948      	cbnz	r0, 8008fa6 <__lshift+0x3e>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4b2a      	ldr	r3, [pc, #168]	; (8009040 <__lshift+0xd8>)
 8008f96:	482b      	ldr	r0, [pc, #172]	; (8009044 <__lshift+0xdc>)
 8008f98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f9c:	f000 fb26 	bl	80095ec <__assert_func>
 8008fa0:	3101      	adds	r1, #1
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	e7ee      	b.n	8008f84 <__lshift+0x1c>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f100 0114 	add.w	r1, r0, #20
 8008fac:	f100 0210 	add.w	r2, r0, #16
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	4553      	cmp	r3, sl
 8008fb4:	db37      	blt.n	8009026 <__lshift+0xbe>
 8008fb6:	6920      	ldr	r0, [r4, #16]
 8008fb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fbc:	f104 0314 	add.w	r3, r4, #20
 8008fc0:	f019 091f 	ands.w	r9, r9, #31
 8008fc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008fcc:	d02f      	beq.n	800902e <__lshift+0xc6>
 8008fce:	f1c9 0e20 	rsb	lr, r9, #32
 8008fd2:	468a      	mov	sl, r1
 8008fd4:	f04f 0c00 	mov.w	ip, #0
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	fa02 f209 	lsl.w	r2, r2, r9
 8008fde:	ea42 020c 	orr.w	r2, r2, ip
 8008fe2:	f84a 2b04 	str.w	r2, [sl], #4
 8008fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fea:	4298      	cmp	r0, r3
 8008fec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ff0:	d8f2      	bhi.n	8008fd8 <__lshift+0x70>
 8008ff2:	1b03      	subs	r3, r0, r4
 8008ff4:	3b15      	subs	r3, #21
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	f104 0215 	add.w	r2, r4, #21
 8009000:	4290      	cmp	r0, r2
 8009002:	bf38      	it	cc
 8009004:	2304      	movcc	r3, #4
 8009006:	f841 c003 	str.w	ip, [r1, r3]
 800900a:	f1bc 0f00 	cmp.w	ip, #0
 800900e:	d001      	beq.n	8009014 <__lshift+0xac>
 8009010:	f108 0602 	add.w	r6, r8, #2
 8009014:	3e01      	subs	r6, #1
 8009016:	4638      	mov	r0, r7
 8009018:	612e      	str	r6, [r5, #16]
 800901a:	4621      	mov	r1, r4
 800901c:	f7ff fdd2 	bl	8008bc4 <_Bfree>
 8009020:	4628      	mov	r0, r5
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	f842 0f04 	str.w	r0, [r2, #4]!
 800902a:	3301      	adds	r3, #1
 800902c:	e7c1      	b.n	8008fb2 <__lshift+0x4a>
 800902e:	3904      	subs	r1, #4
 8009030:	f853 2b04 	ldr.w	r2, [r3], #4
 8009034:	f841 2f04 	str.w	r2, [r1, #4]!
 8009038:	4298      	cmp	r0, r3
 800903a:	d8f9      	bhi.n	8009030 <__lshift+0xc8>
 800903c:	e7ea      	b.n	8009014 <__lshift+0xac>
 800903e:	bf00      	nop
 8009040:	0800a377 	.word	0x0800a377
 8009044:	0800a388 	.word	0x0800a388

08009048 <__mcmp>:
 8009048:	b530      	push	{r4, r5, lr}
 800904a:	6902      	ldr	r2, [r0, #16]
 800904c:	690c      	ldr	r4, [r1, #16]
 800904e:	1b12      	subs	r2, r2, r4
 8009050:	d10e      	bne.n	8009070 <__mcmp+0x28>
 8009052:	f100 0314 	add.w	r3, r0, #20
 8009056:	3114      	adds	r1, #20
 8009058:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800905c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009060:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009064:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009068:	42a5      	cmp	r5, r4
 800906a:	d003      	beq.n	8009074 <__mcmp+0x2c>
 800906c:	d305      	bcc.n	800907a <__mcmp+0x32>
 800906e:	2201      	movs	r2, #1
 8009070:	4610      	mov	r0, r2
 8009072:	bd30      	pop	{r4, r5, pc}
 8009074:	4283      	cmp	r3, r0
 8009076:	d3f3      	bcc.n	8009060 <__mcmp+0x18>
 8009078:	e7fa      	b.n	8009070 <__mcmp+0x28>
 800907a:	f04f 32ff 	mov.w	r2, #4294967295
 800907e:	e7f7      	b.n	8009070 <__mcmp+0x28>

08009080 <__mdiff>:
 8009080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	4606      	mov	r6, r0
 8009088:	4611      	mov	r1, r2
 800908a:	4620      	mov	r0, r4
 800908c:	4690      	mov	r8, r2
 800908e:	f7ff ffdb 	bl	8009048 <__mcmp>
 8009092:	1e05      	subs	r5, r0, #0
 8009094:	d110      	bne.n	80090b8 <__mdiff+0x38>
 8009096:	4629      	mov	r1, r5
 8009098:	4630      	mov	r0, r6
 800909a:	f7ff fd53 	bl	8008b44 <_Balloc>
 800909e:	b930      	cbnz	r0, 80090ae <__mdiff+0x2e>
 80090a0:	4b3a      	ldr	r3, [pc, #232]	; (800918c <__mdiff+0x10c>)
 80090a2:	4602      	mov	r2, r0
 80090a4:	f240 2132 	movw	r1, #562	; 0x232
 80090a8:	4839      	ldr	r0, [pc, #228]	; (8009190 <__mdiff+0x110>)
 80090aa:	f000 fa9f 	bl	80095ec <__assert_func>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b8:	bfa4      	itt	ge
 80090ba:	4643      	movge	r3, r8
 80090bc:	46a0      	movge	r8, r4
 80090be:	4630      	mov	r0, r6
 80090c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090c4:	bfa6      	itte	ge
 80090c6:	461c      	movge	r4, r3
 80090c8:	2500      	movge	r5, #0
 80090ca:	2501      	movlt	r5, #1
 80090cc:	f7ff fd3a 	bl	8008b44 <_Balloc>
 80090d0:	b920      	cbnz	r0, 80090dc <__mdiff+0x5c>
 80090d2:	4b2e      	ldr	r3, [pc, #184]	; (800918c <__mdiff+0x10c>)
 80090d4:	4602      	mov	r2, r0
 80090d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80090da:	e7e5      	b.n	80090a8 <__mdiff+0x28>
 80090dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090e0:	6926      	ldr	r6, [r4, #16]
 80090e2:	60c5      	str	r5, [r0, #12]
 80090e4:	f104 0914 	add.w	r9, r4, #20
 80090e8:	f108 0514 	add.w	r5, r8, #20
 80090ec:	f100 0e14 	add.w	lr, r0, #20
 80090f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090f8:	f108 0210 	add.w	r2, r8, #16
 80090fc:	46f2      	mov	sl, lr
 80090fe:	2100      	movs	r1, #0
 8009100:	f859 3b04 	ldr.w	r3, [r9], #4
 8009104:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009108:	fa1f f883 	uxth.w	r8, r3
 800910c:	fa11 f18b 	uxtah	r1, r1, fp
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	eba1 0808 	sub.w	r8, r1, r8
 8009116:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800911a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800911e:	fa1f f888 	uxth.w	r8, r8
 8009122:	1419      	asrs	r1, r3, #16
 8009124:	454e      	cmp	r6, r9
 8009126:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800912a:	f84a 3b04 	str.w	r3, [sl], #4
 800912e:	d8e7      	bhi.n	8009100 <__mdiff+0x80>
 8009130:	1b33      	subs	r3, r6, r4
 8009132:	3b15      	subs	r3, #21
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	3304      	adds	r3, #4
 800913a:	3415      	adds	r4, #21
 800913c:	42a6      	cmp	r6, r4
 800913e:	bf38      	it	cc
 8009140:	2304      	movcc	r3, #4
 8009142:	441d      	add	r5, r3
 8009144:	4473      	add	r3, lr
 8009146:	469e      	mov	lr, r3
 8009148:	462e      	mov	r6, r5
 800914a:	4566      	cmp	r6, ip
 800914c:	d30e      	bcc.n	800916c <__mdiff+0xec>
 800914e:	f10c 0203 	add.w	r2, ip, #3
 8009152:	1b52      	subs	r2, r2, r5
 8009154:	f022 0203 	bic.w	r2, r2, #3
 8009158:	3d03      	subs	r5, #3
 800915a:	45ac      	cmp	ip, r5
 800915c:	bf38      	it	cc
 800915e:	2200      	movcc	r2, #0
 8009160:	441a      	add	r2, r3
 8009162:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009166:	b17b      	cbz	r3, 8009188 <__mdiff+0x108>
 8009168:	6107      	str	r7, [r0, #16]
 800916a:	e7a3      	b.n	80090b4 <__mdiff+0x34>
 800916c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009170:	fa11 f288 	uxtah	r2, r1, r8
 8009174:	1414      	asrs	r4, r2, #16
 8009176:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800917a:	b292      	uxth	r2, r2
 800917c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009180:	f84e 2b04 	str.w	r2, [lr], #4
 8009184:	1421      	asrs	r1, r4, #16
 8009186:	e7e0      	b.n	800914a <__mdiff+0xca>
 8009188:	3f01      	subs	r7, #1
 800918a:	e7ea      	b.n	8009162 <__mdiff+0xe2>
 800918c:	0800a377 	.word	0x0800a377
 8009190:	0800a388 	.word	0x0800a388

08009194 <__d2b>:
 8009194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009198:	4689      	mov	r9, r1
 800919a:	2101      	movs	r1, #1
 800919c:	ec57 6b10 	vmov	r6, r7, d0
 80091a0:	4690      	mov	r8, r2
 80091a2:	f7ff fccf 	bl	8008b44 <_Balloc>
 80091a6:	4604      	mov	r4, r0
 80091a8:	b930      	cbnz	r0, 80091b8 <__d2b+0x24>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4b25      	ldr	r3, [pc, #148]	; (8009244 <__d2b+0xb0>)
 80091ae:	4826      	ldr	r0, [pc, #152]	; (8009248 <__d2b+0xb4>)
 80091b0:	f240 310a 	movw	r1, #778	; 0x30a
 80091b4:	f000 fa1a 	bl	80095ec <__assert_func>
 80091b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091c0:	bb35      	cbnz	r5, 8009210 <__d2b+0x7c>
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	d028      	beq.n	800921a <__d2b+0x86>
 80091c8:	4668      	mov	r0, sp
 80091ca:	9600      	str	r6, [sp, #0]
 80091cc:	f7ff fd82 	bl	8008cd4 <__lo0bits>
 80091d0:	9900      	ldr	r1, [sp, #0]
 80091d2:	b300      	cbz	r0, 8009216 <__d2b+0x82>
 80091d4:	9a01      	ldr	r2, [sp, #4]
 80091d6:	f1c0 0320 	rsb	r3, r0, #32
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	430b      	orrs	r3, r1
 80091e0:	40c2      	lsrs	r2, r0
 80091e2:	6163      	str	r3, [r4, #20]
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	61a3      	str	r3, [r4, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	bf14      	ite	ne
 80091ee:	2202      	movne	r2, #2
 80091f0:	2201      	moveq	r2, #1
 80091f2:	6122      	str	r2, [r4, #16]
 80091f4:	b1d5      	cbz	r5, 800922c <__d2b+0x98>
 80091f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091fa:	4405      	add	r5, r0
 80091fc:	f8c9 5000 	str.w	r5, [r9]
 8009200:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009204:	f8c8 0000 	str.w	r0, [r8]
 8009208:	4620      	mov	r0, r4
 800920a:	b003      	add	sp, #12
 800920c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009214:	e7d5      	b.n	80091c2 <__d2b+0x2e>
 8009216:	6161      	str	r1, [r4, #20]
 8009218:	e7e5      	b.n	80091e6 <__d2b+0x52>
 800921a:	a801      	add	r0, sp, #4
 800921c:	f7ff fd5a 	bl	8008cd4 <__lo0bits>
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	6163      	str	r3, [r4, #20]
 8009224:	2201      	movs	r2, #1
 8009226:	6122      	str	r2, [r4, #16]
 8009228:	3020      	adds	r0, #32
 800922a:	e7e3      	b.n	80091f4 <__d2b+0x60>
 800922c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009234:	f8c9 0000 	str.w	r0, [r9]
 8009238:	6918      	ldr	r0, [r3, #16]
 800923a:	f7ff fd2b 	bl	8008c94 <__hi0bits>
 800923e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009242:	e7df      	b.n	8009204 <__d2b+0x70>
 8009244:	0800a377 	.word	0x0800a377
 8009248:	0800a388 	.word	0x0800a388

0800924c <_calloc_r>:
 800924c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800924e:	fba1 2402 	umull	r2, r4, r1, r2
 8009252:	b94c      	cbnz	r4, 8009268 <_calloc_r+0x1c>
 8009254:	4611      	mov	r1, r2
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	f7fd ff2e 	bl	80070b8 <_malloc_r>
 800925c:	9a01      	ldr	r2, [sp, #4]
 800925e:	4605      	mov	r5, r0
 8009260:	b930      	cbnz	r0, 8009270 <_calloc_r+0x24>
 8009262:	4628      	mov	r0, r5
 8009264:	b003      	add	sp, #12
 8009266:	bd30      	pop	{r4, r5, pc}
 8009268:	220c      	movs	r2, #12
 800926a:	6002      	str	r2, [r0, #0]
 800926c:	2500      	movs	r5, #0
 800926e:	e7f8      	b.n	8009262 <_calloc_r+0x16>
 8009270:	4621      	mov	r1, r4
 8009272:	f7fd fef8 	bl	8007066 <memset>
 8009276:	e7f4      	b.n	8009262 <_calloc_r+0x16>

08009278 <_free_r>:
 8009278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800927a:	2900      	cmp	r1, #0
 800927c:	d044      	beq.n	8009308 <_free_r+0x90>
 800927e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009282:	9001      	str	r0, [sp, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f1a1 0404 	sub.w	r4, r1, #4
 800928a:	bfb8      	it	lt
 800928c:	18e4      	addlt	r4, r4, r3
 800928e:	f7ff fc4d 	bl	8008b2c <__malloc_lock>
 8009292:	4a1e      	ldr	r2, [pc, #120]	; (800930c <_free_r+0x94>)
 8009294:	9801      	ldr	r0, [sp, #4]
 8009296:	6813      	ldr	r3, [r2, #0]
 8009298:	b933      	cbnz	r3, 80092a8 <_free_r+0x30>
 800929a:	6063      	str	r3, [r4, #4]
 800929c:	6014      	str	r4, [r2, #0]
 800929e:	b003      	add	sp, #12
 80092a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092a4:	f7ff bc48 	b.w	8008b38 <__malloc_unlock>
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	d908      	bls.n	80092be <_free_r+0x46>
 80092ac:	6825      	ldr	r5, [r4, #0]
 80092ae:	1961      	adds	r1, r4, r5
 80092b0:	428b      	cmp	r3, r1
 80092b2:	bf01      	itttt	eq
 80092b4:	6819      	ldreq	r1, [r3, #0]
 80092b6:	685b      	ldreq	r3, [r3, #4]
 80092b8:	1949      	addeq	r1, r1, r5
 80092ba:	6021      	streq	r1, [r4, #0]
 80092bc:	e7ed      	b.n	800929a <_free_r+0x22>
 80092be:	461a      	mov	r2, r3
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	b10b      	cbz	r3, 80092c8 <_free_r+0x50>
 80092c4:	42a3      	cmp	r3, r4
 80092c6:	d9fa      	bls.n	80092be <_free_r+0x46>
 80092c8:	6811      	ldr	r1, [r2, #0]
 80092ca:	1855      	adds	r5, r2, r1
 80092cc:	42a5      	cmp	r5, r4
 80092ce:	d10b      	bne.n	80092e8 <_free_r+0x70>
 80092d0:	6824      	ldr	r4, [r4, #0]
 80092d2:	4421      	add	r1, r4
 80092d4:	1854      	adds	r4, r2, r1
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	6011      	str	r1, [r2, #0]
 80092da:	d1e0      	bne.n	800929e <_free_r+0x26>
 80092dc:	681c      	ldr	r4, [r3, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	6053      	str	r3, [r2, #4]
 80092e2:	4421      	add	r1, r4
 80092e4:	6011      	str	r1, [r2, #0]
 80092e6:	e7da      	b.n	800929e <_free_r+0x26>
 80092e8:	d902      	bls.n	80092f0 <_free_r+0x78>
 80092ea:	230c      	movs	r3, #12
 80092ec:	6003      	str	r3, [r0, #0]
 80092ee:	e7d6      	b.n	800929e <_free_r+0x26>
 80092f0:	6825      	ldr	r5, [r4, #0]
 80092f2:	1961      	adds	r1, r4, r5
 80092f4:	428b      	cmp	r3, r1
 80092f6:	bf04      	itt	eq
 80092f8:	6819      	ldreq	r1, [r3, #0]
 80092fa:	685b      	ldreq	r3, [r3, #4]
 80092fc:	6063      	str	r3, [r4, #4]
 80092fe:	bf04      	itt	eq
 8009300:	1949      	addeq	r1, r1, r5
 8009302:	6021      	streq	r1, [r4, #0]
 8009304:	6054      	str	r4, [r2, #4]
 8009306:	e7ca      	b.n	800929e <_free_r+0x26>
 8009308:	b003      	add	sp, #12
 800930a:	bd30      	pop	{r4, r5, pc}
 800930c:	20004cc4 	.word	0x20004cc4

08009310 <__ssputs_r>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	688e      	ldr	r6, [r1, #8]
 8009316:	429e      	cmp	r6, r3
 8009318:	4682      	mov	sl, r0
 800931a:	460c      	mov	r4, r1
 800931c:	4690      	mov	r8, r2
 800931e:	461f      	mov	r7, r3
 8009320:	d838      	bhi.n	8009394 <__ssputs_r+0x84>
 8009322:	898a      	ldrh	r2, [r1, #12]
 8009324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009328:	d032      	beq.n	8009390 <__ssputs_r+0x80>
 800932a:	6825      	ldr	r5, [r4, #0]
 800932c:	6909      	ldr	r1, [r1, #16]
 800932e:	eba5 0901 	sub.w	r9, r5, r1
 8009332:	6965      	ldr	r5, [r4, #20]
 8009334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800933c:	3301      	adds	r3, #1
 800933e:	444b      	add	r3, r9
 8009340:	106d      	asrs	r5, r5, #1
 8009342:	429d      	cmp	r5, r3
 8009344:	bf38      	it	cc
 8009346:	461d      	movcc	r5, r3
 8009348:	0553      	lsls	r3, r2, #21
 800934a:	d531      	bpl.n	80093b0 <__ssputs_r+0xa0>
 800934c:	4629      	mov	r1, r5
 800934e:	f7fd feb3 	bl	80070b8 <_malloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	b950      	cbnz	r0, 800936c <__ssputs_r+0x5c>
 8009356:	230c      	movs	r3, #12
 8009358:	f8ca 3000 	str.w	r3, [sl]
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009362:	81a3      	strh	r3, [r4, #12]
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	6921      	ldr	r1, [r4, #16]
 800936e:	464a      	mov	r2, r9
 8009370:	f7fd fe6b 	bl	800704a <memcpy>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800937a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	6126      	str	r6, [r4, #16]
 8009382:	6165      	str	r5, [r4, #20]
 8009384:	444e      	add	r6, r9
 8009386:	eba5 0509 	sub.w	r5, r5, r9
 800938a:	6026      	str	r6, [r4, #0]
 800938c:	60a5      	str	r5, [r4, #8]
 800938e:	463e      	mov	r6, r7
 8009390:	42be      	cmp	r6, r7
 8009392:	d900      	bls.n	8009396 <__ssputs_r+0x86>
 8009394:	463e      	mov	r6, r7
 8009396:	6820      	ldr	r0, [r4, #0]
 8009398:	4632      	mov	r2, r6
 800939a:	4641      	mov	r1, r8
 800939c:	f000 f968 	bl	8009670 <memmove>
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	1b9b      	subs	r3, r3, r6
 80093a4:	60a3      	str	r3, [r4, #8]
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	4433      	add	r3, r6
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	2000      	movs	r0, #0
 80093ae:	e7db      	b.n	8009368 <__ssputs_r+0x58>
 80093b0:	462a      	mov	r2, r5
 80093b2:	f000 f977 	bl	80096a4 <_realloc_r>
 80093b6:	4606      	mov	r6, r0
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1e1      	bne.n	8009380 <__ssputs_r+0x70>
 80093bc:	6921      	ldr	r1, [r4, #16]
 80093be:	4650      	mov	r0, sl
 80093c0:	f7ff ff5a 	bl	8009278 <_free_r>
 80093c4:	e7c7      	b.n	8009356 <__ssputs_r+0x46>
	...

080093c8 <_svfiprintf_r>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	4698      	mov	r8, r3
 80093ce:	898b      	ldrh	r3, [r1, #12]
 80093d0:	061b      	lsls	r3, r3, #24
 80093d2:	b09d      	sub	sp, #116	; 0x74
 80093d4:	4607      	mov	r7, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	4614      	mov	r4, r2
 80093da:	d50e      	bpl.n	80093fa <_svfiprintf_r+0x32>
 80093dc:	690b      	ldr	r3, [r1, #16]
 80093de:	b963      	cbnz	r3, 80093fa <_svfiprintf_r+0x32>
 80093e0:	2140      	movs	r1, #64	; 0x40
 80093e2:	f7fd fe69 	bl	80070b8 <_malloc_r>
 80093e6:	6028      	str	r0, [r5, #0]
 80093e8:	6128      	str	r0, [r5, #16]
 80093ea:	b920      	cbnz	r0, 80093f6 <_svfiprintf_r+0x2e>
 80093ec:	230c      	movs	r3, #12
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e0d1      	b.n	800959a <_svfiprintf_r+0x1d2>
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	616b      	str	r3, [r5, #20]
 80093fa:	2300      	movs	r3, #0
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	2320      	movs	r3, #32
 8009400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009404:	f8cd 800c 	str.w	r8, [sp, #12]
 8009408:	2330      	movs	r3, #48	; 0x30
 800940a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095b4 <_svfiprintf_r+0x1ec>
 800940e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009412:	f04f 0901 	mov.w	r9, #1
 8009416:	4623      	mov	r3, r4
 8009418:	469a      	mov	sl, r3
 800941a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941e:	b10a      	cbz	r2, 8009424 <_svfiprintf_r+0x5c>
 8009420:	2a25      	cmp	r2, #37	; 0x25
 8009422:	d1f9      	bne.n	8009418 <_svfiprintf_r+0x50>
 8009424:	ebba 0b04 	subs.w	fp, sl, r4
 8009428:	d00b      	beq.n	8009442 <_svfiprintf_r+0x7a>
 800942a:	465b      	mov	r3, fp
 800942c:	4622      	mov	r2, r4
 800942e:	4629      	mov	r1, r5
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff ff6d 	bl	8009310 <__ssputs_r>
 8009436:	3001      	adds	r0, #1
 8009438:	f000 80aa 	beq.w	8009590 <_svfiprintf_r+0x1c8>
 800943c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943e:	445a      	add	r2, fp
 8009440:	9209      	str	r2, [sp, #36]	; 0x24
 8009442:	f89a 3000 	ldrb.w	r3, [sl]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80a2 	beq.w	8009590 <_svfiprintf_r+0x1c8>
 800944c:	2300      	movs	r3, #0
 800944e:	f04f 32ff 	mov.w	r2, #4294967295
 8009452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009456:	f10a 0a01 	add.w	sl, sl, #1
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009462:	931a      	str	r3, [sp, #104]	; 0x68
 8009464:	4654      	mov	r4, sl
 8009466:	2205      	movs	r2, #5
 8009468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946c:	4851      	ldr	r0, [pc, #324]	; (80095b4 <_svfiprintf_r+0x1ec>)
 800946e:	f7f6 febf 	bl	80001f0 <memchr>
 8009472:	9a04      	ldr	r2, [sp, #16]
 8009474:	b9d8      	cbnz	r0, 80094ae <_svfiprintf_r+0xe6>
 8009476:	06d0      	lsls	r0, r2, #27
 8009478:	bf44      	itt	mi
 800947a:	2320      	movmi	r3, #32
 800947c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009480:	0711      	lsls	r1, r2, #28
 8009482:	bf44      	itt	mi
 8009484:	232b      	movmi	r3, #43	; 0x2b
 8009486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800948a:	f89a 3000 	ldrb.w	r3, [sl]
 800948e:	2b2a      	cmp	r3, #42	; 0x2a
 8009490:	d015      	beq.n	80094be <_svfiprintf_r+0xf6>
 8009492:	9a07      	ldr	r2, [sp, #28]
 8009494:	4654      	mov	r4, sl
 8009496:	2000      	movs	r0, #0
 8009498:	f04f 0c0a 	mov.w	ip, #10
 800949c:	4621      	mov	r1, r4
 800949e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a2:	3b30      	subs	r3, #48	; 0x30
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d94e      	bls.n	8009546 <_svfiprintf_r+0x17e>
 80094a8:	b1b0      	cbz	r0, 80094d8 <_svfiprintf_r+0x110>
 80094aa:	9207      	str	r2, [sp, #28]
 80094ac:	e014      	b.n	80094d8 <_svfiprintf_r+0x110>
 80094ae:	eba0 0308 	sub.w	r3, r0, r8
 80094b2:	fa09 f303 	lsl.w	r3, r9, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	46a2      	mov	sl, r4
 80094bc:	e7d2      	b.n	8009464 <_svfiprintf_r+0x9c>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	1d19      	adds	r1, r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	9103      	str	r1, [sp, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfbb      	ittet	lt
 80094ca:	425b      	neglt	r3, r3
 80094cc:	f042 0202 	orrlt.w	r2, r2, #2
 80094d0:	9307      	strge	r3, [sp, #28]
 80094d2:	9307      	strlt	r3, [sp, #28]
 80094d4:	bfb8      	it	lt
 80094d6:	9204      	strlt	r2, [sp, #16]
 80094d8:	7823      	ldrb	r3, [r4, #0]
 80094da:	2b2e      	cmp	r3, #46	; 0x2e
 80094dc:	d10c      	bne.n	80094f8 <_svfiprintf_r+0x130>
 80094de:	7863      	ldrb	r3, [r4, #1]
 80094e0:	2b2a      	cmp	r3, #42	; 0x2a
 80094e2:	d135      	bne.n	8009550 <_svfiprintf_r+0x188>
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	1d1a      	adds	r2, r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	9203      	str	r2, [sp, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bfb8      	it	lt
 80094f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80094f4:	3402      	adds	r4, #2
 80094f6:	9305      	str	r3, [sp, #20]
 80094f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095c4 <_svfiprintf_r+0x1fc>
 80094fc:	7821      	ldrb	r1, [r4, #0]
 80094fe:	2203      	movs	r2, #3
 8009500:	4650      	mov	r0, sl
 8009502:	f7f6 fe75 	bl	80001f0 <memchr>
 8009506:	b140      	cbz	r0, 800951a <_svfiprintf_r+0x152>
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	eba0 000a 	sub.w	r0, r0, sl
 800950e:	fa03 f000 	lsl.w	r0, r3, r0
 8009512:	9b04      	ldr	r3, [sp, #16]
 8009514:	4303      	orrs	r3, r0
 8009516:	3401      	adds	r4, #1
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	4826      	ldr	r0, [pc, #152]	; (80095b8 <_svfiprintf_r+0x1f0>)
 8009520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009524:	2206      	movs	r2, #6
 8009526:	f7f6 fe63 	bl	80001f0 <memchr>
 800952a:	2800      	cmp	r0, #0
 800952c:	d038      	beq.n	80095a0 <_svfiprintf_r+0x1d8>
 800952e:	4b23      	ldr	r3, [pc, #140]	; (80095bc <_svfiprintf_r+0x1f4>)
 8009530:	bb1b      	cbnz	r3, 800957a <_svfiprintf_r+0x1b2>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	3307      	adds	r3, #7
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	3308      	adds	r3, #8
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	4433      	add	r3, r6
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	e767      	b.n	8009416 <_svfiprintf_r+0x4e>
 8009546:	fb0c 3202 	mla	r2, ip, r2, r3
 800954a:	460c      	mov	r4, r1
 800954c:	2001      	movs	r0, #1
 800954e:	e7a5      	b.n	800949c <_svfiprintf_r+0xd4>
 8009550:	2300      	movs	r3, #0
 8009552:	3401      	adds	r4, #1
 8009554:	9305      	str	r3, [sp, #20]
 8009556:	4619      	mov	r1, r3
 8009558:	f04f 0c0a 	mov.w	ip, #10
 800955c:	4620      	mov	r0, r4
 800955e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009562:	3a30      	subs	r2, #48	; 0x30
 8009564:	2a09      	cmp	r2, #9
 8009566:	d903      	bls.n	8009570 <_svfiprintf_r+0x1a8>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0c5      	beq.n	80094f8 <_svfiprintf_r+0x130>
 800956c:	9105      	str	r1, [sp, #20]
 800956e:	e7c3      	b.n	80094f8 <_svfiprintf_r+0x130>
 8009570:	fb0c 2101 	mla	r1, ip, r1, r2
 8009574:	4604      	mov	r4, r0
 8009576:	2301      	movs	r3, #1
 8009578:	e7f0      	b.n	800955c <_svfiprintf_r+0x194>
 800957a:	ab03      	add	r3, sp, #12
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	462a      	mov	r2, r5
 8009580:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <_svfiprintf_r+0x1f8>)
 8009582:	a904      	add	r1, sp, #16
 8009584:	4638      	mov	r0, r7
 8009586:	f7fd feab 	bl	80072e0 <_printf_float>
 800958a:	1c42      	adds	r2, r0, #1
 800958c:	4606      	mov	r6, r0
 800958e:	d1d6      	bne.n	800953e <_svfiprintf_r+0x176>
 8009590:	89ab      	ldrh	r3, [r5, #12]
 8009592:	065b      	lsls	r3, r3, #25
 8009594:	f53f af2c 	bmi.w	80093f0 <_svfiprintf_r+0x28>
 8009598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959a:	b01d      	add	sp, #116	; 0x74
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	ab03      	add	r3, sp, #12
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	462a      	mov	r2, r5
 80095a6:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <_svfiprintf_r+0x1f8>)
 80095a8:	a904      	add	r1, sp, #16
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7fe f93c 	bl	8007828 <_printf_i>
 80095b0:	e7eb      	b.n	800958a <_svfiprintf_r+0x1c2>
 80095b2:	bf00      	nop
 80095b4:	0800a4e4 	.word	0x0800a4e4
 80095b8:	0800a4ee 	.word	0x0800a4ee
 80095bc:	080072e1 	.word	0x080072e1
 80095c0:	08009311 	.word	0x08009311
 80095c4:	0800a4ea 	.word	0x0800a4ea

080095c8 <_read_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	; (80095e8 <_read_r+0x20>)
 80095cc:	4604      	mov	r4, r0
 80095ce:	4608      	mov	r0, r1
 80095d0:	4611      	mov	r1, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	602a      	str	r2, [r5, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f7f8 f97a 	bl	80018d0 <_read>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_read_r+0x1e>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_read_r+0x1e>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20004ccc 	.word	0x20004ccc

080095ec <__assert_func>:
 80095ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ee:	4614      	mov	r4, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	4b09      	ldr	r3, [pc, #36]	; (8009618 <__assert_func+0x2c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4605      	mov	r5, r0
 80095f8:	68d8      	ldr	r0, [r3, #12]
 80095fa:	b14c      	cbz	r4, 8009610 <__assert_func+0x24>
 80095fc:	4b07      	ldr	r3, [pc, #28]	; (800961c <__assert_func+0x30>)
 80095fe:	9100      	str	r1, [sp, #0]
 8009600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009604:	4906      	ldr	r1, [pc, #24]	; (8009620 <__assert_func+0x34>)
 8009606:	462b      	mov	r3, r5
 8009608:	f000 f80e 	bl	8009628 <fiprintf>
 800960c:	f000 faa0 	bl	8009b50 <abort>
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <__assert_func+0x38>)
 8009612:	461c      	mov	r4, r3
 8009614:	e7f3      	b.n	80095fe <__assert_func+0x12>
 8009616:	bf00      	nop
 8009618:	20000010 	.word	0x20000010
 800961c:	0800a4f5 	.word	0x0800a4f5
 8009620:	0800a502 	.word	0x0800a502
 8009624:	0800a530 	.word	0x0800a530

08009628 <fiprintf>:
 8009628:	b40e      	push	{r1, r2, r3}
 800962a:	b503      	push	{r0, r1, lr}
 800962c:	4601      	mov	r1, r0
 800962e:	ab03      	add	r3, sp, #12
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <fiprintf+0x20>)
 8009632:	f853 2b04 	ldr.w	r2, [r3], #4
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	f000 f88b 	bl	8009754 <_vfiprintf_r>
 800963e:	b002      	add	sp, #8
 8009640:	f85d eb04 	ldr.w	lr, [sp], #4
 8009644:	b003      	add	sp, #12
 8009646:	4770      	bx	lr
 8009648:	20000010 	.word	0x20000010

0800964c <__ascii_mbtowc>:
 800964c:	b082      	sub	sp, #8
 800964e:	b901      	cbnz	r1, 8009652 <__ascii_mbtowc+0x6>
 8009650:	a901      	add	r1, sp, #4
 8009652:	b142      	cbz	r2, 8009666 <__ascii_mbtowc+0x1a>
 8009654:	b14b      	cbz	r3, 800966a <__ascii_mbtowc+0x1e>
 8009656:	7813      	ldrb	r3, [r2, #0]
 8009658:	600b      	str	r3, [r1, #0]
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	1e10      	subs	r0, r2, #0
 800965e:	bf18      	it	ne
 8009660:	2001      	movne	r0, #1
 8009662:	b002      	add	sp, #8
 8009664:	4770      	bx	lr
 8009666:	4610      	mov	r0, r2
 8009668:	e7fb      	b.n	8009662 <__ascii_mbtowc+0x16>
 800966a:	f06f 0001 	mvn.w	r0, #1
 800966e:	e7f8      	b.n	8009662 <__ascii_mbtowc+0x16>

08009670 <memmove>:
 8009670:	4288      	cmp	r0, r1
 8009672:	b510      	push	{r4, lr}
 8009674:	eb01 0402 	add.w	r4, r1, r2
 8009678:	d902      	bls.n	8009680 <memmove+0x10>
 800967a:	4284      	cmp	r4, r0
 800967c:	4623      	mov	r3, r4
 800967e:	d807      	bhi.n	8009690 <memmove+0x20>
 8009680:	1e43      	subs	r3, r0, #1
 8009682:	42a1      	cmp	r1, r4
 8009684:	d008      	beq.n	8009698 <memmove+0x28>
 8009686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800968a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800968e:	e7f8      	b.n	8009682 <memmove+0x12>
 8009690:	4402      	add	r2, r0
 8009692:	4601      	mov	r1, r0
 8009694:	428a      	cmp	r2, r1
 8009696:	d100      	bne.n	800969a <memmove+0x2a>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800969e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096a2:	e7f7      	b.n	8009694 <memmove+0x24>

080096a4 <_realloc_r>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	4680      	mov	r8, r0
 80096aa:	4614      	mov	r4, r2
 80096ac:	460e      	mov	r6, r1
 80096ae:	b921      	cbnz	r1, 80096ba <_realloc_r+0x16>
 80096b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	4611      	mov	r1, r2
 80096b6:	f7fd bcff 	b.w	80070b8 <_malloc_r>
 80096ba:	b92a      	cbnz	r2, 80096c8 <_realloc_r+0x24>
 80096bc:	f7ff fddc 	bl	8009278 <_free_r>
 80096c0:	4625      	mov	r5, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	f000 faae 	bl	8009c28 <_malloc_usable_size_r>
 80096cc:	4284      	cmp	r4, r0
 80096ce:	4607      	mov	r7, r0
 80096d0:	d802      	bhi.n	80096d8 <_realloc_r+0x34>
 80096d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096d6:	d812      	bhi.n	80096fe <_realloc_r+0x5a>
 80096d8:	4621      	mov	r1, r4
 80096da:	4640      	mov	r0, r8
 80096dc:	f7fd fcec 	bl	80070b8 <_malloc_r>
 80096e0:	4605      	mov	r5, r0
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d0ed      	beq.n	80096c2 <_realloc_r+0x1e>
 80096e6:	42bc      	cmp	r4, r7
 80096e8:	4622      	mov	r2, r4
 80096ea:	4631      	mov	r1, r6
 80096ec:	bf28      	it	cs
 80096ee:	463a      	movcs	r2, r7
 80096f0:	f7fd fcab 	bl	800704a <memcpy>
 80096f4:	4631      	mov	r1, r6
 80096f6:	4640      	mov	r0, r8
 80096f8:	f7ff fdbe 	bl	8009278 <_free_r>
 80096fc:	e7e1      	b.n	80096c2 <_realloc_r+0x1e>
 80096fe:	4635      	mov	r5, r6
 8009700:	e7df      	b.n	80096c2 <_realloc_r+0x1e>

08009702 <__sfputc_r>:
 8009702:	6893      	ldr	r3, [r2, #8]
 8009704:	3b01      	subs	r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	b410      	push	{r4}
 800970a:	6093      	str	r3, [r2, #8]
 800970c:	da08      	bge.n	8009720 <__sfputc_r+0x1e>
 800970e:	6994      	ldr	r4, [r2, #24]
 8009710:	42a3      	cmp	r3, r4
 8009712:	db01      	blt.n	8009718 <__sfputc_r+0x16>
 8009714:	290a      	cmp	r1, #10
 8009716:	d103      	bne.n	8009720 <__sfputc_r+0x1e>
 8009718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800971c:	f000 b94a 	b.w	80099b4 <__swbuf_r>
 8009720:	6813      	ldr	r3, [r2, #0]
 8009722:	1c58      	adds	r0, r3, #1
 8009724:	6010      	str	r0, [r2, #0]
 8009726:	7019      	strb	r1, [r3, #0]
 8009728:	4608      	mov	r0, r1
 800972a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972e:	4770      	bx	lr

08009730 <__sfputs_r>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	4614      	mov	r4, r2
 8009738:	18d5      	adds	r5, r2, r3
 800973a:	42ac      	cmp	r4, r5
 800973c:	d101      	bne.n	8009742 <__sfputs_r+0x12>
 800973e:	2000      	movs	r0, #0
 8009740:	e007      	b.n	8009752 <__sfputs_r+0x22>
 8009742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009746:	463a      	mov	r2, r7
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff ffda 	bl	8009702 <__sfputc_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d1f3      	bne.n	800973a <__sfputs_r+0xa>
 8009752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009754 <_vfiprintf_r>:
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	460d      	mov	r5, r1
 800975a:	b09d      	sub	sp, #116	; 0x74
 800975c:	4614      	mov	r4, r2
 800975e:	4698      	mov	r8, r3
 8009760:	4606      	mov	r6, r0
 8009762:	b118      	cbz	r0, 800976c <_vfiprintf_r+0x18>
 8009764:	6983      	ldr	r3, [r0, #24]
 8009766:	b90b      	cbnz	r3, 800976c <_vfiprintf_r+0x18>
 8009768:	f7fd fbaa 	bl	8006ec0 <__sinit>
 800976c:	4b89      	ldr	r3, [pc, #548]	; (8009994 <_vfiprintf_r+0x240>)
 800976e:	429d      	cmp	r5, r3
 8009770:	d11b      	bne.n	80097aa <_vfiprintf_r+0x56>
 8009772:	6875      	ldr	r5, [r6, #4]
 8009774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009776:	07d9      	lsls	r1, r3, #31
 8009778:	d405      	bmi.n	8009786 <_vfiprintf_r+0x32>
 800977a:	89ab      	ldrh	r3, [r5, #12]
 800977c:	059a      	lsls	r2, r3, #22
 800977e:	d402      	bmi.n	8009786 <_vfiprintf_r+0x32>
 8009780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009782:	f7fd fc60 	bl	8007046 <__retarget_lock_acquire_recursive>
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	071b      	lsls	r3, r3, #28
 800978a:	d501      	bpl.n	8009790 <_vfiprintf_r+0x3c>
 800978c:	692b      	ldr	r3, [r5, #16]
 800978e:	b9eb      	cbnz	r3, 80097cc <_vfiprintf_r+0x78>
 8009790:	4629      	mov	r1, r5
 8009792:	4630      	mov	r0, r6
 8009794:	f000 f96e 	bl	8009a74 <__swsetup_r>
 8009798:	b1c0      	cbz	r0, 80097cc <_vfiprintf_r+0x78>
 800979a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979c:	07dc      	lsls	r4, r3, #31
 800979e:	d50e      	bpl.n	80097be <_vfiprintf_r+0x6a>
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	b01d      	add	sp, #116	; 0x74
 80097a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097aa:	4b7b      	ldr	r3, [pc, #492]	; (8009998 <_vfiprintf_r+0x244>)
 80097ac:	429d      	cmp	r5, r3
 80097ae:	d101      	bne.n	80097b4 <_vfiprintf_r+0x60>
 80097b0:	68b5      	ldr	r5, [r6, #8]
 80097b2:	e7df      	b.n	8009774 <_vfiprintf_r+0x20>
 80097b4:	4b79      	ldr	r3, [pc, #484]	; (800999c <_vfiprintf_r+0x248>)
 80097b6:	429d      	cmp	r5, r3
 80097b8:	bf08      	it	eq
 80097ba:	68f5      	ldreq	r5, [r6, #12]
 80097bc:	e7da      	b.n	8009774 <_vfiprintf_r+0x20>
 80097be:	89ab      	ldrh	r3, [r5, #12]
 80097c0:	0598      	lsls	r0, r3, #22
 80097c2:	d4ed      	bmi.n	80097a0 <_vfiprintf_r+0x4c>
 80097c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c6:	f7fd fc3f 	bl	8007048 <__retarget_lock_release_recursive>
 80097ca:	e7e9      	b.n	80097a0 <_vfiprintf_r+0x4c>
 80097cc:	2300      	movs	r3, #0
 80097ce:	9309      	str	r3, [sp, #36]	; 0x24
 80097d0:	2320      	movs	r3, #32
 80097d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097da:	2330      	movs	r3, #48	; 0x30
 80097dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099a0 <_vfiprintf_r+0x24c>
 80097e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e4:	f04f 0901 	mov.w	r9, #1
 80097e8:	4623      	mov	r3, r4
 80097ea:	469a      	mov	sl, r3
 80097ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f0:	b10a      	cbz	r2, 80097f6 <_vfiprintf_r+0xa2>
 80097f2:	2a25      	cmp	r2, #37	; 0x25
 80097f4:	d1f9      	bne.n	80097ea <_vfiprintf_r+0x96>
 80097f6:	ebba 0b04 	subs.w	fp, sl, r4
 80097fa:	d00b      	beq.n	8009814 <_vfiprintf_r+0xc0>
 80097fc:	465b      	mov	r3, fp
 80097fe:	4622      	mov	r2, r4
 8009800:	4629      	mov	r1, r5
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ff94 	bl	8009730 <__sfputs_r>
 8009808:	3001      	adds	r0, #1
 800980a:	f000 80aa 	beq.w	8009962 <_vfiprintf_r+0x20e>
 800980e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009810:	445a      	add	r2, fp
 8009812:	9209      	str	r2, [sp, #36]	; 0x24
 8009814:	f89a 3000 	ldrb.w	r3, [sl]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80a2 	beq.w	8009962 <_vfiprintf_r+0x20e>
 800981e:	2300      	movs	r3, #0
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009828:	f10a 0a01 	add.w	sl, sl, #1
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009834:	931a      	str	r3, [sp, #104]	; 0x68
 8009836:	4654      	mov	r4, sl
 8009838:	2205      	movs	r2, #5
 800983a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983e:	4858      	ldr	r0, [pc, #352]	; (80099a0 <_vfiprintf_r+0x24c>)
 8009840:	f7f6 fcd6 	bl	80001f0 <memchr>
 8009844:	9a04      	ldr	r2, [sp, #16]
 8009846:	b9d8      	cbnz	r0, 8009880 <_vfiprintf_r+0x12c>
 8009848:	06d1      	lsls	r1, r2, #27
 800984a:	bf44      	itt	mi
 800984c:	2320      	movmi	r3, #32
 800984e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009852:	0713      	lsls	r3, r2, #28
 8009854:	bf44      	itt	mi
 8009856:	232b      	movmi	r3, #43	; 0x2b
 8009858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800985c:	f89a 3000 	ldrb.w	r3, [sl]
 8009860:	2b2a      	cmp	r3, #42	; 0x2a
 8009862:	d015      	beq.n	8009890 <_vfiprintf_r+0x13c>
 8009864:	9a07      	ldr	r2, [sp, #28]
 8009866:	4654      	mov	r4, sl
 8009868:	2000      	movs	r0, #0
 800986a:	f04f 0c0a 	mov.w	ip, #10
 800986e:	4621      	mov	r1, r4
 8009870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009874:	3b30      	subs	r3, #48	; 0x30
 8009876:	2b09      	cmp	r3, #9
 8009878:	d94e      	bls.n	8009918 <_vfiprintf_r+0x1c4>
 800987a:	b1b0      	cbz	r0, 80098aa <_vfiprintf_r+0x156>
 800987c:	9207      	str	r2, [sp, #28]
 800987e:	e014      	b.n	80098aa <_vfiprintf_r+0x156>
 8009880:	eba0 0308 	sub.w	r3, r0, r8
 8009884:	fa09 f303 	lsl.w	r3, r9, r3
 8009888:	4313      	orrs	r3, r2
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	46a2      	mov	sl, r4
 800988e:	e7d2      	b.n	8009836 <_vfiprintf_r+0xe2>
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	1d19      	adds	r1, r3, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	9103      	str	r1, [sp, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfbb      	ittet	lt
 800989c:	425b      	neglt	r3, r3
 800989e:	f042 0202 	orrlt.w	r2, r2, #2
 80098a2:	9307      	strge	r3, [sp, #28]
 80098a4:	9307      	strlt	r3, [sp, #28]
 80098a6:	bfb8      	it	lt
 80098a8:	9204      	strlt	r2, [sp, #16]
 80098aa:	7823      	ldrb	r3, [r4, #0]
 80098ac:	2b2e      	cmp	r3, #46	; 0x2e
 80098ae:	d10c      	bne.n	80098ca <_vfiprintf_r+0x176>
 80098b0:	7863      	ldrb	r3, [r4, #1]
 80098b2:	2b2a      	cmp	r3, #42	; 0x2a
 80098b4:	d135      	bne.n	8009922 <_vfiprintf_r+0x1ce>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	1d1a      	adds	r2, r3, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	9203      	str	r2, [sp, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bfb8      	it	lt
 80098c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80098c6:	3402      	adds	r4, #2
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099b0 <_vfiprintf_r+0x25c>
 80098ce:	7821      	ldrb	r1, [r4, #0]
 80098d0:	2203      	movs	r2, #3
 80098d2:	4650      	mov	r0, sl
 80098d4:	f7f6 fc8c 	bl	80001f0 <memchr>
 80098d8:	b140      	cbz	r0, 80098ec <_vfiprintf_r+0x198>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	eba0 000a 	sub.w	r0, r0, sl
 80098e0:	fa03 f000 	lsl.w	r0, r3, r0
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	4303      	orrs	r3, r0
 80098e8:	3401      	adds	r4, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f0:	482c      	ldr	r0, [pc, #176]	; (80099a4 <_vfiprintf_r+0x250>)
 80098f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098f6:	2206      	movs	r2, #6
 80098f8:	f7f6 fc7a 	bl	80001f0 <memchr>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d03f      	beq.n	8009980 <_vfiprintf_r+0x22c>
 8009900:	4b29      	ldr	r3, [pc, #164]	; (80099a8 <_vfiprintf_r+0x254>)
 8009902:	bb1b      	cbnz	r3, 800994c <_vfiprintf_r+0x1f8>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	3307      	adds	r3, #7
 8009908:	f023 0307 	bic.w	r3, r3, #7
 800990c:	3308      	adds	r3, #8
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009912:	443b      	add	r3, r7
 8009914:	9309      	str	r3, [sp, #36]	; 0x24
 8009916:	e767      	b.n	80097e8 <_vfiprintf_r+0x94>
 8009918:	fb0c 3202 	mla	r2, ip, r2, r3
 800991c:	460c      	mov	r4, r1
 800991e:	2001      	movs	r0, #1
 8009920:	e7a5      	b.n	800986e <_vfiprintf_r+0x11a>
 8009922:	2300      	movs	r3, #0
 8009924:	3401      	adds	r4, #1
 8009926:	9305      	str	r3, [sp, #20]
 8009928:	4619      	mov	r1, r3
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4620      	mov	r0, r4
 8009930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009934:	3a30      	subs	r2, #48	; 0x30
 8009936:	2a09      	cmp	r2, #9
 8009938:	d903      	bls.n	8009942 <_vfiprintf_r+0x1ee>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c5      	beq.n	80098ca <_vfiprintf_r+0x176>
 800993e:	9105      	str	r1, [sp, #20]
 8009940:	e7c3      	b.n	80098ca <_vfiprintf_r+0x176>
 8009942:	fb0c 2101 	mla	r1, ip, r1, r2
 8009946:	4604      	mov	r4, r0
 8009948:	2301      	movs	r3, #1
 800994a:	e7f0      	b.n	800992e <_vfiprintf_r+0x1da>
 800994c:	ab03      	add	r3, sp, #12
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	462a      	mov	r2, r5
 8009952:	4b16      	ldr	r3, [pc, #88]	; (80099ac <_vfiprintf_r+0x258>)
 8009954:	a904      	add	r1, sp, #16
 8009956:	4630      	mov	r0, r6
 8009958:	f7fd fcc2 	bl	80072e0 <_printf_float>
 800995c:	4607      	mov	r7, r0
 800995e:	1c78      	adds	r0, r7, #1
 8009960:	d1d6      	bne.n	8009910 <_vfiprintf_r+0x1bc>
 8009962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009964:	07d9      	lsls	r1, r3, #31
 8009966:	d405      	bmi.n	8009974 <_vfiprintf_r+0x220>
 8009968:	89ab      	ldrh	r3, [r5, #12]
 800996a:	059a      	lsls	r2, r3, #22
 800996c:	d402      	bmi.n	8009974 <_vfiprintf_r+0x220>
 800996e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009970:	f7fd fb6a 	bl	8007048 <__retarget_lock_release_recursive>
 8009974:	89ab      	ldrh	r3, [r5, #12]
 8009976:	065b      	lsls	r3, r3, #25
 8009978:	f53f af12 	bmi.w	80097a0 <_vfiprintf_r+0x4c>
 800997c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800997e:	e711      	b.n	80097a4 <_vfiprintf_r+0x50>
 8009980:	ab03      	add	r3, sp, #12
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	462a      	mov	r2, r5
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <_vfiprintf_r+0x258>)
 8009988:	a904      	add	r1, sp, #16
 800998a:	4630      	mov	r0, r6
 800998c:	f7fd ff4c 	bl	8007828 <_printf_i>
 8009990:	e7e4      	b.n	800995c <_vfiprintf_r+0x208>
 8009992:	bf00      	nop
 8009994:	0800a280 	.word	0x0800a280
 8009998:	0800a2a0 	.word	0x0800a2a0
 800999c:	0800a260 	.word	0x0800a260
 80099a0:	0800a4e4 	.word	0x0800a4e4
 80099a4:	0800a4ee 	.word	0x0800a4ee
 80099a8:	080072e1 	.word	0x080072e1
 80099ac:	08009731 	.word	0x08009731
 80099b0:	0800a4ea 	.word	0x0800a4ea

080099b4 <__swbuf_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	460e      	mov	r6, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	4605      	mov	r5, r0
 80099bc:	b118      	cbz	r0, 80099c6 <__swbuf_r+0x12>
 80099be:	6983      	ldr	r3, [r0, #24]
 80099c0:	b90b      	cbnz	r3, 80099c6 <__swbuf_r+0x12>
 80099c2:	f7fd fa7d 	bl	8006ec0 <__sinit>
 80099c6:	4b21      	ldr	r3, [pc, #132]	; (8009a4c <__swbuf_r+0x98>)
 80099c8:	429c      	cmp	r4, r3
 80099ca:	d12b      	bne.n	8009a24 <__swbuf_r+0x70>
 80099cc:	686c      	ldr	r4, [r5, #4]
 80099ce:	69a3      	ldr	r3, [r4, #24]
 80099d0:	60a3      	str	r3, [r4, #8]
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	071a      	lsls	r2, r3, #28
 80099d6:	d52f      	bpl.n	8009a38 <__swbuf_r+0x84>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	b36b      	cbz	r3, 8009a38 <__swbuf_r+0x84>
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	1ac0      	subs	r0, r0, r3
 80099e2:	6963      	ldr	r3, [r4, #20]
 80099e4:	b2f6      	uxtb	r6, r6
 80099e6:	4283      	cmp	r3, r0
 80099e8:	4637      	mov	r7, r6
 80099ea:	dc04      	bgt.n	80099f6 <__swbuf_r+0x42>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff f842 	bl	8008a78 <_fflush_r>
 80099f4:	bb30      	cbnz	r0, 8009a44 <__swbuf_r+0x90>
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	6022      	str	r2, [r4, #0]
 8009a02:	701e      	strb	r6, [r3, #0]
 8009a04:	6963      	ldr	r3, [r4, #20]
 8009a06:	3001      	adds	r0, #1
 8009a08:	4283      	cmp	r3, r0
 8009a0a:	d004      	beq.n	8009a16 <__swbuf_r+0x62>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	07db      	lsls	r3, r3, #31
 8009a10:	d506      	bpl.n	8009a20 <__swbuf_r+0x6c>
 8009a12:	2e0a      	cmp	r6, #10
 8009a14:	d104      	bne.n	8009a20 <__swbuf_r+0x6c>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f7ff f82d 	bl	8008a78 <_fflush_r>
 8009a1e:	b988      	cbnz	r0, 8009a44 <__swbuf_r+0x90>
 8009a20:	4638      	mov	r0, r7
 8009a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <__swbuf_r+0x9c>)
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d101      	bne.n	8009a2e <__swbuf_r+0x7a>
 8009a2a:	68ac      	ldr	r4, [r5, #8]
 8009a2c:	e7cf      	b.n	80099ce <__swbuf_r+0x1a>
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <__swbuf_r+0xa0>)
 8009a30:	429c      	cmp	r4, r3
 8009a32:	bf08      	it	eq
 8009a34:	68ec      	ldreq	r4, [r5, #12]
 8009a36:	e7ca      	b.n	80099ce <__swbuf_r+0x1a>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f000 f81a 	bl	8009a74 <__swsetup_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d0cb      	beq.n	80099dc <__swbuf_r+0x28>
 8009a44:	f04f 37ff 	mov.w	r7, #4294967295
 8009a48:	e7ea      	b.n	8009a20 <__swbuf_r+0x6c>
 8009a4a:	bf00      	nop
 8009a4c:	0800a280 	.word	0x0800a280
 8009a50:	0800a2a0 	.word	0x0800a2a0
 8009a54:	0800a260 	.word	0x0800a260

08009a58 <__ascii_wctomb>:
 8009a58:	b149      	cbz	r1, 8009a6e <__ascii_wctomb+0x16>
 8009a5a:	2aff      	cmp	r2, #255	; 0xff
 8009a5c:	bf85      	ittet	hi
 8009a5e:	238a      	movhi	r3, #138	; 0x8a
 8009a60:	6003      	strhi	r3, [r0, #0]
 8009a62:	700a      	strbls	r2, [r1, #0]
 8009a64:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a68:	bf98      	it	ls
 8009a6a:	2001      	movls	r0, #1
 8009a6c:	4770      	bx	lr
 8009a6e:	4608      	mov	r0, r1
 8009a70:	4770      	bx	lr
	...

08009a74 <__swsetup_r>:
 8009a74:	4b32      	ldr	r3, [pc, #200]	; (8009b40 <__swsetup_r+0xcc>)
 8009a76:	b570      	push	{r4, r5, r6, lr}
 8009a78:	681d      	ldr	r5, [r3, #0]
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	b125      	cbz	r5, 8009a8a <__swsetup_r+0x16>
 8009a80:	69ab      	ldr	r3, [r5, #24]
 8009a82:	b913      	cbnz	r3, 8009a8a <__swsetup_r+0x16>
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7fd fa1b 	bl	8006ec0 <__sinit>
 8009a8a:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <__swsetup_r+0xd0>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	d10f      	bne.n	8009ab0 <__swsetup_r+0x3c>
 8009a90:	686c      	ldr	r4, [r5, #4]
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a98:	0719      	lsls	r1, r3, #28
 8009a9a:	d42c      	bmi.n	8009af6 <__swsetup_r+0x82>
 8009a9c:	06dd      	lsls	r5, r3, #27
 8009a9e:	d411      	bmi.n	8009ac4 <__swsetup_r+0x50>
 8009aa0:	2309      	movs	r3, #9
 8009aa2:	6033      	str	r3, [r6, #0]
 8009aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009aae:	e03e      	b.n	8009b2e <__swsetup_r+0xba>
 8009ab0:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <__swsetup_r+0xd4>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <__swsetup_r+0x46>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7eb      	b.n	8009a92 <__swsetup_r+0x1e>
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <__swsetup_r+0xd8>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7e6      	b.n	8009a92 <__swsetup_r+0x1e>
 8009ac4:	0758      	lsls	r0, r3, #29
 8009ac6:	d512      	bpl.n	8009aee <__swsetup_r+0x7a>
 8009ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aca:	b141      	cbz	r1, 8009ade <__swsetup_r+0x6a>
 8009acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d002      	beq.n	8009ada <__swsetup_r+0x66>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7ff fbcf 	bl	8009278 <_free_r>
 8009ada:	2300      	movs	r3, #0
 8009adc:	6363      	str	r3, [r4, #52]	; 0x34
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6063      	str	r3, [r4, #4]
 8009aea:	6923      	ldr	r3, [r4, #16]
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f043 0308 	orr.w	r3, r3, #8
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	b94b      	cbnz	r3, 8009b0e <__swsetup_r+0x9a>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b04:	d003      	beq.n	8009b0e <__swsetup_r+0x9a>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 f84d 	bl	8009ba8 <__smakebuf_r>
 8009b0e:	89a0      	ldrh	r0, [r4, #12]
 8009b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b14:	f010 0301 	ands.w	r3, r0, #1
 8009b18:	d00a      	beq.n	8009b30 <__swsetup_r+0xbc>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60a3      	str	r3, [r4, #8]
 8009b1e:	6963      	ldr	r3, [r4, #20]
 8009b20:	425b      	negs	r3, r3
 8009b22:	61a3      	str	r3, [r4, #24]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	b943      	cbnz	r3, 8009b3a <__swsetup_r+0xc6>
 8009b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b2c:	d1ba      	bne.n	8009aa4 <__swsetup_r+0x30>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	0781      	lsls	r1, r0, #30
 8009b32:	bf58      	it	pl
 8009b34:	6963      	ldrpl	r3, [r4, #20]
 8009b36:	60a3      	str	r3, [r4, #8]
 8009b38:	e7f4      	b.n	8009b24 <__swsetup_r+0xb0>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e7f7      	b.n	8009b2e <__swsetup_r+0xba>
 8009b3e:	bf00      	nop
 8009b40:	20000010 	.word	0x20000010
 8009b44:	0800a280 	.word	0x0800a280
 8009b48:	0800a2a0 	.word	0x0800a2a0
 8009b4c:	0800a260 	.word	0x0800a260

08009b50 <abort>:
 8009b50:	b508      	push	{r3, lr}
 8009b52:	2006      	movs	r0, #6
 8009b54:	f000 f898 	bl	8009c88 <raise>
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f7f7 feaf 	bl	80018bc <_exit>

08009b5e <__swhatbuf_r>:
 8009b5e:	b570      	push	{r4, r5, r6, lr}
 8009b60:	460e      	mov	r6, r1
 8009b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b66:	2900      	cmp	r1, #0
 8009b68:	b096      	sub	sp, #88	; 0x58
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	461d      	mov	r5, r3
 8009b6e:	da08      	bge.n	8009b82 <__swhatbuf_r+0x24>
 8009b70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	602a      	str	r2, [r5, #0]
 8009b78:	061a      	lsls	r2, r3, #24
 8009b7a:	d410      	bmi.n	8009b9e <__swhatbuf_r+0x40>
 8009b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b80:	e00e      	b.n	8009ba0 <__swhatbuf_r+0x42>
 8009b82:	466a      	mov	r2, sp
 8009b84:	f000 f89c 	bl	8009cc0 <_fstat_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	dbf1      	blt.n	8009b70 <__swhatbuf_r+0x12>
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b96:	425a      	negs	r2, r3
 8009b98:	415a      	adcs	r2, r3
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	e7ee      	b.n	8009b7c <__swhatbuf_r+0x1e>
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	b016      	add	sp, #88	; 0x58
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}

08009ba8 <__smakebuf_r>:
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bac:	079d      	lsls	r5, r3, #30
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	d507      	bpl.n	8009bc4 <__smakebuf_r+0x1c>
 8009bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	ab01      	add	r3, sp, #4
 8009bc6:	466a      	mov	r2, sp
 8009bc8:	f7ff ffc9 	bl	8009b5e <__swhatbuf_r>
 8009bcc:	9900      	ldr	r1, [sp, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7fd fa71 	bl	80070b8 <_malloc_r>
 8009bd6:	b948      	cbnz	r0, 8009bec <__smakebuf_r+0x44>
 8009bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bdc:	059a      	lsls	r2, r3, #22
 8009bde:	d4ef      	bmi.n	8009bc0 <__smakebuf_r+0x18>
 8009be0:	f023 0303 	bic.w	r3, r3, #3
 8009be4:	f043 0302 	orr.w	r3, r3, #2
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	e7e3      	b.n	8009bb4 <__smakebuf_r+0xc>
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <__smakebuf_r+0x7c>)
 8009bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	6020      	str	r0, [r4, #0]
 8009bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	6120      	str	r0, [r4, #16]
 8009c02:	b15b      	cbz	r3, 8009c1c <__smakebuf_r+0x74>
 8009c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f86b 	bl	8009ce4 <_isatty_r>
 8009c0e:	b128      	cbz	r0, 8009c1c <__smakebuf_r+0x74>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	f023 0303 	bic.w	r3, r3, #3
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	89a0      	ldrh	r0, [r4, #12]
 8009c1e:	4305      	orrs	r5, r0
 8009c20:	81a5      	strh	r5, [r4, #12]
 8009c22:	e7cd      	b.n	8009bc0 <__smakebuf_r+0x18>
 8009c24:	08006e59 	.word	0x08006e59

08009c28 <_malloc_usable_size_r>:
 8009c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2c:	1f18      	subs	r0, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfbc      	itt	lt
 8009c32:	580b      	ldrlt	r3, [r1, r0]
 8009c34:	18c0      	addlt	r0, r0, r3
 8009c36:	4770      	bx	lr

08009c38 <_raise_r>:
 8009c38:	291f      	cmp	r1, #31
 8009c3a:	b538      	push	{r3, r4, r5, lr}
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	460d      	mov	r5, r1
 8009c40:	d904      	bls.n	8009c4c <_raise_r+0x14>
 8009c42:	2316      	movs	r3, #22
 8009c44:	6003      	str	r3, [r0, #0]
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c4e:	b112      	cbz	r2, 8009c56 <_raise_r+0x1e>
 8009c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c54:	b94b      	cbnz	r3, 8009c6a <_raise_r+0x32>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f830 	bl	8009cbc <_getpid_r>
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4620      	mov	r0, r4
 8009c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c66:	f000 b817 	b.w	8009c98 <_kill_r>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d00a      	beq.n	8009c84 <_raise_r+0x4c>
 8009c6e:	1c59      	adds	r1, r3, #1
 8009c70:	d103      	bne.n	8009c7a <_raise_r+0x42>
 8009c72:	2316      	movs	r3, #22
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7e7      	b.n	8009c4a <_raise_r+0x12>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c80:	4628      	mov	r0, r5
 8009c82:	4798      	blx	r3
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7e0      	b.n	8009c4a <_raise_r+0x12>

08009c88 <raise>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <raise+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff bfd3 	b.w	8009c38 <_raise_r>
 8009c92:	bf00      	nop
 8009c94:	20000010 	.word	0x20000010

08009c98 <_kill_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_kill_r+0x20>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	f7f7 fdf9 	bl	800189c <_kill>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	d102      	bne.n	8009cb4 <_kill_r+0x1c>
 8009cae:	682b      	ldr	r3, [r5, #0]
 8009cb0:	b103      	cbz	r3, 8009cb4 <_kill_r+0x1c>
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20004ccc 	.word	0x20004ccc

08009cbc <_getpid_r>:
 8009cbc:	f7f7 bde6 	b.w	800188c <_getpid>

08009cc0 <_fstat_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_fstat_r+0x20>)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	4608      	mov	r0, r1
 8009cca:	4611      	mov	r1, r2
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	f7f7 fe44 	bl	800195a <_fstat>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	d102      	bne.n	8009cdc <_fstat_r+0x1c>
 8009cd6:	682b      	ldr	r3, [r5, #0]
 8009cd8:	b103      	cbz	r3, 8009cdc <_fstat_r+0x1c>
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	bd38      	pop	{r3, r4, r5, pc}
 8009cde:	bf00      	nop
 8009ce0:	20004ccc 	.word	0x20004ccc

08009ce4 <_isatty_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d06      	ldr	r5, [pc, #24]	; (8009d00 <_isatty_r+0x1c>)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4604      	mov	r4, r0
 8009cec:	4608      	mov	r0, r1
 8009cee:	602b      	str	r3, [r5, #0]
 8009cf0:	f7f7 fe43 	bl	800197a <_isatty>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_isatty_r+0x1a>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_isatty_r+0x1a>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20004ccc 	.word	0x20004ccc
 8009d04:	00000000 	.word	0x00000000

08009d08 <log>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	ed2d 8b02 	vpush	{d8}
 8009d0e:	ec55 4b10 	vmov	r4, r5, d0
 8009d12:	f000 f839 	bl	8009d88 <__ieee754_log>
 8009d16:	4622      	mov	r2, r4
 8009d18:	462b      	mov	r3, r5
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8009d22:	eef0 8a60 	vmov.f32	s17, s1
 8009d26:	f7f6 ff09 	bl	8000b3c <__aeabi_dcmpun>
 8009d2a:	b998      	cbnz	r0, 8009d54 <log+0x4c>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7f6 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 8009d38:	b960      	cbnz	r0, 8009d54 <log+0x4c>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	f7f6 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d46:	b160      	cbz	r0, 8009d62 <log+0x5a>
 8009d48:	f7fd f85c 	bl	8006e04 <__errno>
 8009d4c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8009d78 <log+0x70>
 8009d50:	2322      	movs	r3, #34	; 0x22
 8009d52:	6003      	str	r3, [r0, #0]
 8009d54:	eeb0 0a48 	vmov.f32	s0, s16
 8009d58:	eef0 0a68 	vmov.f32	s1, s17
 8009d5c:	ecbd 8b02 	vpop	{d8}
 8009d60:	bd38      	pop	{r3, r4, r5, pc}
 8009d62:	f7fd f84f 	bl	8006e04 <__errno>
 8009d66:	ecbd 8b02 	vpop	{d8}
 8009d6a:	2321      	movs	r3, #33	; 0x21
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d72:	4803      	ldr	r0, [pc, #12]	; (8009d80 <log+0x78>)
 8009d74:	f000 b9c4 	b.w	800a100 <nan>
 8009d78:	00000000 	.word	0x00000000
 8009d7c:	fff00000 	.word	0xfff00000
 8009d80:	0800a530 	.word	0x0800a530
 8009d84:	00000000 	.word	0x00000000

08009d88 <__ieee754_log>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	ec51 0b10 	vmov	r0, r1, d0
 8009d90:	ed2d 8b04 	vpush	{d8-d9}
 8009d94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009d98:	b083      	sub	sp, #12
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	da29      	bge.n	8009df2 <__ieee754_log+0x6a>
 8009d9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009da2:	4303      	orrs	r3, r0
 8009da4:	ee10 2a10 	vmov	r2, s0
 8009da8:	d10c      	bne.n	8009dc4 <__ieee754_log+0x3c>
 8009daa:	49cf      	ldr	r1, [pc, #828]	; (800a0e8 <__ieee754_log+0x360>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	2300      	movs	r3, #0
 8009db0:	2000      	movs	r0, #0
 8009db2:	f7f6 fd53 	bl	800085c <__aeabi_ddiv>
 8009db6:	ec41 0b10 	vmov	d0, r0, r1
 8009dba:	b003      	add	sp, #12
 8009dbc:	ecbd 8b04 	vpop	{d8-d9}
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	da05      	bge.n	8009dd4 <__ieee754_log+0x4c>
 8009dc8:	460b      	mov	r3, r1
 8009dca:	f7f6 fa65 	bl	8000298 <__aeabi_dsub>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	e7ee      	b.n	8009db2 <__ieee754_log+0x2a>
 8009dd4:	4bc5      	ldr	r3, [pc, #788]	; (800a0ec <__ieee754_log+0x364>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f7f6 fc16 	bl	8000608 <__aeabi_dmul>
 8009ddc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009de0:	460d      	mov	r5, r1
 8009de2:	4ac3      	ldr	r2, [pc, #780]	; (800a0f0 <__ieee754_log+0x368>)
 8009de4:	4295      	cmp	r5, r2
 8009de6:	dd06      	ble.n	8009df6 <__ieee754_log+0x6e>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	f7f6 fa56 	bl	800029c <__adddf3>
 8009df0:	e7e1      	b.n	8009db6 <__ieee754_log+0x2e>
 8009df2:	2300      	movs	r3, #0
 8009df4:	e7f5      	b.n	8009de2 <__ieee754_log+0x5a>
 8009df6:	152c      	asrs	r4, r5, #20
 8009df8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009dfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009e00:	441c      	add	r4, r3
 8009e02:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009e06:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e0e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009e12:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009e16:	ea42 0105 	orr.w	r1, r2, r5
 8009e1a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4bb4      	ldr	r3, [pc, #720]	; (800a0f4 <__ieee754_log+0x36c>)
 8009e22:	f7f6 fa39 	bl	8000298 <__aeabi_dsub>
 8009e26:	1cab      	adds	r3, r5, #2
 8009e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	4682      	mov	sl, r0
 8009e30:	468b      	mov	fp, r1
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	dc53      	bgt.n	8009ee0 <__ieee754_log+0x158>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f7f6 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e3e:	b1d0      	cbz	r0, 8009e76 <__ieee754_log+0xee>
 8009e40:	2c00      	cmp	r4, #0
 8009e42:	f000 8122 	beq.w	800a08a <__ieee754_log+0x302>
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7f6 fb74 	bl	8000534 <__aeabi_i2d>
 8009e4c:	a390      	add	r3, pc, #576	; (adr r3, 800a090 <__ieee754_log+0x308>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	4606      	mov	r6, r0
 8009e54:	460f      	mov	r7, r1
 8009e56:	f7f6 fbd7 	bl	8000608 <__aeabi_dmul>
 8009e5a:	a38f      	add	r3, pc, #572	; (adr r3, 800a098 <__ieee754_log+0x310>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fbce 	bl	8000608 <__aeabi_dmul>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4620      	mov	r0, r4
 8009e72:	4629      	mov	r1, r5
 8009e74:	e7ba      	b.n	8009dec <__ieee754_log+0x64>
 8009e76:	a38a      	add	r3, pc, #552	; (adr r3, 800a0a0 <__ieee754_log+0x318>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	4659      	mov	r1, fp
 8009e80:	f7f6 fbc2 	bl	8000608 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	2000      	movs	r0, #0
 8009e8a:	499b      	ldr	r1, [pc, #620]	; (800a0f8 <__ieee754_log+0x370>)
 8009e8c:	f7f6 fa04 	bl	8000298 <__aeabi_dsub>
 8009e90:	4652      	mov	r2, sl
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	465b      	mov	r3, fp
 8009e98:	4650      	mov	r0, sl
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	f7f6 fbb4 	bl	8000608 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 fbae 	bl	8000608 <__aeabi_dmul>
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	b914      	cbnz	r4, 8009eb8 <__ieee754_log+0x130>
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	e0a2      	b.n	8009ffe <__ieee754_log+0x276>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7f6 fb3b 	bl	8000534 <__aeabi_i2d>
 8009ebe:	a374      	add	r3, pc, #464	; (adr r3, 800a090 <__ieee754_log+0x308>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	f7f6 fb9e 	bl	8000608 <__aeabi_dmul>
 8009ecc:	a372      	add	r3, pc, #456	; (adr r3, 800a098 <__ieee754_log+0x310>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fb95 	bl	8000608 <__aeabi_dmul>
 8009ede:	e0a7      	b.n	800a030 <__ieee754_log+0x2a8>
 8009ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ee4:	f7f6 f9da 	bl	800029c <__adddf3>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4650      	mov	r0, sl
 8009eee:	4659      	mov	r1, fp
 8009ef0:	f7f6 fcb4 	bl	800085c <__aeabi_ddiv>
 8009ef4:	ec41 0b18 	vmov	d8, r0, r1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7f6 fb1b 	bl	8000534 <__aeabi_i2d>
 8009efe:	ec53 2b18 	vmov	r2, r3, d8
 8009f02:	ec41 0b19 	vmov	d9, r0, r1
 8009f06:	ec51 0b18 	vmov	r0, r1, d8
 8009f0a:	f7f6 fb7d 	bl	8000608 <__aeabi_dmul>
 8009f0e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009f12:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	4689      	mov	r9, r1
 8009f20:	f7f6 fb72 	bl	8000608 <__aeabi_dmul>
 8009f24:	a360      	add	r3, pc, #384	; (adr r3, 800a0a8 <__ieee754_log+0x320>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	a35f      	add	r3, pc, #380	; (adr r3, 800a0b0 <__ieee754_log+0x328>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 f9b0 	bl	800029c <__adddf3>
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	463b      	mov	r3, r7
 8009f40:	f7f6 fb62 	bl	8000608 <__aeabi_dmul>
 8009f44:	a35c      	add	r3, pc, #368	; (adr r3, 800a0b8 <__ieee754_log+0x330>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 f9a7 	bl	800029c <__adddf3>
 8009f4e:	4632      	mov	r2, r6
 8009f50:	463b      	mov	r3, r7
 8009f52:	f7f6 fb59 	bl	8000608 <__aeabi_dmul>
 8009f56:	a35a      	add	r3, pc, #360	; (adr r3, 800a0c0 <__ieee754_log+0x338>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 f99e 	bl	800029c <__adddf3>
 8009f60:	4642      	mov	r2, r8
 8009f62:	464b      	mov	r3, r9
 8009f64:	f7f6 fb50 	bl	8000608 <__aeabi_dmul>
 8009f68:	a357      	add	r3, pc, #348	; (adr r3, 800a0c8 <__ieee754_log+0x340>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4689      	mov	r9, r1
 8009f72:	4630      	mov	r0, r6
 8009f74:	4639      	mov	r1, r7
 8009f76:	f7f6 fb47 	bl	8000608 <__aeabi_dmul>
 8009f7a:	a355      	add	r3, pc, #340	; (adr r3, 800a0d0 <__ieee754_log+0x348>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f98c 	bl	800029c <__adddf3>
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	f7f6 fb3e 	bl	8000608 <__aeabi_dmul>
 8009f8c:	a352      	add	r3, pc, #328	; (adr r3, 800a0d8 <__ieee754_log+0x350>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f983 	bl	800029c <__adddf3>
 8009f96:	4632      	mov	r2, r6
 8009f98:	463b      	mov	r3, r7
 8009f9a:	f7f6 fb35 	bl	8000608 <__aeabi_dmul>
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	f7f6 f979 	bl	800029c <__adddf3>
 8009faa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	3551      	adds	r5, #81	; 0x51
 8009fb2:	431d      	orrs	r5, r3
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	4689      	mov	r9, r1
 8009fba:	dd48      	ble.n	800a04e <__ieee754_log+0x2c6>
 8009fbc:	4b4e      	ldr	r3, [pc, #312]	; (800a0f8 <__ieee754_log+0x370>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	4659      	mov	r1, fp
 8009fc4:	f7f6 fb20 	bl	8000608 <__aeabi_dmul>
 8009fc8:	4652      	mov	r2, sl
 8009fca:	465b      	mov	r3, fp
 8009fcc:	f7f6 fb1c 	bl	8000608 <__aeabi_dmul>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 f95e 	bl	800029c <__adddf3>
 8009fe0:	ec53 2b18 	vmov	r2, r3, d8
 8009fe4:	f7f6 fb10 	bl	8000608 <__aeabi_dmul>
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4689      	mov	r9, r1
 8009fec:	b964      	cbnz	r4, 800a008 <__ieee754_log+0x280>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 f94f 	bl	8000298 <__aeabi_dsub>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4650      	mov	r0, sl
 800a000:	4659      	mov	r1, fp
 800a002:	f7f6 f949 	bl	8000298 <__aeabi_dsub>
 800a006:	e6d6      	b.n	8009db6 <__ieee754_log+0x2e>
 800a008:	a321      	add	r3, pc, #132	; (adr r3, 800a090 <__ieee754_log+0x308>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	ec51 0b19 	vmov	r0, r1, d9
 800a012:	f7f6 faf9 	bl	8000608 <__aeabi_dmul>
 800a016:	a320      	add	r3, pc, #128	; (adr r3, 800a098 <__ieee754_log+0x310>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	4604      	mov	r4, r0
 800a01e:	460d      	mov	r5, r1
 800a020:	ec51 0b19 	vmov	r0, r1, d9
 800a024:	f7f6 faf0 	bl	8000608 <__aeabi_dmul>
 800a028:	4642      	mov	r2, r8
 800a02a:	464b      	mov	r3, r9
 800a02c:	f7f6 f936 	bl	800029c <__adddf3>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 f92e 	bl	8000298 <__aeabi_dsub>
 800a03c:	4652      	mov	r2, sl
 800a03e:	465b      	mov	r3, fp
 800a040:	f7f6 f92a 	bl	8000298 <__aeabi_dsub>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4620      	mov	r0, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	e7d9      	b.n	800a002 <__ieee754_log+0x27a>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4650      	mov	r0, sl
 800a054:	4659      	mov	r1, fp
 800a056:	f7f6 f91f 	bl	8000298 <__aeabi_dsub>
 800a05a:	ec53 2b18 	vmov	r2, r3, d8
 800a05e:	f7f6 fad3 	bl	8000608 <__aeabi_dmul>
 800a062:	4606      	mov	r6, r0
 800a064:	460f      	mov	r7, r1
 800a066:	2c00      	cmp	r4, #0
 800a068:	f43f af23 	beq.w	8009eb2 <__ieee754_log+0x12a>
 800a06c:	a308      	add	r3, pc, #32	; (adr r3, 800a090 <__ieee754_log+0x308>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	ec51 0b19 	vmov	r0, r1, d9
 800a076:	f7f6 fac7 	bl	8000608 <__aeabi_dmul>
 800a07a:	a307      	add	r3, pc, #28	; (adr r3, 800a098 <__ieee754_log+0x310>)
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	ec51 0b19 	vmov	r0, r1, d9
 800a088:	e727      	b.n	8009eda <__ieee754_log+0x152>
 800a08a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a0e0 <__ieee754_log+0x358>
 800a08e:	e694      	b.n	8009dba <__ieee754_log+0x32>
 800a090:	fee00000 	.word	0xfee00000
 800a094:	3fe62e42 	.word	0x3fe62e42
 800a098:	35793c76 	.word	0x35793c76
 800a09c:	3dea39ef 	.word	0x3dea39ef
 800a0a0:	55555555 	.word	0x55555555
 800a0a4:	3fd55555 	.word	0x3fd55555
 800a0a8:	df3e5244 	.word	0xdf3e5244
 800a0ac:	3fc2f112 	.word	0x3fc2f112
 800a0b0:	96cb03de 	.word	0x96cb03de
 800a0b4:	3fc74664 	.word	0x3fc74664
 800a0b8:	94229359 	.word	0x94229359
 800a0bc:	3fd24924 	.word	0x3fd24924
 800a0c0:	55555593 	.word	0x55555593
 800a0c4:	3fe55555 	.word	0x3fe55555
 800a0c8:	d078c69f 	.word	0xd078c69f
 800a0cc:	3fc39a09 	.word	0x3fc39a09
 800a0d0:	1d8e78af 	.word	0x1d8e78af
 800a0d4:	3fcc71c5 	.word	0x3fcc71c5
 800a0d8:	9997fa04 	.word	0x9997fa04
 800a0dc:	3fd99999 	.word	0x3fd99999
	...
 800a0e8:	c3500000 	.word	0xc3500000
 800a0ec:	43500000 	.word	0x43500000
 800a0f0:	7fefffff 	.word	0x7fefffff
 800a0f4:	3ff00000 	.word	0x3ff00000
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	00000000 	.word	0x00000000

0800a100 <nan>:
 800a100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a108 <nan+0x8>
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	00000000 	.word	0x00000000
 800a10c:	7ff80000 	.word	0x7ff80000

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
